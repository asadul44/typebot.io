{"version":3,"sources":["../src/components/TypebotViewer.tsx","../../../schemas/features/blocks/inputs/enums.ts","../../../schemas/features/blocks/bubbles/enums.ts","../../../schemas/features/blocks/logic/enums.ts","../../../schemas/features/blocks/integrations/enums.ts","../../../lib/utils.ts","../src/features/variables/utils.ts","../src/utils/chat.ts","../src/providers/TypebotProvider.tsx","../src/components/ConversationContainer.tsx","../src/components/ChatGroup/ChatGroup.tsx","../src/components/ChatGroup/AvatarSideContainer.tsx","../src/components/avatars/Avatar.tsx","../src/components/avatars/DefaultAvatar.tsx","../../../../node_modules/.pnpm/zod@3.21.4/node_modules/zod/lib/index.mjs","../../../schemas/features/blocks/baseSchemas.ts","../../../schemas/features/blocks/bubbles/audio.ts","../../../schemas/features/utils.ts","../../../schemas/features/blocks/bubbles/embed.ts","../../../schemas/features/blocks/bubbles/image.ts","../../../schemas/features/blocks/bubbles/text.ts","../../../schemas/features/blocks/bubbles/video/enums.ts","../../../schemas/features/blocks/bubbles/video/schemas.ts","../../../schemas/features/items/baseSchemas.ts","../../../schemas/features/blocks/inputs/choice.ts","../../../schemas/features/blocks/inputs/date.ts","../../../schemas/features/blocks/inputs/text.ts","../../../schemas/features/blocks/inputs/email.ts","../../../schemas/features/blocks/inputs/file.ts","../../../schemas/features/blocks/inputs/number.ts","../../../schemas/features/blocks/inputs/payment/enums.ts","../../../schemas/features/blocks/inputs/payment/schemas.ts","../../../schemas/features/blocks/inputs/phone.ts","../../../schemas/features/blocks/inputs/rating.ts","../../../schemas/features/blocks/inputs/url.ts","../../../schemas/features/blocks/integrations/chatwoot.ts","../../../schemas/features/blocks/integrations/googleAnalytics.ts","../../../schemas/features/blocks/logic/condition.ts","../../../schemas/features/blocks/integrations/googleSheets/schemas.ts","../../../schemas/features/blocks/integrations/webhook.ts","../../../schemas/features/blocks/integrations/makeCom.ts","../../../schemas/features/blocks/integrations/pabblyConnect.ts","../../../schemas/features/blocks/integrations/sendEmail.ts","../../../schemas/features/blocks/integrations/zapier.ts","../../../schemas/features/blocks/logic/script.ts","../../../schemas/features/blocks/logic/redirect.ts","../../../schemas/features/blocks/logic/setVariable.ts","../../../schemas/features/blocks/logic/typebotLink.ts","../../../schemas/features/blocks/logic/wait.ts","../../../schemas/features/blocks/logic/abTest.ts","../../../schemas/features/blocks/start/schemas.ts","../../../schemas/features/blocks/integrations/openai.ts","../../../schemas/features/blocks/logic/jump.ts","../../../schemas/features/blocks/schemas.ts","../../../schemas/features/typebot/settings.ts","../../../schemas/features/typebot/theme/enums.ts","../../../schemas/features/typebot/theme/schemas.ts","../../../schemas/features/typebot/variable.ts","../../../schemas/features/typebot/typebot.ts","../../../schemas/features/publicTypebot.ts","../../../schemas/features/answer.ts","../../../schemas/features/result.ts","../../../schemas/features/credentials.ts","../../../schemas/features/chat.ts","../../../schemas/features/workspace.ts","../../../schemas/features/items/schemas.ts","../src/features/blocks/bubbles/audio/components/AudioBubble.tsx","../src/components/TypingBubble.tsx","../src/features/blocks/bubbles/embed/components/EmbedBubble.tsx","../src/features/blocks/bubbles/image/components/ImageBubble.tsx","../src/features/blocks/bubbles/textBubble/components/TextBubble.tsx","../src/features/blocks/bubbles/textBubble/utils/computeTypingDuration.ts","../src/features/blocks/bubbles/video/components/VideoBubble.tsx","../src/components/ChatGroup/ChatBlock/bubbles/HostBubble.tsx","../src/components/ChatGroup/ChatBlock/InputChatBlock.tsx","../src/providers/AnswersProvider.tsx","../src/components/ChatGroup/ChatBlock/bubbles/GuestBubble.tsx","../src/utils/helpers.ts","../src/components/inputs/ShortTextInput.tsx","../src/components/icons.tsx","../src/components/SendButton.tsx","../src/features/blocks/inputs/email/components/EmailInput.tsx","../src/features/blocks/inputs/email/utils/validateEmail.ts","../src/features/blocks/inputs/phone/components/PhoneInput.tsx","../src/features/blocks/inputs/phone/utils/validatePhoneNumber.ts","../src/features/blocks/inputs/url/components/UrlInput.tsx","../src/features/blocks/inputs/url/utils/validateUrl.ts","../src/utils/inputs.ts","../src/components/inputs/Textarea.tsx","../src/features/blocks/inputs/textInput/components/TextInput.tsx","../src/features/blocks/inputs/number/components/NumberInput.tsx","../src/features/blocks/inputs/date/components/DateForm.tsx","../src/features/blocks/inputs/date/utils/parseReadableDate.ts","../src/features/blocks/inputs/buttons/components/ChoiceForm.tsx","../src/features/blocks/inputs/payment/components/PaymentForm/StripePaymentForm.tsx","../src/lib/stripe.ts","../src/providers/ChatProvider.tsx","../src/features/blocks/inputs/payment/queries/createPaymentIntentQuery.ts","../src/features/blocks/inputs/payment/components/PaymentForm/PaymentForm.tsx","../src/features/blocks/inputs/rating/components/RatingForm.tsx","../src/features/blocks/inputs/fileUpload/components/FileUploadForm.tsx","../src/features/blocks/integrations/webhook/utils/executeWebhookBlock.ts","../src/utils/executeIntegration.ts","../src/features/blocks/logic/condition/utils/executeCondition.ts","../src/features/blocks/logic/redirect/utils/executeRedirect.ts","../src/features/blocks/logic/setVariable/utils/executeSetVariable.ts","../src/features/blocks/logic/typebotLink/queries/fetchAndInjectTypebotQuery.ts","../src/features/blocks/logic/typebotLink/utils/executeTypebotLink.ts","../src/features/blocks/logic/wait/utils/executeWait.ts","../src/features/blocks/logic/script/executeScript.ts","../src/utils/executeLogic.ts","../src/components/PopupBlockedToast.tsx","../src/features/theme/utils/setCssVariablesValue.ts","../src/components/LiteBadge.tsx"],"sourcesContent":["import { CSSProperties, useMemo } from 'react'\r\nimport { TypebotProvider } from '../providers/TypebotProvider'\r\nimport styles from '../assets/style.css'\r\nimport importantStyles from '../assets/importantStyles.css'\r\nimport phoneSyle from '../assets/phone.css'\r\nimport { ConversationContainer } from './ConversationContainer'\r\nimport { AnswersProvider } from '../providers/AnswersProvider'\r\nimport {\r\n  AnswerInput,\r\n  BackgroundType,\r\n  Edge,\r\n  PublicTypebot,\r\n  VariableWithValue,\r\n} from '@typebot.io/schemas'\r\nimport { Log } from '@typebot.io/prisma'\r\nimport { LiteBadge } from './LiteBadge'\r\nimport { getViewerUrl, isEmpty, isNotEmpty } from '@typebot.io/lib'\r\n\r\nexport type TypebotViewerProps = {\r\n  typebot: Omit<PublicTypebot, 'updatedAt' | 'createdAt'>\r\n  isPreview?: boolean\r\n  apiHost?: string\r\n  predefinedVariables?: { [key: string]: string | undefined }\r\n  resultId?: string\r\n  startGroupId?: string\r\n  isLoading?: boolean\r\n  onNewGroupVisible?: (edge: Edge) => void\r\n  onNewAnswer?: (\r\n    answer: AnswerInput & { uploadedFiles: boolean }\r\n  ) => Promise<void>\r\n  onNewLog?: (log: Omit<Log, 'id' | 'createdAt' | 'resultId'>) => void\r\n  onCompleted?: () => void\r\n  onVariablesUpdated?: (variables: VariableWithValue[]) => void\r\n}\r\n\r\nexport const TypebotViewer = ({\r\n  typebot,\r\n  apiHost = getViewerUrl(),\r\n  isPreview = false,\r\n  isLoading = false,\r\n  resultId,\r\n  startGroupId,\r\n  predefinedVariables,\r\n  onNewLog,\r\n  onNewGroupVisible,\r\n  onNewAnswer,\r\n  onCompleted,\r\n  onVariablesUpdated,\r\n}: TypebotViewerProps) => {\r\n  const containerBgColor = useMemo(\r\n    () =>\r\n      typebot?.theme?.general?.background?.type === BackgroundType.COLOR\r\n        ? typebot.theme.general.background.content\r\n        : 'transparent',\r\n    [typebot?.theme?.general?.background]\r\n  )\r\n  const handleNewGroupVisible = (edge: Edge) =>\r\n    onNewGroupVisible && onNewGroupVisible(edge)\r\n\r\n  const handleNewAnswer = (answer: AnswerInput & { uploadedFiles: boolean }) =>\r\n    onNewAnswer && onNewAnswer(answer)\r\n\r\n  const handleNewLog = (log: Omit<Log, 'id' | 'createdAt' | 'resultId'>) =>\r\n    onNewLog && onNewLog(log)\r\n\r\n  const handleCompleted = () => onCompleted && onCompleted()\r\n\r\n  if (isEmpty(apiHost))\r\n    return <p>process.env.NEXT_PUBLIC_VIEWER_URL is missing in env</p>\r\n  return (\r\n    <>\r\n      <style>\r\n        {phoneSyle}\r\n        {styles}\r\n      </style>\r\n      <style>{typebot.theme?.customCss}</style>\r\n      <style>{importantStyles}</style>\r\n      {isNotEmpty(typebot?.theme?.general?.font) && (\r\n        <style\r\n          dangerouslySetInnerHTML={{\r\n            __html: `@import url('https://fonts.googleapis.com/css2?family=${\r\n              typebot.theme.general.font ?? 'Open Sans'\r\n            }:ital,wght@0,300;0,400;0,600;1,300;1,400;1,600&display=swap');`,\r\n          }}\r\n        />\r\n      )}\r\n      <TypebotProvider\r\n        typebot={typebot}\r\n        apiHost={apiHost}\r\n        isPreview={isPreview}\r\n        onNewLog={handleNewLog}\r\n        isLoading={isLoading}\r\n      >\r\n        <AnswersProvider\r\n          resultId={resultId}\r\n          onNewAnswer={handleNewAnswer}\r\n          onVariablesUpdated={onVariablesUpdated}\r\n        >\r\n          <div\r\n            className=\"flex text-base overflow-hidden bg-cover h-screen w-screen flex-col items-center typebot-container\"\r\n            style={{\r\n              // We set this as inline style to avoid color flash for SSR\r\n              backgroundColor: containerBgColor ?? 'transparent',\r\n            }}\r\n            data-testid=\"container\"\r\n          >\r\n            <div className=\"flex w-full h-full justify-center\">\r\n              <ConversationContainer\r\n                theme={typebot.theme}\r\n                onNewGroupVisible={handleNewGroupVisible}\r\n                onCompleted={handleCompleted}\r\n                predefinedVariables={predefinedVariables}\r\n                startGroupId={startGroupId}\r\n              />\r\n            </div>\r\n            {typebot.settings.general.isBrandingEnabled && <LiteBadge />}\r\n          </div>\r\n        </AnswersProvider>\r\n      </TypebotProvider>\r\n    </>\r\n  )\r\n}\r\n","export enum InputBlockType {\r\n  TEXT = 'text input',\r\n  NUMBER = 'number input',\r\n  EMAIL = 'email input',\r\n  URL = 'url input',\r\n  DATE = 'date input',\r\n  PHONE = 'phone number input',\r\n  CHOICE = 'choice input',\r\n  PAYMENT = 'payment input',\r\n  RATING = 'rating input',\r\n  FILE = 'file input',\r\n}\r\n","export enum BubbleBlockType {\r\n  TEXT = 'text',\r\n  IMAGE = 'image',\r\n  VIDEO = 'video',\r\n  EMBED = 'embed',\r\n  AUDIO = 'audio',\r\n}\r\n","export enum LogicBlockType {\r\n  SET_VARIABLE = 'Set variable',\r\n  CONDITION = 'Condition',\r\n  REDIRECT = 'Redirect',\r\n  SCRIPT = 'Code',\r\n  TYPEBOT_LINK = 'Typebot link',\r\n  WAIT = 'Wait',\r\n  JUMP = 'Jump',\r\n  AB_TEST = 'AB test',\r\n}\r\n","export enum IntegrationBlockType {\r\n  // GOOGLE_SHEETS = 'Google Sheets',\r\n  OPEN_AI = 'OpenAI',\r\n  // GOOGLE_ANALYTICS = 'Google Analytics',\r\n  WEBHOOK = 'Webhook',\r\n  // EMAIL = 'Email',\r\n  // ZAPIER = 'Zapier',\r\n  // MAKE_COM = 'Make.com',\r\n  // PABBLY_CONNECT = 'Pabbly',\r\n  // CHATWOOT = 'Chatwoot',\r\n}\r\n","import type {\r\n  BubbleBlock,\r\n  ChoiceInputBlock,\r\n  ConditionBlock,\r\n  InputBlock,\r\n  IntegrationBlock,\r\n  LogicBlock,\r\n  Block,\r\n  TextInputBlock,\r\n  TextBubbleBlock,\r\n  WebhookBlock,\r\n  BlockType,\r\n  ImageBubbleBlock,\r\n  VideoBubbleBlock,\r\n  BlockWithOptionsType,\r\n} from '@typebot.io/schemas'\r\nimport { InputBlockType } from '@typebot.io/schemas/features/blocks/inputs/enums'\r\nimport { BubbleBlockType } from '@typebot.io/schemas/features/blocks/bubbles/enums'\r\nimport { LogicBlockType } from '@typebot.io/schemas/features/blocks/logic/enums'\r\nimport { IntegrationBlockType } from '@typebot.io/schemas/features/blocks/integrations/enums'\r\n\r\nexport const sendRequest = async <ResponseData>(\r\n  params:\r\n    | {\r\n        url: string\r\n        method: string\r\n        body?: Record<string, unknown> | FormData\r\n      }\r\n    | string\r\n): Promise<{ data?: ResponseData; error?: Error }> => {\r\n  try {\r\n    const url = typeof params === 'string' ? params : params.url\r\n    const response = await fetch(url, {\r\n      method: typeof params === 'string' ? 'GET' : params.method,\r\n      mode: 'cors',\r\n      headers:\r\n        typeof params !== 'string' && isDefined(params.body)\r\n          ? {\r\n              'Content-Type': 'application/json',\r\n            }\r\n          : undefined,\r\n      body:\r\n        typeof params !== 'string' && isDefined(params.body)\r\n          ? JSON.stringify(params.body)\r\n          : undefined,\r\n    })\r\n    const data = await response.json()\r\n    if (!response.ok) throw 'error' in data ? data.error : data\r\n    return { data }\r\n  } catch (e) {\r\n    console.error(e)\r\n    return { error: e as Error }\r\n  }\r\n}\r\n\r\nexport const isDefined = <T>(\r\n  value: T | undefined | null\r\n): value is NonNullable<T> => value !== undefined && value !== null\r\n\r\nexport const isNotDefined = <T>(\r\n  value: T | undefined | null\r\n): value is undefined | null => value === undefined || value === null\r\n\r\nexport const isEmpty = (value: string | undefined | null): value is undefined =>\r\n  value === undefined || value === null || value === ''\r\n\r\nexport const isNotEmpty = (value: string | undefined | null): value is string =>\r\n  value !== undefined && value !== null && value !== ''\r\n\r\nexport const isInputBlock = (block: Block): block is InputBlock =>\r\n  (Object.values(InputBlockType) as string[]).includes(block.type)\r\n\r\nexport const isBubbleBlock = (block: Block): block is BubbleBlock =>\r\n  (Object.values(BubbleBlockType) as string[]).includes(block.type)\r\n\r\nexport const isLogicBlock = (block: Block): block is LogicBlock =>\r\n  (Object.values(LogicBlockType) as string[]).includes(block.type)\r\n\r\nexport const isTextBubbleBlock = (block: Block): block is TextBubbleBlock =>\r\n  block.type === BubbleBlockType.TEXT\r\n\r\nexport const isMediaBubbleBlock = (\r\n  block: Block\r\n): block is ImageBubbleBlock | VideoBubbleBlock =>\r\n  block.type === BubbleBlockType.IMAGE || block.type === BubbleBlockType.VIDEO\r\n\r\nexport const isTextInputBlock = (block: Block): block is TextInputBlock =>\r\n  block.type === InputBlockType.TEXT\r\n\r\nexport const isChoiceInput = (block: Block): block is ChoiceInputBlock =>\r\n  block.type === InputBlockType.CHOICE\r\n\r\nexport const isSingleChoiceInput = (block: Block): block is ChoiceInputBlock =>\r\n  block.type === InputBlockType.CHOICE &&\r\n  'options' in block &&\r\n  !block.options.isMultipleChoice\r\n\r\nexport const isConditionBlock = (block: Block): block is ConditionBlock =>\r\n  block.type === LogicBlockType.CONDITION\r\n\r\nexport const isIntegrationBlock = (block: Block): block is IntegrationBlock =>\r\n  (Object.values(IntegrationBlockType) as string[]).includes(block.type)\r\n\r\nexport const isWebhookBlock = (block: Block): block is WebhookBlock =>\r\n  [\r\n    IntegrationBlockType.WEBHOOK,\r\n    // IntegrationBlockType.PABBLY_CONNECT,\r\n    // IntegrationBlockType.ZAPIER,\r\n    // IntegrationBlockType.MAKE_COM,\r\n  ].includes(block.type as IntegrationBlockType)\r\n\r\nexport const isBubbleBlockType = (type: BlockType): type is BubbleBlockType =>\r\n  (Object.values(BubbleBlockType) as string[]).includes(type)\r\n\r\nexport const blockTypeHasOption = (\r\n  type: BlockType\r\n): type is BlockWithOptionsType =>\r\n  (Object.values(InputBlockType) as string[])\r\n    .concat(Object.values(LogicBlockType))\r\n    .concat(Object.values(IntegrationBlockType))\r\n    .includes(type)\r\n\r\nexport const blockTypeHasWebhook = (\r\n  type: BlockType\r\n): type is IntegrationBlockType.WEBHOOK =>\r\n  Object.values([\r\n    IntegrationBlockType.WEBHOOK,\r\n    // IntegrationBlockType.ZAPIER,\r\n    // IntegrationBlockType.MAKE_COM,\r\n    // IntegrationBlockType.PABBLY_CONNECT,\r\n  ] as string[]).includes(type)\r\n\r\nexport const blockTypeHasItems = (\r\n  type: BlockType\r\n): type is\r\n  | LogicBlockType.CONDITION\r\n  | InputBlockType.CHOICE\r\n  | LogicBlockType.AB_TEST =>\r\n  type === LogicBlockType.CONDITION ||\r\n  type === InputBlockType.CHOICE ||\r\n  type === LogicBlockType.AB_TEST\r\n\r\nexport const blockHasItems = (\r\n  block: Block\r\n): block is ConditionBlock | ChoiceInputBlock =>\r\n  'items' in block && isDefined(block.items)\r\n\r\nexport const byId = (id?: string) => (obj: { id: string }) => obj.id === id\r\n\r\nexport const capitalize = (s: string) => s.charAt(0).toUpperCase() + s.slice(1)\r\n\r\ninterface Omit {\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  <T extends object, K extends [...(keyof T)[]]>(obj: T, ...keys: K): {\r\n    [K2 in Exclude<keyof T, K[number]>]: T[K2]\r\n  }\r\n}\r\n\r\nexport const omit: Omit = (obj, ...keys) => {\r\n  const ret = {} as {\r\n    [K in keyof typeof obj]: (typeof obj)[K]\r\n  }\r\n  let key: keyof typeof obj\r\n  for (key in obj) {\r\n    if (!keys.includes(key)) {\r\n      ret[key] = obj[key]\r\n    }\r\n  }\r\n  return ret\r\n}\r\n\r\nconst isVariableString = (str: string): boolean => /^\\{\\{.*\\}\\}$/.test(str)\r\n\r\nexport const sanitizeUrl = (url: string): string =>\r\n  url.startsWith('http') ||\r\n  url.startsWith('mailto:') ||\r\n  url.startsWith('tel:') ||\r\n  url.startsWith('sms:') ||\r\n  isVariableString(url)\r\n    ? url\r\n    : `https://${url}`\r\n\r\nexport const toTitleCase = (str: string) =>\r\n  str.replace(\r\n    /\\w\\S*/g,\r\n    (txt) => txt.charAt(0).toUpperCase() + txt.slice(1).toLowerCase()\r\n  )\r\n\r\nexport const generateId = (idDesiredLength: number): string => {\r\n  const getRandomCharFromAlphabet = (alphabet: string): string => {\r\n    return alphabet.charAt(Math.floor(Math.random() * alphabet.length))\r\n  }\r\n\r\n  return Array.from({ length: idDesiredLength })\r\n    .map(() => {\r\n      return getRandomCharFromAlphabet(\r\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\r\n      )\r\n    })\r\n    .join('')\r\n}\r\n\r\ntype UploadFileProps = {\r\n  basePath?: string\r\n  files: {\r\n    file: File\r\n    path: string\r\n  }[]\r\n  onUploadProgress?: (percent: number) => void\r\n}\r\ntype UrlList = (string | null)[]\r\n\r\nexport const uploadFiles = async ({\r\n  basePath = '/api',\r\n  files,\r\n  onUploadProgress,\r\n}: UploadFileProps): Promise<UrlList> => {\r\n  const urls = []\r\n  let i = 0\r\n  for (const { file, path } of files) {\r\n    onUploadProgress && onUploadProgress((i / files.length) * 100)\r\n    i += 1\r\n    const { data } = await sendRequest<{\r\n      presignedUrl: { url: string; fields: any }\r\n      hasReachedStorageLimit: boolean\r\n    }>(\r\n      `${basePath}/storage/upload-url?filePath=${encodeURIComponent(\r\n        path\r\n      )}&fileType=${file.type}`\r\n    )\r\n\r\n    if (!data?.presignedUrl) continue\r\n\r\n    const { url, fields } = data.presignedUrl\r\n    if (data.hasReachedStorageLimit) urls.push(null)\r\n    else {\r\n      const formData = new FormData()\r\n      Object.entries({ ...fields, file }).forEach(([key, value]) => {\r\n        formData.append(key, value as string | Blob)\r\n      })\r\n      const upload = await fetch(url, {\r\n        method: 'POST',\r\n        body: formData,\r\n      })\r\n\r\n      if (!upload.ok) continue\r\n\r\n      urls.push(`${url.split('?')[0]}/${path}`)\r\n    }\r\n  }\r\n  return urls\r\n}\r\n\r\ndeclare const window: any\r\n\r\nexport const env = (key = ''): string | undefined => {\r\n  if (typeof window === 'undefined')\r\n    return isEmpty(process.env['NEXT_PUBLIC_' + key])\r\n      ? undefined\r\n      : (process.env['NEXT_PUBLIC_' + key] as string)\r\n\r\n  if (typeof window !== 'undefined' && window.__env)\r\n    return isEmpty(window.__env[key]) ? undefined : window.__env[key]\r\n}\r\n\r\nexport const hasValue = (\r\n  value: string | undefined | null\r\n): value is NonNullable<string> =>\r\n  value !== undefined &&\r\n  value !== null &&\r\n  value !== '' &&\r\n  value !== 'undefined' &&\r\n  value !== 'null'\r\n\r\nexport const getViewerUrl = (props?: {\r\n  returnAll?: boolean\r\n}): string | undefined =>\r\n  props?.returnAll ? env('VIEWER_URL') : env('VIEWER_URL')?.split(',')[0]\r\n\r\nexport const parseNumberWithCommas = (num: number) =>\r\n  num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\r\n\r\nexport const injectCustomHeadCode = (customHeadCode: string) => {\r\n  const headCodes = customHeadCode.split('</noscript>')\r\n  headCodes.forEach((headCode) => {\r\n    const [codeToInject, noScriptContentToInject] = headCode.split('<noscript>')\r\n    const fragment = document\r\n      .createRange()\r\n      .createContextualFragment(codeToInject)\r\n    document.head.append(fragment)\r\n\r\n    if (isNotDefined(noScriptContentToInject)) return\r\n\r\n    const noScriptElement = document.createElement('noscript')\r\n    const noScriptContentFragment = document\r\n      .createRange()\r\n      .createContextualFragment(noScriptContentToInject)\r\n    noScriptElement.append(noScriptContentFragment)\r\n    document.head.append(noScriptElement)\r\n  })\r\n}\r\n\r\nexport const getAtPath = <T>(obj: T, path: string): unknown => {\r\n  if (isNotDefined(obj)) return undefined\r\n  const pathParts = path.split('.')\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  let current: any = obj\r\n  for (const part of pathParts) {\r\n    if (current === undefined) {\r\n      return undefined\r\n    }\r\n    current = current[part]\r\n  }\r\n  return current\r\n}\r\n\r\nexport const parseGroupTitle = (title: string) =>\r\n  isEmpty(title) ? 'Untitled' : title\r\n\r\nexport const convertBytesToMB = (bytes: number) => {\r\n  return bytes / 1024 / 1024\r\n}\r\n","import { Variable, VariableWithValue } from '@typebot.io/schemas'\r\nimport { isDefined, isNotDefined } from '@typebot.io/lib'\r\n\r\nexport const stringContainsVariable = (str: string): boolean =>\r\n  /\\{\\{(.*?)\\}\\}/g.test(str)\r\n\r\nexport const parseVariables =\r\n  (\r\n    variables: Variable[],\r\n    options: { fieldToParse?: 'value' | 'id'; escapeForJson?: boolean } = {\r\n      fieldToParse: 'value',\r\n      escapeForJson: false,\r\n    }\r\n  ) =>\r\n  (text: string | undefined): string => {\r\n    if (!text || text === '') return ''\r\n    return text.replace(/\\{\\{(.*?)\\}\\}/g, (_, fullVariableString) => {\r\n      const matchedVarName = fullVariableString.replace(/{{|}}/g, '')\r\n      const variable = variables.find((variable) => {\r\n        return (\r\n          matchedVarName === variable.name &&\r\n          (options.fieldToParse === 'id' || isDefined(variable.value))\r\n        )\r\n      }) as VariableWithValue | undefined\r\n      if (!variable) return ''\r\n      if (options.fieldToParse === 'id') return variable.id\r\n      const { value } = variable\r\n      if (options.escapeForJson)\r\n        return typeof value === 'string'\r\n          ? jsonParse(value)\r\n          : jsonParse(JSON.stringify(value))\r\n      const parsedValue = safeStringify(value)\r\n      if (!parsedValue) return ''\r\n      return parsedValue\r\n    })\r\n  }\r\n\r\nexport const safeStringify = (val: unknown): string | null => {\r\n  if (isNotDefined(val)) return null\r\n  if (typeof val === 'string') return val\r\n  try {\r\n    return JSON.stringify(val)\r\n  } catch {\r\n    console.warn('Failed to safely stringify variable value', val)\r\n    return null\r\n  }\r\n}\r\n\r\nexport const parseCorrectValueType = (\r\n  value: Variable['value']\r\n): string | (string | null)[] | boolean | number | null | undefined => {\r\n  if (value === null) return null\r\n  if (value === undefined) return undefined\r\n  if (Array.isArray(value)) return value\r\n  if (typeof value === 'number') return value\r\n  if (value === 'true') return true\r\n  if (value === 'false') return false\r\n  if (value === 'null') return null\r\n  if (value === 'undefined') return undefined\r\n  try {\r\n    return JSON.parse(value)\r\n  } catch {\r\n    return value\r\n  }\r\n}\r\n\r\nconst jsonParse = (str: string) =>\r\n  str\r\n    .replace(/\\n/g, `\\\\n`)\r\n    .replace(/\"/g, `\\\\\"`)\r\n    .replace(/\\\\[^n\"]/g, `\\\\\\\\ `)\r\n\r\nexport const parseVariablesInObject = (\r\n  object: { [key: string]: string | number },\r\n  variables: Variable[]\r\n) =>\r\n  Object.keys(object).reduce((newObj, key) => {\r\n    const currentValue = object[key]\r\n    return {\r\n      ...newObj,\r\n      [key]:\r\n        typeof currentValue === 'string'\r\n          ? parseVariables(variables)(currentValue)\r\n          : currentValue,\r\n    }\r\n  }, {})\r\n","import {\r\n  BubbleBlock,\r\n  BubbleBlockType,\r\n  InputBlock,\r\n  InputBlockType,\r\n  Block,\r\n} from '@typebot.io/schemas'\r\nimport { isBubbleBlock, isInputBlock } from '@typebot.io/lib'\r\nimport type { TypebotPostMessageData } from 'typebot-js'\r\n\r\nexport const getLastChatBlockType = (\r\n  blocks: Block[]\r\n): BubbleBlockType | InputBlockType | undefined => {\r\n  const displayedBlocks = blocks.filter(\r\n    (s) => isBubbleBlock(s) || isInputBlock(s)\r\n  ) as (BubbleBlock | InputBlock)[]\r\n  return displayedBlocks.pop()?.type\r\n}\r\n\r\nexport const sendEventToParent = (data: TypebotPostMessageData) => {\r\n  try {\r\n    window.top?.postMessage(\r\n      {\r\n        from: 'typebot',\r\n        ...data,\r\n      },\r\n      '*'\r\n    )\r\n  } catch (error) {\r\n    console.error(error)\r\n  }\r\n}\r\n","import { TypebotViewerProps } from '@/components/TypebotViewer'\r\nimport { safeStringify } from '@/features/variables'\r\nimport { sendEventToParent } from '@/utils/chat'\r\nimport { Log } from '@typebot.io/prisma'\r\nimport { Edge, PublicTypebot, Typebot, Variable } from '@typebot.io/schemas'\r\nimport {\r\n  createContext,\r\n  ReactNode,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from 'react'\r\nimport { isDefined } from '@typebot.io/lib'\r\n\r\nexport type LinkedTypebot = Pick<\r\n  PublicTypebot | Typebot,\r\n  'id' | 'groups' | 'variables' | 'edges'\r\n>\r\n\r\nexport type LinkedTypebotQueue = {\r\n  typebotId: string\r\n  edgeId: string\r\n}[]\r\n\r\nconst typebotContext = createContext<{\r\n  currentTypebotId: string\r\n  typebot: TypebotViewerProps['typebot']\r\n  linkedTypebots: LinkedTypebot[]\r\n  apiHost: string\r\n  isPreview: boolean\r\n  linkedBotQueue: LinkedTypebotQueue\r\n  isLoading: boolean\r\n  parentTypebotIds: string[]\r\n  setCurrentTypebotId: (id: string) => void\r\n  updateVariableValue: (variableId: string, value: unknown) => void\r\n  createEdge: (edge: Edge) => void\r\n  injectLinkedTypebot: (typebot: Typebot | PublicTypebot) => LinkedTypebot\r\n  pushParentTypebotId: (typebotId: string) => void\r\n  popEdgeIdFromLinkedTypebotQueue: () => void\r\n  pushEdgeIdInLinkedTypebotQueue: (bot: {\r\n    typebotId: string\r\n    edgeId: string\r\n  }) => void\r\n  onNewLog: (log: Omit<Log, 'id' | 'createdAt' | 'resultId'>) => void\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  //@ts-ignore\r\n}>({})\r\n\r\nexport const TypebotProvider = ({\r\n  children,\r\n  typebot,\r\n  apiHost,\r\n  isPreview,\r\n  isLoading,\r\n  onNewLog,\r\n}: {\r\n  children: ReactNode\r\n  typebot: TypebotViewerProps['typebot']\r\n  apiHost: string\r\n  isLoading: boolean\r\n  isPreview: boolean\r\n  onNewLog: (log: Omit<Log, 'id' | 'createdAt' | 'resultId'>) => void\r\n}) => {\r\n  const [localTypebot, setLocalTypebot] =\r\n    useState<TypebotViewerProps['typebot']>(typebot)\r\n  const [linkedTypebots, setLinkedTypebots] = useState<LinkedTypebot[]>([])\r\n  const [currentTypebotId, setCurrentTypebotId] = useState(typebot.typebotId)\r\n  const [linkedBotQueue, setLinkedBotQueue] = useState<LinkedTypebotQueue>([])\r\n  const [parentTypebotIds, setParentTypebotIds] = useState<string[]>([])\r\n\r\n  useEffect(() => {\r\n    setLocalTypebot((localTypebot) => ({\r\n      ...localTypebot,\r\n      theme: typebot.theme,\r\n      settings: typebot.settings,\r\n    }))\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [typebot.theme, typebot.settings])\r\n\r\n  const updateVariableValue = (variableId: string, value: unknown) => {\r\n    const formattedValue = safeStringify(value)\r\n\r\n    sendEventToParent({\r\n      newVariableValue: {\r\n        name:\r\n          localTypebot.variables.find((variable) => variable.id === variableId)\r\n            ?.name ?? '',\r\n        value: formattedValue ?? '',\r\n      },\r\n    })\r\n\r\n    const variable = localTypebot.variables.find((v) => v.id === variableId)\r\n    const otherVariablesWithSameName = localTypebot.variables.filter(\r\n      (v) => v.name === variable?.name && v.id !== variableId\r\n    )\r\n    const variablesToUpdate = [variable, ...otherVariablesWithSameName].filter(\r\n      isDefined\r\n    )\r\n\r\n    setLocalTypebot((typebot) => ({\r\n      ...typebot,\r\n      variables: typebot.variables.map((variable) =>\r\n        variablesToUpdate.some(\r\n          (variableToUpdate) => variableToUpdate.id === variable.id\r\n        )\r\n          ? { ...variable, value: formattedValue }\r\n          : variable\r\n      ),\r\n    }))\r\n  }\r\n\r\n  const createEdge = (edge: Edge) => {\r\n    setLocalTypebot((typebot) => ({\r\n      ...typebot,\r\n      edges: [...typebot.edges, edge],\r\n    }))\r\n  }\r\n\r\n  const injectLinkedTypebot = (typebot: Typebot | PublicTypebot) => {\r\n    const newVariables = fillVariablesWithExistingValues(\r\n      typebot.variables,\r\n      localTypebot.variables\r\n    )\r\n    const typebotToInject = {\r\n      id: 'typebotId' in typebot ? typebot.typebotId : typebot.id,\r\n      groups: typebot.groups,\r\n      edges: typebot.edges,\r\n      variables: newVariables,\r\n    }\r\n    setLinkedTypebots((typebots) => [...typebots, typebotToInject])\r\n    const updatedTypebot = {\r\n      ...localTypebot,\r\n      groups: [...localTypebot.groups, ...typebotToInject.groups],\r\n      variables: [...localTypebot.variables, ...typebotToInject.variables],\r\n      edges: [...localTypebot.edges, ...typebotToInject.edges],\r\n    }\r\n    setLocalTypebot(updatedTypebot)\r\n    return typebotToInject\r\n  }\r\n\r\n  const fillVariablesWithExistingValues = (\r\n    variables: Variable[],\r\n    variablesWithValues: Variable[]\r\n  ): Variable[] =>\r\n    variables.map((variable) => {\r\n      const matchedVariable = variablesWithValues.find(\r\n        (variableWithValue) => variableWithValue.name === variable.name\r\n      )\r\n\r\n      return {\r\n        ...variable,\r\n        value: matchedVariable?.value ?? variable.value,\r\n      }\r\n    })\r\n\r\n  const pushParentTypebotId = (typebotId: string) => {\r\n    setParentTypebotIds((ids) => [...ids, typebotId])\r\n  }\r\n\r\n  const pushEdgeIdInLinkedTypebotQueue = (bot: {\r\n    typebotId: string\r\n    edgeId: string\r\n  }) => setLinkedBotQueue((queue) => [...queue, bot])\r\n\r\n  const popEdgeIdFromLinkedTypebotQueue = () => {\r\n    setLinkedBotQueue((queue) => queue.slice(1))\r\n    setParentTypebotIds((ids) => ids.slice(1))\r\n    setCurrentTypebotId(linkedBotQueue[0].typebotId)\r\n  }\r\n\r\n  return (\r\n    <typebotContext.Provider\r\n      value={{\r\n        typebot: localTypebot,\r\n        linkedTypebots,\r\n        apiHost,\r\n        isPreview,\r\n        updateVariableValue,\r\n        createEdge,\r\n        injectLinkedTypebot,\r\n        onNewLog,\r\n        linkedBotQueue,\r\n        isLoading,\r\n        parentTypebotIds,\r\n        pushParentTypebotId,\r\n        pushEdgeIdInLinkedTypebotQueue,\r\n        popEdgeIdFromLinkedTypebotQueue,\r\n        currentTypebotId,\r\n        setCurrentTypebotId,\r\n      }}\r\n    >\r\n      {children}\r\n    </typebotContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useTypebot = () => useContext(typebotContext)\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { ChatGroup } from './ChatGroup'\r\nimport { useAnswers } from '../providers/AnswersProvider'\r\nimport {\r\n  Group,\r\n  Edge,\r\n  PublicTypebot,\r\n  Theme,\r\n  VariableWithValue,\r\n} from '@typebot.io/schemas'\r\nimport { byId, isDefined, isInputBlock, isNotDefined } from '@typebot.io/lib'\r\nimport { animateScroll as scroll } from 'react-scroll'\r\nimport { LinkedTypebot, useTypebot } from '@/providers/TypebotProvider'\r\nimport { setCssVariablesValue } from '@/features/theme'\r\nimport { ChatProvider } from '@/providers/ChatProvider'\r\n\r\ntype Props = {\r\n  theme: Theme\r\n  predefinedVariables?: { [key: string]: string | undefined }\r\n  startGroupId?: string\r\n  onNewGroupVisible: (edge: Edge) => void\r\n  onCompleted: () => void\r\n}\r\nexport const ConversationContainer = ({\r\n  theme,\r\n  predefinedVariables,\r\n  startGroupId,\r\n  onNewGroupVisible,\r\n  onCompleted,\r\n}: Props) => {\r\n  const {\r\n    typebot,\r\n    updateVariableValue,\r\n    linkedBotQueue,\r\n    popEdgeIdFromLinkedTypebotQueue,\r\n  } = useTypebot()\r\n  const [displayedGroups, setDisplayedGroups] = useState<\r\n    { group: Group; startBlockIndex: number }[]\r\n  >([])\r\n  const { updateVariables } = useAnswers()\r\n  const bottomAnchor = useRef<HTMLDivElement | null>(null)\r\n  const scrollableContainer = useRef<HTMLDivElement | null>(null)\r\n  const [hasStarted, setHasStarted] = useState(false)\r\n\r\n  const displayNextGroup = ({\r\n    edgeId,\r\n    updatedTypebot,\r\n    groupId,\r\n  }: {\r\n    edgeId?: string\r\n    groupId?: string\r\n    updatedTypebot?: PublicTypebot | LinkedTypebot\r\n  }) => {\r\n    const currentTypebot = updatedTypebot ?? typebot\r\n    if (groupId) {\r\n      const nextGroup = currentTypebot.groups.find(byId(groupId))\r\n      if (!nextGroup) return\r\n      onNewGroupVisible({\r\n        id: 'edgeId',\r\n        from: { groupId: 'block', blockId: 'block' },\r\n        to: { groupId },\r\n      })\r\n      return setDisplayedGroups([\r\n        ...displayedGroups,\r\n        { group: nextGroup, startBlockIndex: 0 },\r\n      ])\r\n    }\r\n    const nextEdge = currentTypebot.edges.find(byId(edgeId))\r\n    if (!nextEdge) {\r\n      if (linkedBotQueue.length > 0) {\r\n        const nextEdgeId = linkedBotQueue[0].edgeId\r\n        popEdgeIdFromLinkedTypebotQueue()\r\n        displayNextGroup({ edgeId: nextEdgeId })\r\n      }\r\n      return onCompleted()\r\n    }\r\n    const nextGroup = currentTypebot.groups.find(byId(nextEdge.to.groupId))\r\n    if (!nextGroup) return onCompleted()\r\n    const startBlockIndex = nextEdge.to.blockId\r\n      ? nextGroup.blocks.findIndex(byId(nextEdge.to.blockId))\r\n      : 0\r\n    onNewGroupVisible(nextEdge)\r\n    setDisplayedGroups([\r\n      ...displayedGroups,\r\n      {\r\n        group: nextGroup,\r\n        startBlockIndex: startBlockIndex === -1 ? 0 : startBlockIndex,\r\n      },\r\n    ])\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (hasStarted) return\r\n    if (\r\n      isDefined(predefinedVariables) &&\r\n      Object.keys(predefinedVariables).length > 0\r\n    ) {\r\n      const prefilledVariables = injectPredefinedVariables(predefinedVariables)\r\n      updateVariables(prefilledVariables)\r\n    }\r\n    setHasStarted(true)\r\n    const startEdge = typebot.groups[0].blocks[0].outgoingEdgeId\r\n    if (!startEdge && !startGroupId) return\r\n    displayNextGroup({\r\n      edgeId: startGroupId ? undefined : startEdge,\r\n      groupId: startGroupId,\r\n    })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [predefinedVariables])\r\n\r\n  const injectPredefinedVariables = (predefinedVariables: {\r\n    [key: string]: string | undefined\r\n  }) => {\r\n    const prefilledVariables: VariableWithValue[] = []\r\n    Object.keys(predefinedVariables).forEach((key) => {\r\n      const matchingVariable = typebot.variables.find(\r\n        (v) => v.name.toLowerCase() === key.toLowerCase()\r\n      )\r\n      if (!predefinedVariables || isNotDefined(matchingVariable)) return\r\n      const value = predefinedVariables[key]\r\n      if (!value) return\r\n      updateVariableValue(matchingVariable?.id, value)\r\n      prefilledVariables.push({ ...matchingVariable, value })\r\n    })\r\n    return prefilledVariables\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!document) return\r\n    setCssVariablesValue(theme, document.body.style)\r\n  }, [theme])\r\n\r\n  const autoScrollToBottom = () => {\r\n    if (!scrollableContainer.current) return\r\n    setTimeout(() => {\r\n      scroll.scrollToBottom({\r\n        duration: 500,\r\n        container: scrollableContainer.current,\r\n      })\r\n    }, 1)\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={scrollableContainer}\r\n      className=\"overflow-y-scroll w-full lg:w-3/4 min-h-full rounded lg:px-5 px-3 pt-10 relative scrollable-container typebot-chat-view\"\r\n    >\r\n      <ChatProvider onScroll={autoScrollToBottom}>\r\n        {displayedGroups.map((displayedGroup, idx) => {\r\n          const groupAfter = displayedGroups[idx + 1]\r\n          const groupAfterStartsWithInput =\r\n            groupAfter &&\r\n            isInputBlock(groupAfter.group.blocks[groupAfter.startBlockIndex])\r\n          return (\r\n            <ChatGroup\r\n              key={displayedGroup.group.id + idx}\r\n              blocks={displayedGroup.group.blocks}\r\n              startBlockIndex={displayedGroup.startBlockIndex}\r\n              onGroupEnd={displayNextGroup}\r\n              groupTitle={displayedGroup.group.title}\r\n              keepShowingHostAvatar={\r\n                idx === displayedGroups.length - 1 || groupAfterStartsWithInput\r\n              }\r\n            />\r\n          )\r\n        })}\r\n      </ChatProvider>\r\n\r\n      {/* We use a block to simulate padding because it makes iOS scroll flicker */}\r\n      <div className=\"w-full h-32\" ref={bottomAnchor} />\r\n    </div>\r\n  )\r\n}\r\n","import { useEffect, useRef, useState } from 'react'\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\r\nimport { AvatarSideContainer } from './AvatarSideContainer'\r\nimport { LinkedTypebot, useTypebot } from '../../providers/TypebotProvider'\r\nimport {\r\n  isBubbleBlock,\r\n  isBubbleBlockType,\r\n  isChoiceInput,\r\n  isDefined,\r\n  isInputBlock,\r\n  isIntegrationBlock,\r\n  isLogicBlock,\r\n  byId,\r\n} from '@typebot.io/lib'\r\nimport {\r\n  BubbleBlock,\r\n  InputBlock,\r\n  LogicBlockType,\r\n  PublicTypebot,\r\n  Block,\r\n} from '@typebot.io/schemas'\r\nimport { HostBubble } from './ChatBlock/bubbles/HostBubble'\r\nimport { InputChatBlock } from './ChatBlock/InputChatBlock'\r\nimport { parseVariables } from '@/features/variables'\r\nimport { useAnswers } from '@/providers/AnswersProvider'\r\nimport { useChat } from '@/providers/ChatProvider'\r\nimport { InputSubmitContent } from '@/types'\r\nimport { getLastChatBlockType } from '@/utils/chat'\r\nimport { executeIntegration } from '@/utils/executeIntegration'\r\nimport { executeLogic } from '@/utils/executeLogic'\r\nimport { blockCanBeRetried, parseRetryBlock } from '@/utils/inputs'\r\nimport { PopupBlockedToast } from '../PopupBlockedToast'\r\n\r\ntype ChatGroupProps = {\r\n  blocks: Block[]\r\n  startBlockIndex: number\r\n  groupTitle: string\r\n  keepShowingHostAvatar: boolean\r\n  onGroupEnd: ({\r\n    edgeId,\r\n    updatedTypebot,\r\n  }: {\r\n    edgeId?: string\r\n    updatedTypebot?: PublicTypebot | LinkedTypebot\r\n  }) => void\r\n}\r\n\r\ntype ChatDisplayChunk = { bubbles: BubbleBlock[]; input?: InputBlock }\r\n\r\nexport const ChatGroup = ({\r\n  blocks,\r\n  startBlockIndex,\r\n  groupTitle,\r\n  onGroupEnd,\r\n  keepShowingHostAvatar,\r\n}: ChatGroupProps) => {\r\n  const {\r\n    currentTypebotId,\r\n    typebot,\r\n    updateVariableValue,\r\n    createEdge,\r\n    apiHost,\r\n    isPreview,\r\n    parentTypebotIds,\r\n    onNewLog,\r\n    injectLinkedTypebot,\r\n    linkedTypebots,\r\n    setCurrentTypebotId,\r\n    pushEdgeIdInLinkedTypebotQueue,\r\n    pushParentTypebotId,\r\n  } = useTypebot()\r\n  const { resultValues, updateVariables, resultId } = useAnswers()\r\n  const { scroll } = useChat()\r\n  const [processedBlocks, setProcessedBlocks] = useState<Block[]>([])\r\n  const [displayedChunks, setDisplayedChunks] = useState<ChatDisplayChunk[]>([])\r\n  const [blockedPopupUrl, setBlockedPopupUrl] = useState<string>()\r\n\r\n  const insertBlockInStack = (nextBlock: Block) => {\r\n    setProcessedBlocks([...processedBlocks, nextBlock])\r\n    if (isBubbleBlock(nextBlock)) {\r\n      const lastBlockType = getLastChatBlockType(processedBlocks)\r\n      lastBlockType && isBubbleBlockType(lastBlockType)\r\n        ? setDisplayedChunks(\r\n            displayedChunks.map((c, idx) =>\r\n              idx === displayedChunks.length - 1\r\n                ? { bubbles: [...c.bubbles, nextBlock] }\r\n                : c\r\n            )\r\n          )\r\n        : setDisplayedChunks([...displayedChunks, { bubbles: [nextBlock] }])\r\n    }\r\n    if (isInputBlock(nextBlock)) {\r\n      displayedChunks.length === 0 ||\r\n      isDefined(displayedChunks[displayedChunks.length - 1].input)\r\n        ? setDisplayedChunks([\r\n            ...displayedChunks,\r\n            { bubbles: [], input: nextBlock },\r\n          ])\r\n        : setDisplayedChunks(\r\n            displayedChunks.map((c, idx) =>\r\n              idx === displayedChunks.length - 1\r\n                ? { ...c, input: nextBlock }\r\n                : c\r\n            )\r\n          )\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const nextBlock = blocks[startBlockIndex]\r\n    if (nextBlock) insertBlockInStack(nextBlock)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    scroll()\r\n    onNewBlockDisplayed()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [processedBlocks])\r\n\r\n  const onNewBlockDisplayed = async () => {\r\n    const currentBlock = [...processedBlocks].pop()\r\n    if (!currentBlock) return\r\n    if (isLogicBlock(currentBlock)) {\r\n      const { nextEdgeId, linkedTypebot, blockedPopupUrl } = await executeLogic(\r\n        currentBlock,\r\n        {\r\n          isPreview,\r\n          apiHost,\r\n          typebot,\r\n          linkedTypebots,\r\n          updateVariableValue,\r\n          updateVariables,\r\n          injectLinkedTypebot,\r\n          onNewLog,\r\n          createEdge,\r\n          setCurrentTypebotId,\r\n          pushEdgeIdInLinkedTypebotQueue,\r\n          currentTypebotId,\r\n          pushParentTypebotId,\r\n        }\r\n      )\r\n      if (blockedPopupUrl) setBlockedPopupUrl(blockedPopupUrl)\r\n      const isRedirecting =\r\n        currentBlock.type === LogicBlockType.REDIRECT &&\r\n        currentBlock.options.isNewTab === false\r\n      if (isRedirecting) return\r\n      nextEdgeId\r\n        ? onGroupEnd({ edgeId: nextEdgeId, updatedTypebot: linkedTypebot })\r\n        : displayNextBlock()\r\n    }\r\n    if (isIntegrationBlock(currentBlock)) {\r\n      const nextEdgeId = await executeIntegration({\r\n        block: currentBlock,\r\n        context: {\r\n          apiHost,\r\n          typebotId: currentTypebotId,\r\n          groupId: currentBlock.groupId,\r\n          blockId: currentBlock.id,\r\n          variables: typebot.variables,\r\n          isPreview,\r\n          updateVariableValue,\r\n          updateVariables,\r\n          resultValues,\r\n          groups: typebot.groups,\r\n          onNewLog,\r\n          resultId,\r\n          parentTypebotIds,\r\n        },\r\n      })\r\n      nextEdgeId ? onGroupEnd({ edgeId: nextEdgeId }) : displayNextBlock()\r\n    }\r\n    if (currentBlock.type === 'start')\r\n      onGroupEnd({ edgeId: currentBlock.outgoingEdgeId })\r\n  }\r\n\r\n  const displayNextBlock = (\r\n    answerContent?: InputSubmitContent,\r\n    isRetry?: boolean\r\n  ) => {\r\n    scroll()\r\n    const currentBlock = [...processedBlocks].pop()\r\n    if (currentBlock) {\r\n      if (isRetry && blockCanBeRetried(currentBlock))\r\n        return insertBlockInStack(\r\n          parseRetryBlock(currentBlock, typebot.variables, createEdge)\r\n        )\r\n      if (\r\n        isInputBlock(currentBlock) &&\r\n        currentBlock.options?.variableId &&\r\n        answerContent\r\n      ) {\r\n        updateVariableValue(\r\n          currentBlock.options.variableId,\r\n          answerContent.value\r\n        )\r\n      }\r\n      const isSingleChoiceBlock =\r\n        isChoiceInput(currentBlock) && !currentBlock.options.isMultipleChoice\r\n      if (isSingleChoiceBlock) {\r\n        const nextEdgeId = currentBlock.items.find(\r\n          byId(answerContent?.itemId)\r\n        )?.outgoingEdgeId\r\n        if (nextEdgeId) return onGroupEnd({ edgeId: nextEdgeId })\r\n      }\r\n\r\n      if (\r\n        currentBlock?.outgoingEdgeId ||\r\n        processedBlocks.length === blocks.length\r\n      )\r\n        return onGroupEnd({ edgeId: currentBlock.outgoingEdgeId })\r\n    }\r\n    const nextBlock = blocks[processedBlocks.length + startBlockIndex]\r\n    nextBlock ? insertBlockInStack(nextBlock) : onGroupEnd({})\r\n  }\r\n\r\n  const avatarSrc = typebot.theme.chat.hostAvatar?.url\r\n\r\n  return (\r\n    <div className=\"flex w-full\" data-group-name={groupTitle}>\r\n      <div className=\"flex flex-col w-full min-w-0\">\r\n        {displayedChunks.map((chunk, idx) => (\r\n          <ChatChunks\r\n            key={idx}\r\n            displayChunk={chunk}\r\n            hostAvatar={{\r\n              isEnabled: typebot.theme.chat.hostAvatar?.isEnabled ?? true,\r\n              src: avatarSrc && parseVariables(typebot.variables)(avatarSrc),\r\n            }}\r\n            hasGuestAvatar={typebot.theme.chat.guestAvatar?.isEnabled ?? false}\r\n            onDisplayNextBlock={displayNextBlock}\r\n            keepShowingHostAvatar={keepShowingHostAvatar}\r\n            blockedPopupUrl={blockedPopupUrl}\r\n            onBlockedPopupLinkClick={() => setBlockedPopupUrl(undefined)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\ntype Props = {\r\n  displayChunk: ChatDisplayChunk\r\n  hostAvatar: { isEnabled: boolean; src?: string }\r\n  hasGuestAvatar: boolean\r\n  keepShowingHostAvatar: boolean\r\n  blockedPopupUrl?: string\r\n  onBlockedPopupLinkClick: () => void\r\n  onDisplayNextBlock: (\r\n    answerContent?: InputSubmitContent,\r\n    isRetry?: boolean\r\n  ) => void\r\n}\r\nconst ChatChunks = ({\r\n  displayChunk: { bubbles, input },\r\n  hostAvatar,\r\n  hasGuestAvatar,\r\n  keepShowingHostAvatar,\r\n  blockedPopupUrl,\r\n  onBlockedPopupLinkClick,\r\n  onDisplayNextBlock,\r\n}: Props) => {\r\n  const [isSkipped, setIsSkipped] = useState(false)\r\n\r\n  const avatarSideContainerRef = useRef<{ refreshTopOffset: () => void }>()\r\n\r\n  useEffect(() => {\r\n    refreshTopOffset()\r\n  })\r\n\r\n  const skipInput = () => {\r\n    onDisplayNextBlock()\r\n    setIsSkipped(true)\r\n  }\r\n\r\n  const refreshTopOffset = () =>\r\n    avatarSideContainerRef.current?.refreshTopOffset()\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        {hostAvatar.isEnabled && bubbles.length > 0 && (\r\n          <AvatarSideContainer\r\n            ref={avatarSideContainerRef}\r\n            hostAvatarSrc={hostAvatar.src}\r\n            keepShowing={\r\n              (keepShowingHostAvatar || isDefined(input)) && !isSkipped\r\n            }\r\n          />\r\n        )}\r\n        <div\r\n          className=\"flex-1\"\r\n          style={{ marginRight: hasGuestAvatar ? '50px' : '0.5rem' }}\r\n        >\r\n          <TransitionGroup>\r\n            {bubbles.map((block) => (\r\n              <CSSTransition\r\n                key={block.id}\r\n                classNames=\"bubble\"\r\n                timeout={500}\r\n                unmountOnExit\r\n              >\r\n                <HostBubble\r\n                  block={block}\r\n                  onTransitionEnd={() => {\r\n                    onDisplayNextBlock()\r\n                    refreshTopOffset()\r\n                  }}\r\n                />\r\n              </CSSTransition>\r\n            ))}\r\n          </TransitionGroup>\r\n        </div>\r\n      </div>\r\n      {!isSkipped && (\r\n        <CSSTransition\r\n          classNames=\"bubble\"\r\n          timeout={500}\r\n          unmountOnExit\r\n          in={isDefined(input)}\r\n        >\r\n          {input ? (\r\n            <InputChatBlock\r\n              block={input}\r\n              onTransitionEnd={onDisplayNextBlock}\r\n              onSkip={skipInput}\r\n              hasAvatar={hostAvatar.isEnabled}\r\n              hasGuestAvatar={hasGuestAvatar}\r\n            />\r\n          ) : (\r\n            <div />\r\n          )}\r\n        </CSSTransition>\r\n      )}\r\n      {blockedPopupUrl ? (\r\n        <div className=\"flex justify-end\">\r\n          <PopupBlockedToast\r\n            url={blockedPopupUrl}\r\n            onLinkClick={onBlockedPopupLinkClick}\r\n          />\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  )\r\n}\r\n","import React, {\r\n  ForwardedRef,\r\n  forwardRef,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useRef,\r\n  useState,\r\n} from 'react'\r\nimport { Avatar } from '../avatars/Avatar'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { ResizeObserver } from 'resize-observer'\r\n\r\ntype Props = { hostAvatarSrc?: string; keepShowing: boolean }\r\n\r\nexport const AvatarSideContainer = forwardRef(function AvatarSideContainer(\r\n  { hostAvatarSrc, keepShowing }: Props,\r\n  ref: ForwardedRef<unknown>\r\n) {\r\n  const [show, setShow] = useState(false)\r\n  const [avatarTopOffset, setAvatarTopOffset] = useState(0)\r\n\r\n  const refreshTopOffset = () => {\r\n    if (!scrollingSideGroupRef.current || !avatarContainer.current) return\r\n    const { height } = scrollingSideGroupRef.current.getBoundingClientRect()\r\n    const { height: avatarHeight } =\r\n      avatarContainer.current.getBoundingClientRect()\r\n    setAvatarTopOffset(height - avatarHeight)\r\n  }\r\n  const scrollingSideGroupRef = useRef<HTMLDivElement>(null)\r\n  const avatarContainer = useRef<HTMLDivElement>(null)\r\n  useImperativeHandle(ref, () => ({\r\n    refreshTopOffset,\r\n  }))\r\n\r\n  useEffect(() => {\r\n    if (!document) return\r\n    setShow(true)\r\n    const resizeObserver = new ResizeObserver(refreshTopOffset)\r\n    resizeObserver.observe(document.body)\r\n    return () => {\r\n      resizeObserver.disconnect()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      className=\"flex w-6 xs:w-10 mr-2 mb-2 flex-shrink-0 items-center relative typebot-avatar-container \"\r\n      ref={scrollingSideGroupRef}\r\n    >\r\n      <CSSTransition\r\n        classNames=\"bubble\"\r\n        timeout={500}\r\n        in={show && keepShowing}\r\n        unmountOnExit\r\n      >\r\n        <div\r\n          className=\"absolute w-6 xs:w-10 h-6 xs:h-10 mb-4 xs:mb-2 flex items-center top-0\"\r\n          ref={avatarContainer}\r\n          style={{\r\n            top: `${avatarTopOffset}px`,\r\n            transition: 'top 350ms ease-out, opacity 500ms',\r\n          }}\r\n        >\r\n          <Avatar avatarSrc={hostAvatarSrc} />\r\n        </div>\r\n      </CSSTransition>\r\n    </div>\r\n  )\r\n})\r\n","import React, { useState } from 'react'\r\nimport { isDefined } from '@typebot.io/lib'\r\nimport { DefaultAvatar } from './DefaultAvatar'\r\n\r\nexport const Avatar = ({ avatarSrc }: { avatarSrc?: string }): JSX.Element => {\r\n  const [currentAvatarSrc] = useState(avatarSrc)\r\n\r\n  if (currentAvatarSrc === '') return <></>\r\n  if (isDefined(currentAvatarSrc))\r\n    return (\r\n      <figure\r\n        className={\r\n          'flex justify-center items-center rounded-full text-white w-6 h-6 text-sm relative xs:w-10 xs:h-10 xs:text-xl'\r\n        }\r\n      >\r\n        <img\r\n          src={currentAvatarSrc}\r\n          alt=\"Bot avatar\"\r\n          className=\"rounded-full object-cover w-full h-full\"\r\n        />\r\n      </figure>\r\n    )\r\n  return <DefaultAvatar />\r\n}\r\n","import React from 'react'\r\n\r\nexport const DefaultAvatar = (): JSX.Element => {\r\n  return (\r\n    <figure\r\n      className={\r\n        'flex justify-center items-center rounded-full text-white w-6 h-6 text-sm relative xs:w-10 xs:h-10 xs:text-xl'\r\n      }\r\n      data-testid=\"default-avatar\"\r\n    >\r\n      <svg\r\n        width=\"75\"\r\n        height=\"75\"\r\n        viewBox=\"0 0 75 75\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        className={\r\n          'absolute top-0 left-0 w-6 h-6 xs:w-full xs:h-full xs:text-xl'\r\n        }\r\n      >\r\n        <mask id=\"mask0\" x=\"0\" y=\"0\" mask-type=\"alpha\">\r\n          <circle cx=\"37.5\" cy=\"37.5\" r=\"37.5\" fill=\"#0042DA\" />\r\n        </mask>\r\n        <g mask=\"url(#mask0)\">\r\n          <rect x=\"-30\" y=\"-43\" width=\"131\" height=\"154\" fill=\"#0042DA\" />\r\n          <rect\r\n            x=\"2.50413\"\r\n            y=\"120.333\"\r\n            width=\"81.5597\"\r\n            height=\"86.4577\"\r\n            rx=\"2.5\"\r\n            transform=\"rotate(-52.6423 2.50413 120.333)\"\r\n            stroke=\"#FED23D\"\r\n            strokeWidth=\"5\"\r\n          />\r\n          <circle cx=\"76.5\" cy=\"-1.5\" r=\"29\" stroke=\"#FF8E20\" strokeWidth=\"5\" />\r\n          <path\r\n            d=\"M-49.8224 22L-15.5 -40.7879L18.8224 22H-49.8224Z\"\r\n            stroke=\"#F7F8FF\"\r\n            strokeWidth=\"5\"\r\n          />\r\n        </g>\r\n      </svg>\r\n    </figure>\r\n  )\r\n}\r\n","var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    get errors() {\n        return this.issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: issueData.message || errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap,\n            ctx.schemaErrorMap,\n            getErrorMap(),\n            errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            syncPairs.push({\n                key: await pair.key,\n                value: await pair.value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (typeof value.value !== \"undefined\" || pair.alwaysSet) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        if (typeof ctx.data === \"undefined\") {\n            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };\n        }\n        return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n    }\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this, this._def);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[a-z][a-z0-9]*$/;\nconst ulidRegex = /[0-9A-HJKMNP-TV-Z]{26}/;\nconst uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\nconst emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst emojiRegex = /^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$/u;\nconst ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;\nconst ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\n// Adapted from https://stackoverflow.com/a/3143231\nconst datetimeRegex = (args) => {\n    if (args.precision) {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}Z$`);\n        }\n    }\n    else if (args.precision === 0) {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z$`);\n        }\n    }\n    else {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?Z$`);\n        }\n    }\n};\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n        /**\n         * @deprecated Use z.string().min(1) instead.\n         * @see {@link ZodString.min}\n         */\n        this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));\n        this.trim = () => new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n        this.toLowerCase = () => new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n        this.toUpperCase = () => new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            }\n            //\n            );\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = BigInt(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.bigint,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    syncPairs.push({\n                        key,\n                        value: await pair.value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return Object.keys(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else {\n        return null;\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            return OK(async (...args) => {\n                const error = new ZodError([]);\n                const parsedArgs = await this._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await fn(...parsedArgs);\n                const parsedReturns = await this._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            return OK((...args) => {\n                const parsedArgs = this._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = fn(...parsedArgs.data);\n                const parsedReturns = this._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (this._def.values.indexOf(input.data) === -1) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values) {\n        return ZodEnum.create(values);\n    }\n    exclude(values) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));\n    }\n}\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (nativeEnumValues.indexOf(input.data) === -1) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then((processed) => {\n                    return this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                });\n            }\n            else {\n                return this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc\n            // effect: RefinementEffect<any>\n            ) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nconst custom = (check, params = {}, \n/*\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) => {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            if (!check(data)) {\n                const p = typeof params === \"function\"\n                    ? params(data)\n                    : typeof params === \"string\"\n                        ? { message: params }\n                        : params;\n                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                const p2 = typeof p === \"string\" ? { message: p } : p;\n                ctx.addIssue({ code: \"custom\", ...p2, fatal: _fatal });\n            }\n        });\n    return ZodAny.create();\n};\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodSymbol, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, coerce, custom, dateType as date, z as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, util, voidType as void, z };\n","import { z } from 'zod'\r\nimport { Credentials as CredentialsFromPrisma } from '@typebot.io/prisma'\r\n\r\nexport const blockBaseSchema = z.object({\r\n  id: z.string(),\r\n  groupId: z.string(),\r\n  outgoingEdgeId: z.string().optional(),\r\n})\r\n\r\nexport const optionBaseSchema = z.object({\r\n  variableId: z.string().optional(),\r\n})\r\n\r\nexport const credentialsBaseSchema = z.object({\r\n  id: z.string(),\r\n  createdAt: z.date(),\r\n  workspaceId: z.string(),\r\n  name: z.string(),\r\n  iv: z.string(),\r\n}) satisfies z.ZodType<Omit<CredentialsFromPrisma, 'data' | 'type'>>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { BubbleBlockType } from './enums'\r\n\r\nexport const audioBubbleContentSchema = z.object({\r\n  url: z.string().optional(),\r\n})\r\n\r\nexport const audioBubbleBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([BubbleBlockType.AUDIO]),\r\n    content: audioBubbleContentSchema,\r\n  })\r\n)\r\n\r\nexport const defaultAudioBubbleContent = {}\r\n\r\nexport type AudioBubbleBlock = z.infer<typeof audioBubbleBlockSchema>\r\nexport type AudioBubbleContent = z.infer<typeof audioBubbleContentSchema>\r\n","import { z } from 'zod'\r\n\r\nexport type IdMap<T> = { [id: string]: T }\r\n\r\nexport const variableStringSchema = z.custom<`{{${string}}}`>((val) =>\r\n  /^{{.+}}$/g.test(val as string)\r\n)\r\n\r\nexport type VariableString = z.infer<typeof variableStringSchema>\r\n","import { z } from 'zod'\r\nimport { variableStringSchema } from '../../utils'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { BubbleBlockType } from './enums'\r\n\r\nexport const embedBubbleContentSchema = z.object({\r\n  url: z.string().optional(),\r\n  height: z.number().or(variableStringSchema),\r\n})\r\n\r\nexport const embedBubbleBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([BubbleBlockType.EMBED]),\r\n    content: embedBubbleContentSchema,\r\n  })\r\n)\r\n\r\nexport const defaultEmbedBubbleContent: EmbedBubbleContent = { height: 400 }\r\n\r\nexport type EmbedBubbleBlock = z.infer<typeof embedBubbleBlockSchema>\r\nexport type EmbedBubbleContent = z.infer<typeof embedBubbleContentSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { BubbleBlockType } from './enums'\r\n\r\nexport const imageBubbleContentSchema = z.object({\r\n  url: z.string().optional(),\r\n  clickLink: z\r\n    .object({\r\n      url: z.string().optional(),\r\n      alt: z.string().optional(),\r\n    })\r\n    .optional(),\r\n})\r\n\r\nexport const imageBubbleBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([BubbleBlockType.IMAGE]),\r\n    content: imageBubbleContentSchema,\r\n  })\r\n)\r\n\r\nexport const defaultImageBubbleContent: ImageBubbleContent = {}\r\n\r\nexport type ImageBubbleBlock = z.infer<typeof imageBubbleBlockSchema>\r\nexport type ImageBubbleContent = z.infer<typeof imageBubbleContentSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { BubbleBlockType } from './enums'\r\nimport type { TElement } from '@udecode/plate-common'\r\n\r\nexport const defaultTextBubbleContent: TextBubbleContent = {\r\n  richText: [],\r\n}\r\n\r\nexport const textBubbleContentSchema = z.object({\r\n  html: z.string().optional(),\r\n  richText: z.array(z.any()),\r\n  plainText: z.string().optional(),\r\n})\r\n\r\nexport const textBubbleBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([BubbleBlockType.TEXT]),\r\n    content: textBubbleContentSchema,\r\n  })\r\n)\r\n\r\nexport type TextBubbleBlock = Omit<\r\n  z.infer<typeof textBubbleBlockSchema>,\r\n  'content'\r\n> & {\r\n  content: { richText: TElement[]; html?: string; plainText?: string }\r\n}\r\nexport type TextBubbleContent = TextBubbleBlock['content']\r\n","export enum VideoBubbleContentType {\r\n  URL = 'url',\r\n  YOUTUBE = 'youtube',\r\n  VIMEO = 'vimeo',\r\n}\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../../baseSchemas'\r\nimport { BubbleBlockType } from '../enums'\r\nimport { VideoBubbleContentType } from './enums'\r\n\r\nexport const videoBubbleContentSchema = z.object({\r\n  url: z.string().optional(),\r\n  id: z.string().optional(),\r\n  type: z.nativeEnum(VideoBubbleContentType).optional(),\r\n})\r\n\r\nexport const videoBubbleBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([BubbleBlockType.VIDEO]),\r\n    content: videoBubbleContentSchema,\r\n  })\r\n)\r\n\r\nexport const defaultVideoBubbleContent: VideoBubbleContent = {}\r\n\r\nexport type VideoBubbleBlock = z.infer<typeof videoBubbleBlockSchema>\r\nexport type VideoBubbleContent = z.infer<typeof videoBubbleContentSchema>\r\n","import { z } from 'zod'\r\n\r\nexport const itemBaseSchema = z.object({\r\n  id: z.string(),\r\n  blockId: z.string(),\r\n  outgoingEdgeId: z.string().optional(),\r\n})\r\n\r\nexport type ItemBase = z.infer<typeof itemBaseSchema>\r\n","import { z } from 'zod'\r\nimport { ItemType } from '../../items/enums'\r\nimport { itemBaseSchema } from '../../items/baseSchemas'\r\nimport { optionBaseSchema, blockBaseSchema } from '../baseSchemas'\r\nimport { defaultButtonLabel } from './constants'\r\nimport { InputBlockType } from './enums'\r\n\r\nexport const choiceInputOptionsSchema = optionBaseSchema.merge(\r\n  z.object({\r\n    isMultipleChoice: z.boolean(),\r\n    buttonLabel: z.string(),\r\n    dynamicVariableId: z.string().optional(),\r\n    isSearchable: z.boolean().optional(),\r\n  })\r\n)\r\n\r\nexport const defaultChoiceInputOptions: ChoiceInputOptions = {\r\n  buttonLabel: defaultButtonLabel,\r\n  isMultipleChoice: false,\r\n  isSearchable: false,\r\n}\r\n\r\nexport const buttonItemSchema = itemBaseSchema.merge(\r\n  z.object({\r\n    type: z.literal(ItemType.BUTTON),\r\n    content: z.string().optional(),\r\n  })\r\n)\r\n\r\nexport const choiceInputSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([InputBlockType.CHOICE]),\r\n    items: z.array(buttonItemSchema),\r\n    options: choiceInputOptionsSchema,\r\n  })\r\n)\r\n\r\nexport type ButtonItem = z.infer<typeof buttonItemSchema>\r\nexport type ChoiceInputBlock = z.infer<typeof choiceInputSchema>\r\nexport type ChoiceInputOptions = z.infer<typeof choiceInputOptionsSchema>\r\n","import { z } from 'zod'\r\nimport { optionBaseSchema, blockBaseSchema } from '../baseSchemas'\r\nimport { defaultButtonLabel } from './constants'\r\nimport { InputBlockType } from './enums'\r\n\r\nexport const dateInputOptionsSchema = optionBaseSchema.merge(\r\n  z.object({\r\n    labels: z.object({\r\n      button: z.string(),\r\n      from: z.string(),\r\n      to: z.string(),\r\n    }),\r\n    hasTime: z.boolean(),\r\n    isRange: z.boolean(),\r\n  })\r\n)\r\n\r\nexport const dateInputSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([InputBlockType.DATE]),\r\n    options: dateInputOptionsSchema,\r\n  })\r\n)\r\n\r\nexport const defaultDateInputOptions: DateInputOptions = {\r\n  hasTime: false,\r\n  isRange: false,\r\n  labels: { button: defaultButtonLabel, from: 'From:', to: 'To:' },\r\n}\r\n\r\nexport type DateInputBlock = z.infer<typeof dateInputSchema>\r\nexport type DateInputOptions = z.infer<typeof dateInputOptionsSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema, optionBaseSchema } from '../baseSchemas'\r\nimport { defaultButtonLabel } from './constants'\r\nimport { InputBlockType } from './enums'\r\n\r\nexport const textInputOptionsBaseSchema = z.object({\r\n  labels: z.object({\r\n    placeholder: z.string(),\r\n    button: z.string(),\r\n  }),\r\n})\r\n\r\nexport const textInputOptionsSchema = textInputOptionsBaseSchema\r\n  .merge(optionBaseSchema)\r\n  .merge(\r\n    z.object({\r\n      isLong: z.boolean(),\r\n    })\r\n  )\r\n\r\nexport const defaultTextInputOptions: TextInputOptions = {\r\n  isLong: false,\r\n  labels: { button: defaultButtonLabel, placeholder: 'Type your answer...' },\r\n}\r\n\r\nexport const textInputSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([InputBlockType.TEXT]),\r\n    options: textInputOptionsSchema,\r\n  })\r\n)\r\n\r\nexport type TextInputBlock = z.infer<typeof textInputSchema>\r\nexport type TextInputOptions = z.infer<typeof textInputOptionsSchema>\r\n","import { z } from 'zod'\r\nimport { optionBaseSchema, blockBaseSchema } from '../baseSchemas'\r\nimport { defaultButtonLabel } from './constants'\r\nimport { InputBlockType } from './enums'\r\nimport { textInputOptionsBaseSchema } from './text'\r\n\r\nexport const emailInputOptionsSchema = optionBaseSchema\r\n  .merge(textInputOptionsBaseSchema)\r\n  .merge(\r\n    z.object({\r\n      retryMessageContent: z.string(),\r\n    })\r\n  )\r\n\r\nexport const emailInputSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([InputBlockType.EMAIL]),\r\n    options: emailInputOptionsSchema,\r\n  })\r\n)\r\n\r\nexport const defaultEmailInputOptions: EmailInputOptions = {\r\n  labels: {\r\n    button: defaultButtonLabel,\r\n    placeholder: 'Type your email...',\r\n  },\r\n  retryMessageContent:\r\n    \"This email doesn't seem to be valid. Can you type it again?\",\r\n}\r\n\r\nexport type EmailInputBlock = z.infer<typeof emailInputSchema>\r\nexport type EmailInputOptions = z.infer<typeof emailInputOptionsSchema>\r\n","import { z } from 'zod'\r\nimport { optionBaseSchema, blockBaseSchema } from '../baseSchemas'\r\nimport { InputBlockType } from './enums'\r\n\r\nexport const fileInputOptionsSchema = optionBaseSchema.merge(\r\n  z.object({\r\n    isRequired: z.boolean().optional(),\r\n    isMultipleAllowed: z.boolean(),\r\n    labels: z.object({\r\n      placeholder: z.string(),\r\n      button: z.string(),\r\n      clear: z.string().optional(),\r\n      skip: z.string().optional(),\r\n    }),\r\n    sizeLimit: z.number().optional(),\r\n  })\r\n)\r\n\r\nexport const fileInputStepSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.literal(InputBlockType.FILE),\r\n    options: fileInputOptionsSchema,\r\n  })\r\n)\r\n\r\nexport const defaultFileInputOptions = {\r\n  isRequired: true,\r\n  isMultipleAllowed: false,\r\n  labels: {\r\n    placeholder: `<strong>\r\n      Click to upload\r\n    </strong> or drag and drop<br>\r\n    (size limit: 10MB)`,\r\n    button: 'Upload',\r\n    clear: 'Clear',\r\n    skip: 'Skip',\r\n  },\r\n} satisfies FileInputOptions\r\n\r\nexport type FileInputBlock = z.infer<typeof fileInputStepSchema>\r\nexport type FileInputOptions = z.infer<typeof fileInputOptionsSchema>\r\n","import { z } from 'zod'\r\nimport { optionBaseSchema, blockBaseSchema } from '../baseSchemas'\r\nimport { defaultButtonLabel } from './constants'\r\nimport { InputBlockType } from './enums'\r\nimport { textInputOptionsBaseSchema } from './text'\r\n\r\nexport const numberInputOptionsSchema = optionBaseSchema\r\n  .merge(textInputOptionsBaseSchema)\r\n  .merge(\r\n    z.object({\r\n      min: z.number().optional(),\r\n      max: z.number().optional(),\r\n      step: z.number().optional(),\r\n    })\r\n  )\r\n\r\nexport const numberInputSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([InputBlockType.NUMBER]),\r\n    options: numberInputOptionsSchema,\r\n  })\r\n)\r\n\r\nexport const defaultNumberInputOptions: NumberInputOptions = {\r\n  labels: { button: defaultButtonLabel, placeholder: 'Type a number...' },\r\n}\r\n\r\nexport type NumberInputBlock = z.infer<typeof numberInputSchema>\r\nexport type NumberInputOptions = z.infer<typeof numberInputOptionsSchema>\r\n","export enum PaymentProvider {\r\n  STRIPE = 'Stripe',\r\n}\r\n","import { z } from 'zod'\r\nimport {\r\n  optionBaseSchema,\r\n  blockBaseSchema,\r\n  credentialsBaseSchema,\r\n} from '../../baseSchemas'\r\nimport { InputBlockType } from '../enums'\r\nimport { PaymentProvider } from './enums'\r\n\r\nexport type CreditCardDetails = {\r\n  number: string\r\n  exp_month: string\r\n  exp_year: string\r\n  cvc: string\r\n}\r\n\r\nexport const paymentInputOptionsSchema = optionBaseSchema.merge(\r\n  z.object({\r\n    provider: z.nativeEnum(PaymentProvider),\r\n    labels: z.object({\r\n      button: z.string(),\r\n      success: z.string().optional(),\r\n    }),\r\n    additionalInformation: z\r\n      .object({\r\n        description: z.string().optional(),\r\n        name: z.string().optional(),\r\n        email: z.string().optional(),\r\n        phoneNumber: z.string().optional(),\r\n      })\r\n      .optional(),\r\n    credentialsId: z.string().optional(),\r\n    currency: z.string(),\r\n    amount: z.string().optional(),\r\n  })\r\n)\r\n\r\nexport const paymentInputRuntimeOptionsSchema = z.object({\r\n  paymentIntentSecret: z.string(),\r\n  amountLabel: z.string(),\r\n  publicKey: z.string(),\r\n})\r\n\r\nexport const paymentInputSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([InputBlockType.PAYMENT]),\r\n    options: paymentInputOptionsSchema,\r\n  })\r\n)\r\n\r\nexport const stripeCredentialsSchema = z\r\n  .object({\r\n    type: z.literal('stripe'),\r\n    data: z.object({\r\n      live: z.object({\r\n        secretKey: z.string(),\r\n        publicKey: z.string(),\r\n      }),\r\n      test: z.object({\r\n        secretKey: z.string().optional(),\r\n        publicKey: z.string().optional(),\r\n      }),\r\n    }),\r\n  })\r\n  .merge(credentialsBaseSchema)\r\n\r\nexport const defaultPaymentInputOptions: PaymentInputOptions = {\r\n  provider: PaymentProvider.STRIPE,\r\n  labels: { button: 'Pay', success: 'Success' },\r\n  currency: 'USD',\r\n}\r\n\r\nexport type PaymentInputBlock = z.infer<typeof paymentInputSchema>\r\nexport type PaymentInputOptions = z.infer<typeof paymentInputOptionsSchema>\r\nexport type PaymentInputRuntimeOptions = z.infer<\r\n  typeof paymentInputRuntimeOptionsSchema\r\n>\r\nexport type StripeCredentials = z.infer<typeof stripeCredentialsSchema>\r\n","import { z } from 'zod'\r\nimport { optionBaseSchema, blockBaseSchema } from '../baseSchemas'\r\nimport { defaultButtonLabel } from './constants'\r\nimport { InputBlockType } from './enums'\r\nimport { textInputOptionsBaseSchema } from './text'\r\n\r\nexport const phoneNumberInputOptionsSchema = optionBaseSchema\r\n  .merge(textInputOptionsBaseSchema)\r\n  .merge(\r\n    z.object({\r\n      retryMessageContent: z.string(),\r\n      defaultCountryCode: z.string().optional(),\r\n    })\r\n  )\r\n\r\nexport const phoneNumberInputBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([InputBlockType.PHONE]),\r\n    options: phoneNumberInputOptionsSchema,\r\n  })\r\n)\r\n\r\nexport const defaultPhoneInputOptions: PhoneNumberInputOptions = {\r\n  labels: {\r\n    button: defaultButtonLabel,\r\n    placeholder: 'Type your phone number...',\r\n  },\r\n  retryMessageContent:\r\n    \"This phone number doesn't seem to be valid. Can you type it again?\",\r\n}\r\n\r\nexport type PhoneNumberInputBlock = z.infer<typeof phoneNumberInputBlockSchema>\r\nexport type PhoneNumberInputOptions = z.infer<\r\n  typeof phoneNumberInputOptionsSchema\r\n>\r\n","import { z } from 'zod'\r\nimport { optionBaseSchema, blockBaseSchema } from '../baseSchemas'\r\nimport { defaultButtonLabel } from './constants'\r\nimport { InputBlockType } from './enums'\r\n\r\nexport const defaultRatingInputOptions: RatingInputOptions = {\r\n  buttonType: 'Numbers',\r\n  length: 10,\r\n  labels: { button: defaultButtonLabel },\r\n  customIcon: { isEnabled: false },\r\n}\r\n\r\nexport const ratingInputOptionsSchema = optionBaseSchema.merge(\r\n  z.object({\r\n    buttonType: z.literal('Icons').or(z.literal('Numbers')),\r\n    length: z.number(),\r\n    labels: z.object({\r\n      left: z.string().optional(),\r\n      right: z.string().optional(),\r\n      button: z.string(),\r\n    }),\r\n    customIcon: z.object({\r\n      isEnabled: z.boolean(),\r\n      svg: z.string().optional(),\r\n    }),\r\n    isOneClickSubmitEnabled: z.boolean().optional(),\r\n  })\r\n)\r\n\r\nexport const ratingInputBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.literal(InputBlockType.RATING),\r\n    options: ratingInputOptionsSchema,\r\n  })\r\n)\r\n\r\nexport type RatingInputBlock = z.infer<typeof ratingInputBlockSchema>\r\nexport type RatingInputOptions = z.infer<typeof ratingInputOptionsSchema>\r\n","import { z } from 'zod'\r\nimport { optionBaseSchema, blockBaseSchema } from '../baseSchemas'\r\nimport { defaultButtonLabel } from './constants'\r\nimport { InputBlockType } from './enums'\r\nimport { textInputOptionsBaseSchema } from './text'\r\n\r\nexport const urlInputOptionsSchema = optionBaseSchema\r\n  .merge(textInputOptionsBaseSchema)\r\n  .merge(\r\n    z.object({\r\n      retryMessageContent: z.string(),\r\n    })\r\n  )\r\n\r\nexport const urlInputSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([InputBlockType.URL]),\r\n    options: urlInputOptionsSchema,\r\n  })\r\n)\r\n\r\nexport const defaultUrlInputOptions: UrlInputOptions = {\r\n  labels: {\r\n    button: defaultButtonLabel,\r\n    placeholder: 'Type a URL...',\r\n  },\r\n  retryMessageContent:\r\n    \"This URL doesn't seem to be valid. Can you type it again?\",\r\n}\r\n\r\nexport type UrlInputBlock = z.infer<typeof urlInputSchema>\r\nexport type UrlInputOptions = z.infer<typeof urlInputOptionsSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { IntegrationBlockType } from './enums'\r\n\r\nexport const chatwootTasks = ['Show widget', 'Close widget'] as const\r\n\r\nexport const chatwootOptionsSchema = z.object({\r\n  task: z.enum(chatwootTasks).optional(),\r\n  baseUrl: z.string(),\r\n  websiteToken: z.string(),\r\n  user: z\r\n    .object({\r\n      id: z.string().optional(),\r\n      email: z.string().optional(),\r\n      name: z.string().optional(),\r\n      avatarUrl: z.string().optional(),\r\n      phoneNumber: z.string().optional(),\r\n    })\r\n    .optional(),\r\n})\r\n\r\nexport const chatwootBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    // type: z.enum([IntegrationBlockType.CHATWOOT]),\r\n    options: chatwootOptionsSchema,\r\n  })\r\n)\r\n\r\nexport const defaultChatwootOptions: ChatwootOptions = {\r\n  task: 'Show widget',\r\n  baseUrl: 'https://app.chatwoot.com',\r\n  websiteToken: '',\r\n}\r\n\r\nexport type ChatwootBlock = z.infer<typeof chatwootBlockSchema>\r\nexport type ChatwootOptions = z.infer<typeof chatwootOptionsSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { IntegrationBlockType } from './enums'\r\nimport { variableStringSchema } from '../../utils'\r\n\r\nexport const googleAnalyticsOptionsSchema = z.object({\r\n  trackingId: z.string().optional(),\r\n  category: z.string().optional(),\r\n  action: z.string().optional(),\r\n  label: z.string().optional(),\r\n  value: z.number().or(variableStringSchema).optional(),\r\n  sendTo: z.string().optional(),\r\n})\r\n\r\nexport const googleAnalyticsBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    // type: z.enum([IntegrationBlockType.GOOGLE_ANALYTICS]),\r\n    options: googleAnalyticsOptionsSchema,\r\n  })\r\n)\r\n\r\nexport const defaultGoogleAnalyticsOptions: GoogleAnalyticsOptions = {}\r\n\r\nexport type GoogleAnalyticsBlock = z.infer<typeof googleAnalyticsBlockSchema>\r\nexport type GoogleAnalyticsOptions = z.infer<\r\n  typeof googleAnalyticsOptionsSchema\r\n>\r\n","import { z } from 'zod'\r\nimport { ItemType } from '../../items/enums'\r\nimport { itemBaseSchema } from '../../items/baseSchemas'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { LogicBlockType } from './enums'\r\n\r\nexport enum LogicalOperator {\r\n  OR = 'OR',\r\n  AND = 'AND',\r\n}\r\n\r\nexport enum ComparisonOperators {\r\n  EQUAL = 'Equal to',\r\n  NOT_EQUAL = 'Not equal',\r\n  CONTAINS = 'Contains',\r\n  NOT_CONTAINS = 'Does not contain',\r\n  GREATER = 'Greater than',\r\n  LESS = 'Less than',\r\n  IS_SET = 'Is set',\r\n  IS_EMPTY = 'Is empty',\r\n  STARTS_WITH = 'Starts with',\r\n  ENDS_WITH = 'Ends with',\r\n}\r\n\r\nconst comparisonSchema = z.object({\r\n  id: z.string(),\r\n  variableId: z.string().optional(),\r\n  comparisonOperator: z.nativeEnum(ComparisonOperators).optional(),\r\n  value: z.string().optional(),\r\n})\r\n\r\nconst conditionContentSchema = z.object({\r\n  logicalOperator: z.nativeEnum(LogicalOperator),\r\n  comparisons: z.array(comparisonSchema),\r\n})\r\n\r\nexport const conditionItemSchema = itemBaseSchema.merge(\r\n  z.object({\r\n    type: z.literal(ItemType.CONDITION),\r\n    content: conditionContentSchema,\r\n  })\r\n)\r\n\r\nexport const conditionBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([LogicBlockType.CONDITION]),\r\n    items: z.array(conditionItemSchema),\r\n  })\r\n)\r\n\r\nexport const defaultConditionContent: ConditionContent = {\r\n  comparisons: [],\r\n  logicalOperator: LogicalOperator.AND,\r\n}\r\n\r\nexport type ConditionItem = z.infer<typeof conditionItemSchema>\r\nexport type Comparison = z.infer<typeof comparisonSchema>\r\nexport type ConditionBlock = z.infer<typeof conditionBlockSchema>\r\nexport type ConditionContent = z.infer<typeof conditionContentSchema>\r\n","import { z } from 'zod'\r\nimport { ComparisonOperators, LogicalOperator } from '../../logic/condition'\r\nimport { IntegrationBlockType } from '../enums'\r\nimport { GoogleSheetsAction } from './enums'\r\nimport { blockBaseSchema, credentialsBaseSchema } from '../../baseSchemas'\r\n\r\nconst cellSchema = z.object({\r\n  column: z.string().optional(),\r\n  value: z.string().optional(),\r\n  id: z.string(),\r\n})\r\n\r\nconst extractingCellSchema = z.object({\r\n  column: z.string().optional(),\r\n  id: z.string(),\r\n  variableId: z.string().optional(),\r\n})\r\n\r\nconst googleSheetsOptionsBaseSchema = z.object({\r\n  credentialsId: z.string().optional(),\r\n  sheetId: z.string().optional(),\r\n  spreadsheetId: z.string().optional(),\r\n})\r\n\r\nconst rowsFilterComparisonSchema = z.object({\r\n  id: z.string(),\r\n  column: z.string().optional(),\r\n  comparisonOperator: z.nativeEnum(ComparisonOperators).optional(),\r\n  value: z.string().optional(),\r\n})\r\n\r\nconst initialGoogleSheetsOptionsSchema = googleSheetsOptionsBaseSchema.merge(\r\n  z.object({\r\n    action: z.undefined(),\r\n  })\r\n)\r\n\r\nconst googleSheetsGetOptionsSchema = googleSheetsOptionsBaseSchema.merge(\r\n  z.object({\r\n    action: z.enum([GoogleSheetsAction.GET]),\r\n    // TODO: remove referenceCell once migrated to filtering\r\n    referenceCell: cellSchema.optional(),\r\n    filter: z\r\n      .object({\r\n        comparisons: z.array(rowsFilterComparisonSchema),\r\n        logicalOperator: z.nativeEnum(LogicalOperator),\r\n      })\r\n      .optional(),\r\n    cellsToExtract: z.array(extractingCellSchema),\r\n  })\r\n)\r\n\r\nconst googleSheetsInsertRowOptionsSchema = googleSheetsOptionsBaseSchema.merge(\r\n  z.object({\r\n    action: z.enum([GoogleSheetsAction.INSERT_ROW]),\r\n    cellsToInsert: z.array(cellSchema),\r\n  })\r\n)\r\n\r\nconst googleSheetsUpdateRowOptionsSchema = googleSheetsOptionsBaseSchema.merge(\r\n  z.object({\r\n    action: z.enum([GoogleSheetsAction.UPDATE_ROW]),\r\n    cellsToUpsert: z.array(cellSchema),\r\n    referenceCell: cellSchema.optional(),\r\n  })\r\n)\r\n\r\nexport const googleSheetsOptionsSchema = z.discriminatedUnion('action', [\r\n  googleSheetsGetOptionsSchema,\r\n  googleSheetsInsertRowOptionsSchema,\r\n  googleSheetsUpdateRowOptionsSchema,\r\n  initialGoogleSheetsOptionsSchema,\r\n])\r\n\r\nexport const googleSheetsBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    // type: z.enum([IntegrationBlockType.GOOGLE_SHEETS]),\r\n    options: googleSheetsOptionsSchema,\r\n  })\r\n)\r\n\r\nexport const googleSheetsCredentialsSchema = z\r\n  .object({\r\n    type: z.literal('google sheets'),\r\n    data: z.object({\r\n      refresh_token: z.string().nullish(),\r\n      expiry_date: z.number().nullish(),\r\n      access_token: z.string().nullish(),\r\n      token_type: z.string().nullish(),\r\n      id_token: z.string().nullish(),\r\n      scope: z.string().optional(),\r\n    }),\r\n  })\r\n  .merge(credentialsBaseSchema)\r\n\r\nexport const defaultGoogleSheetsOptions: GoogleSheetsOptions = {}\r\n\r\nexport const defaultGoogleSheetsGetOptions = (\r\n  createId: () => string\r\n): GoogleSheetsGetOptions => ({\r\n  action: GoogleSheetsAction.GET,\r\n  cellsToExtract: [\r\n    {\r\n      id: createId(),\r\n    },\r\n  ],\r\n})\r\n\r\nexport const defaultGoogleSheetsInsertOptions = (\r\n  createId: () => string\r\n): GoogleSheetsInsertRowOptions => ({\r\n  action: GoogleSheetsAction.INSERT_ROW,\r\n  cellsToInsert: [\r\n    {\r\n      id: createId(),\r\n    },\r\n  ],\r\n})\r\n\r\nexport const defaultGoogleSheetsUpdateOptions = (\r\n  createId: () => string\r\n): GoogleSheetsUpdateRowOptions => ({\r\n  action: GoogleSheetsAction.UPDATE_ROW,\r\n  cellsToUpsert: [\r\n    {\r\n      id: createId(),\r\n    },\r\n  ],\r\n})\r\n\r\nexport type GoogleSheetsBlock = z.infer<typeof googleSheetsBlockSchema>\r\nexport type GoogleSheetsOptions = z.infer<typeof googleSheetsOptionsSchema>\r\nexport type GoogleSheetsOptionsBase = z.infer<\r\n  typeof googleSheetsOptionsBaseSchema\r\n>\r\nexport type GoogleSheetsGetOptions = z.infer<\r\n  typeof googleSheetsGetOptionsSchema\r\n>\r\nexport type GoogleSheetsInsertRowOptions = z.infer<\r\n  typeof googleSheetsInsertRowOptionsSchema\r\n>\r\nexport type GoogleSheetsUpdateRowOptions = z.infer<\r\n  typeof googleSheetsUpdateRowOptionsSchema\r\n>\r\nexport type Cell = z.infer<typeof cellSchema>\r\nexport type ExtractingCell = z.infer<typeof extractingCellSchema>\r\nexport type RowsFilterComparison = z.infer<typeof rowsFilterComparisonSchema>\r\nexport type GoogleSheetsCredentials = z.infer<\r\n  typeof googleSheetsCredentialsSchema\r\n>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { IntegrationBlockType } from './enums'\r\n\r\nconst variableForTestSchema = z.object({\r\n  id: z.string(),\r\n  variableId: z.string().optional(),\r\n  value: z.string().optional(),\r\n})\r\n\r\nconst responseVariableMappingSchema = z.object({\r\n  id: z.string(),\r\n  variableId: z.string().optional(),\r\n  bodyPath: z.string().optional(),\r\n})\r\n\r\nexport const webhookOptionsSchema = z.object({\r\n  variablesForTest: z.array(variableForTestSchema),\r\n  responseVariableMapping: z.array(responseVariableMappingSchema),\r\n  isAdvancedConfig: z.boolean().optional(),\r\n  isCustomBody: z.boolean().optional(),\r\n})\r\n\r\nexport const webhookBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([IntegrationBlockType.WEBHOOK]),\r\n    options: webhookOptionsSchema,\r\n    webhookId: z.string(),\r\n  })\r\n)\r\n\r\nexport const defaultWebhookOptions: Omit<WebhookOptions, 'webhookId'> = {\r\n  responseVariableMapping: [],\r\n  variablesForTest: [],\r\n  isAdvancedConfig: false,\r\n  isCustomBody: false,\r\n}\r\n\r\nexport type WebhookBlock = z.infer<typeof webhookBlockSchema>\r\nexport type WebhookOptions = z.infer<typeof webhookOptionsSchema>\r\nexport type ResponseVariableMapping = z.infer<\r\n  typeof responseVariableMappingSchema\r\n>\r\nexport type VariableForTest = z.infer<typeof variableForTestSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { IntegrationBlockType } from './enums'\r\nimport { webhookOptionsSchema } from './webhook'\r\n\r\nexport const makeComBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    // type: z.enum([IntegrationBlockType.MAKE_COM]),\r\n    options: webhookOptionsSchema,\r\n    webhookId: z.string(),\r\n  })\r\n)\r\n\r\nexport type MakeComBlock = z.infer<typeof makeComBlockSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { IntegrationBlockType } from './enums'\r\nimport { webhookOptionsSchema } from './webhook'\r\n\r\nexport const pabblyConnectBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    // type: z.enum([IntegrationBlockType.PABBLY_CONNECT]),\r\n    options: webhookOptionsSchema,\r\n    webhookId: z.string(),\r\n  })\r\n)\r\n\r\nexport type PabblyConnectBlock = z.infer<typeof pabblyConnectBlockSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema, credentialsBaseSchema } from '../baseSchemas'\r\nimport { IntegrationBlockType } from './enums'\r\n\r\nexport const sendEmailOptionsSchema = z.object({\r\n  credentialsId: z.string(),\r\n  isCustomBody: z.boolean().optional(),\r\n  isBodyCode: z.boolean().optional(),\r\n  recipients: z.array(z.string()),\r\n  subject: z.string().optional(),\r\n  body: z.string().optional(),\r\n  replyTo: z.string().optional(),\r\n  cc: z.array(z.string()).optional(),\r\n  bcc: z.array(z.string()).optional(),\r\n  attachmentsVariableId: z.string().optional(),\r\n})\r\n\r\nexport const sendEmailBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    // type: z.enum([IntegrationBlockType.EMAIL]),\r\n    options: sendEmailOptionsSchema,\r\n  })\r\n)\r\n\r\nexport const smtpCredentialsSchema = z\r\n  .object({\r\n    type: z.literal('smtp'),\r\n    data: z.object({\r\n      host: z.string().optional(),\r\n      username: z.string().optional(),\r\n      password: z.string().optional(),\r\n      isTlsEnabled: z.boolean().optional(),\r\n      port: z.number(),\r\n      from: z.object({\r\n        email: z.string().optional(),\r\n        name: z.string().optional(),\r\n      }),\r\n    }),\r\n  })\r\n  .merge(credentialsBaseSchema)\r\n\r\nexport const defaultSendEmailOptions: SendEmailOptions = {\r\n  credentialsId: 'default',\r\n  isCustomBody: false,\r\n  recipients: [],\r\n}\r\n\r\nexport type SendEmailBlock = z.infer<typeof sendEmailBlockSchema>\r\nexport type SendEmailOptions = z.infer<typeof sendEmailOptionsSchema>\r\nexport type SmtpCredentials = z.infer<typeof smtpCredentialsSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { IntegrationBlockType } from './enums'\r\nimport { webhookOptionsSchema } from './webhook'\r\n\r\nexport const zapierBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    // type: z.enum([IntegrationBlockType.ZAPIER]),\r\n    options: webhookOptionsSchema,\r\n    webhookId: z.string(),\r\n  })\r\n)\r\n\r\nexport type ZapierBlock = z.infer<typeof zapierBlockSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { LogicBlockType } from './enums'\r\n\r\nexport const scriptOptionsSchema = z.object({\r\n  name: z.string(),\r\n  content: z.string().optional(),\r\n  shouldExecuteInParentContext: z.boolean().optional(),\r\n})\r\n\r\nexport const scriptBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([LogicBlockType.SCRIPT]),\r\n    options: scriptOptionsSchema,\r\n  })\r\n)\r\n\r\nexport const defaultScriptOptions: ScriptOptions = { name: 'Script' }\r\n\r\nexport type ScriptBlock = z.infer<typeof scriptBlockSchema>\r\nexport type ScriptOptions = z.infer<typeof scriptOptionsSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { LogicBlockType } from './enums'\r\n\r\nexport const redirectOptionsSchema = z.object({\r\n  url: z.string().optional(),\r\n  isNewTab: z.boolean(),\r\n})\r\n\r\nexport const redirectBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([LogicBlockType.REDIRECT]),\r\n    options: redirectOptionsSchema,\r\n  })\r\n)\r\n\r\nexport const defaultRedirectOptions: RedirectOptions = { isNewTab: false }\r\n\r\nexport type RedirectBlock = z.infer<typeof redirectBlockSchema>\r\nexport type RedirectOptions = z.infer<typeof redirectOptionsSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { LogicBlockType } from './enums'\r\n\r\nexport const setVariableOptionsSchema = z.object({\r\n  variableId: z.string().optional(),\r\n  expressionToEvaluate: z.string().optional(),\r\n  isCode: z.boolean().optional(),\r\n  isExecutedOnClient: z.boolean().optional(),\r\n})\r\n\r\nexport const setVariableBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([LogicBlockType.SET_VARIABLE]),\r\n    options: setVariableOptionsSchema,\r\n  })\r\n)\r\n\r\nexport const defaultSetVariablesOptions: SetVariableOptions = {}\r\n\r\nexport type SetVariableBlock = z.infer<typeof setVariableBlockSchema>\r\nexport type SetVariableOptions = z.infer<typeof setVariableOptionsSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { LogicBlockType } from './enums'\r\n\r\nexport const typebotLinkOptionsSchema = z.object({\r\n  typebotId: z.string().optional(),\r\n  groupId: z.string().optional(),\r\n})\r\n\r\nexport const typebotLinkBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([LogicBlockType.TYPEBOT_LINK]),\r\n    options: typebotLinkOptionsSchema,\r\n  })\r\n)\r\n\r\nexport const defaultTypebotLinkOptions: TypebotLinkOptions = {}\r\n\r\nexport type TypebotLinkBlock = z.infer<typeof typebotLinkBlockSchema>\r\nexport type TypebotLinkOptions = z.infer<typeof typebotLinkOptionsSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { LogicBlockType } from './enums'\r\n\r\nexport const waitOptionsSchema = z.object({\r\n  secondsToWaitFor: z.string().optional(),\r\n})\r\n\r\nexport const waitBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([LogicBlockType.WAIT]),\r\n    options: waitOptionsSchema,\r\n  })\r\n)\r\n\r\nexport const defaultWaitOptions: WaitOptions = {}\r\n\r\nexport type WaitBlock = z.infer<typeof waitBlockSchema>\r\nexport type WaitOptions = z.infer<typeof waitOptionsSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { LogicBlockType } from './enums'\r\nimport { itemBaseSchema } from '../../items/baseSchemas'\r\nimport { ItemType } from '../../items/enums'\r\n\r\nexport const aItemSchema = itemBaseSchema.extend({\r\n  type: z.literal(ItemType.AB_TEST),\r\n  path: z.literal('a'),\r\n})\r\n\r\nexport const bItemSchema = itemBaseSchema.extend({\r\n  type: z.literal(ItemType.AB_TEST),\r\n  path: z.literal('b'),\r\n})\r\n\r\nexport const abTestBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([LogicBlockType.AB_TEST]),\r\n    items: z.tuple([aItemSchema, bItemSchema]),\r\n    options: z.object({\r\n      aPercent: z.number().min(0).max(100),\r\n    }),\r\n  })\r\n)\r\n\r\nexport const defaultAbTestOptions = {\r\n  aPercent: 50,\r\n}\r\n\r\nexport type AbTestBlock = z.infer<typeof abTestBlockSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\n\r\nexport const startBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.literal('start'),\r\n    label: z.string(),\r\n  })\r\n)\r\n\r\nexport type StartBlock = z.infer<typeof startBlockSchema>\r\n","import { z } from 'zod'\r\nimport { variableStringSchema } from '../../utils'\r\nimport { blockBaseSchema, credentialsBaseSchema } from '../baseSchemas'\r\nimport { IntegrationBlockType } from './enums'\r\n\r\nexport const openAITasks = ['Create chat completion', 'Create image'] as const\r\n\r\nexport const chatCompletionModels = [\r\n  'gpt-4',\r\n  'gpt-4-0314',\r\n  'gpt-4-32k',\r\n  'gpt-4-32k-0314',\r\n  'gpt-3.5-turbo',\r\n  'gpt-3.5-turbo-0301',\r\n] as const\r\n\r\nexport const modelLimit = {\r\n  'gpt-3.5-turbo': 4096,\r\n  'gpt-3.5-turbo-0301': 4096,\r\n  'gpt-4': 8192,\r\n  'gpt-4-0314': 8192,\r\n  'gpt-4-32k': 32768,\r\n  'gpt-4-32k-0314': 32768,\r\n} as const\r\n\r\nexport const chatCompletionMessageRoles = [\r\n  'system',\r\n  'user',\r\n  'assistant',\r\n] as const\r\n\r\nexport const chatCompletionMessageCustomRoles = [\r\n  'Messages sequence ✨',\r\n] as const\r\n\r\nexport const chatCompletionResponseValues = [\r\n  'Message content',\r\n  'Total tokens',\r\n] as const\r\n\r\nconst openAIBaseOptionsSchema = z.object({\r\n  credentialsId: z.string().optional(),\r\n})\r\n\r\nconst initialOptionsSchema = z\r\n  .object({\r\n    task: z.undefined(),\r\n  })\r\n  .merge(openAIBaseOptionsSchema)\r\n\r\nconst chatCompletionMessageSchema = z.object({\r\n  id: z.string(),\r\n  role: z.enum(chatCompletionMessageRoles).optional(),\r\n  content: z.string().optional(),\r\n})\r\n\r\nconst chatCompletionCustomMessageSchema = z.object({\r\n  id: z.string(),\r\n  role: z.enum(chatCompletionMessageCustomRoles),\r\n  content: z\r\n    .object({\r\n      assistantMessagesVariableId: z.string().optional(),\r\n      userMessagesVariableId: z.string().optional(),\r\n    })\r\n    .optional(),\r\n})\r\n\r\nconst chatCompletionOptionsSchema = z\r\n  .object({\r\n    task: z.literal(openAITasks[0]),\r\n    model: z.enum(chatCompletionModels),\r\n    messages: z.array(\r\n      z.union([chatCompletionMessageSchema, chatCompletionCustomMessageSchema])\r\n    ),\r\n    advancedSettings: z\r\n      .object({\r\n        temperature: z.number().or(variableStringSchema).optional(),\r\n      })\r\n      .optional(),\r\n    responseMapping: z.array(\r\n      z.object({\r\n        id: z.string(),\r\n        valueToExtract: z.enum(chatCompletionResponseValues),\r\n        variableId: z.string().optional(),\r\n      })\r\n    ),\r\n  })\r\n  .merge(openAIBaseOptionsSchema)\r\n\r\nconst createImageOptionsSchema = z\r\n  .object({\r\n    task: z.literal(openAITasks[1]),\r\n    prompt: z.string().optional(),\r\n    advancedOptions: z.object({\r\n      size: z.enum(['256x256', '512x512', '1024x1024']).optional(),\r\n    }),\r\n    responseMapping: z.array(\r\n      z.object({\r\n        id: z.string(),\r\n        valueToExtract: z.enum(['Image URL']),\r\n        variableId: z.string().optional(),\r\n      })\r\n    ),\r\n  })\r\n  .merge(openAIBaseOptionsSchema)\r\n\r\nexport const openAIBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([IntegrationBlockType.OPEN_AI]),\r\n    options: z.discriminatedUnion('task', [\r\n      initialOptionsSchema,\r\n      chatCompletionOptionsSchema,\r\n      createImageOptionsSchema,\r\n    ]),\r\n  })\r\n)\r\n\r\nexport const openAICredentialsSchema = z\r\n  .object({\r\n    type: z.literal('openai'),\r\n    data: z.object({\r\n      apiKey: z.string(),\r\n    }),\r\n  })\r\n  .merge(credentialsBaseSchema)\r\n\r\nexport const defaultChatCompletionOptions = (\r\n  createId: () => string\r\n): ChatCompletionOpenAIOptions => ({\r\n  task: 'Create chat completion',\r\n  messages: [\r\n    {\r\n      id: createId(),\r\n    },\r\n  ],\r\n  responseMapping: [\r\n    {\r\n      id: createId(),\r\n      valueToExtract: 'Message content',\r\n    },\r\n  ],\r\n  model: 'gpt-3.5-turbo',\r\n})\r\n\r\nexport type OpenAICredentials = z.infer<typeof openAICredentialsSchema>\r\nexport type OpenAIBlock = z.infer<typeof openAIBlockSchema>\r\nexport type ChatCompletionOpenAIOptions = z.infer<\r\n  typeof chatCompletionOptionsSchema\r\n>\r\nexport type CreateImageOpenAIOptions = z.infer<typeof createImageOptionsSchema>\r\n","import { z } from 'zod'\r\nimport { blockBaseSchema } from '../baseSchemas'\r\nimport { LogicBlockType } from './enums'\r\n\r\nexport const jumpOptionsSchema = z.object({\r\n  groupId: z.string().optional(),\r\n  blockId: z.string().optional(),\r\n})\r\n\r\nexport const jumpBlockSchema = blockBaseSchema.merge(\r\n  z.object({\r\n    type: z.enum([LogicBlockType.JUMP]),\r\n    options: jumpOptionsSchema,\r\n  })\r\n)\r\n\r\nexport type JumpBlock = z.infer<typeof jumpBlockSchema>\r\n","import { z } from 'zod'\r\nimport { BubbleBlockType } from './bubbles/enums'\r\nimport { ChoiceInputBlock, choiceInputSchema } from './inputs/choice'\r\nimport { InputBlockType } from './inputs/enums'\r\nimport { IntegrationBlockType } from './integrations/enums'\r\nimport { ConditionBlock, conditionBlockSchema } from './logic/condition'\r\nimport { LogicBlockType } from './logic/enums'\r\nimport { blockBaseSchema } from './baseSchemas'\r\nimport { startBlockSchema } from './start/schemas'\r\nimport {\r\n  textBubbleBlockSchema,\r\n  imageBubbleBlockSchema,\r\n  videoBubbleBlockSchema,\r\n  embedBubbleBlockSchema,\r\n  audioBubbleBlockSchema,\r\n} from './bubbles'\r\nimport {\r\n  textInputSchema,\r\n  emailInputSchema,\r\n  numberInputSchema,\r\n  urlInputSchema,\r\n  phoneNumberInputBlockSchema,\r\n  dateInputSchema,\r\n  paymentInputSchema,\r\n  ratingInputBlockSchema,\r\n  fileInputStepSchema,\r\n} from './inputs'\r\nimport {\r\n  chatwootBlockSchema,\r\n  googleAnalyticsBlockSchema,\r\n  googleSheetsBlockSchema,\r\n  makeComBlockSchema,\r\n  pabblyConnectBlockSchema,\r\n  sendEmailBlockSchema,\r\n  webhookBlockSchema,\r\n  zapierBlockSchema,\r\n} from './integrations'\r\nimport { openAIBlockSchema } from './integrations/openai'\r\nimport {\r\n  scriptBlockSchema,\r\n  redirectBlockSchema,\r\n  setVariableBlockSchema,\r\n  typebotLinkBlockSchema,\r\n  waitBlockSchema,\r\n  abTestBlockSchema,\r\n  AbTestBlock,\r\n} from './logic'\r\nimport { jumpBlockSchema } from './logic/jump'\r\n\r\nexport type DraggableBlock =\r\n  | BubbleBlock\r\n  | InputBlock\r\n  | LogicBlock\r\n  | IntegrationBlock\r\n\r\nexport type BlockType =\r\n  | 'start'\r\n  | BubbleBlockType\r\n  | InputBlockType\r\n  | LogicBlockType\r\n  | IntegrationBlockType\r\n\r\nexport type DraggableBlockType =\r\n  | BubbleBlockType\r\n  | InputBlockType\r\n  | LogicBlockType\r\n  | IntegrationBlockType\r\n\r\nexport type BlockWithOptions =\r\n  | InputBlock\r\n  | Exclude<LogicBlock, ConditionBlock>\r\n  | IntegrationBlock\r\n\r\nexport type BlockWithOptionsType =\r\n  | InputBlockType\r\n  | Exclude<LogicBlockType, LogicBlockType.CONDITION>\r\n  | IntegrationBlockType\r\n\r\nexport type BlockOptions =\r\n  | InputBlockOptions\r\n  | LogicBlockOptions\r\n  | IntegrationBlockOptions\r\n\r\nexport type BlockWithItems = ConditionBlock | ChoiceInputBlock | AbTestBlock\r\n\r\nexport type BlockBase = z.infer<typeof blockBaseSchema>\r\n\r\nexport type BlockIndices = {\r\n  groupIndex: number\r\n  blockIndex: number\r\n}\r\n\r\nconst bubbleBlockSchema = z.discriminatedUnion('type', [\r\n  textBubbleBlockSchema,\r\n  imageBubbleBlockSchema,\r\n  videoBubbleBlockSchema,\r\n  embedBubbleBlockSchema,\r\n  audioBubbleBlockSchema,\r\n])\r\n\r\nexport type BubbleBlock = z.infer<typeof bubbleBlockSchema>\r\nexport type BubbleBlockContent = BubbleBlock['content']\r\n\r\nexport const inputBlockSchema = z.discriminatedUnion('type', [\r\n  textInputSchema,\r\n  choiceInputSchema,\r\n  emailInputSchema,\r\n  numberInputSchema,\r\n  urlInputSchema,\r\n  phoneNumberInputBlockSchema,\r\n  dateInputSchema,\r\n  paymentInputSchema,\r\n  ratingInputBlockSchema,\r\n  fileInputStepSchema,\r\n])\r\n\r\nexport type InputBlock = z.infer<typeof inputBlockSchema>\r\nexport type InputBlockOptions = InputBlock['options']\r\n\r\nexport const logicBlockSchema = z.discriminatedUnion('type', [\r\n  scriptBlockSchema,\r\n  conditionBlockSchema,\r\n  redirectBlockSchema,\r\n  setVariableBlockSchema,\r\n  typebotLinkBlockSchema,\r\n  waitBlockSchema,\r\n  jumpBlockSchema,\r\n  abTestBlockSchema,\r\n])\r\n\r\nexport type LogicBlock = z.infer<typeof logicBlockSchema>\r\n\r\nexport type LogicBlockOptions = LogicBlock extends\r\n  | {\r\n      options?: infer Options\r\n    }\r\n  | {}\r\n  ? Options\r\n  : never\r\n\r\nexport const integrationBlockSchema = z.discriminatedUnion('type', [\r\n  // chatwootBlockSchema,\r\n  // googleAnalyticsBlockSchema,\r\n  // googleSheetsBlockSchema,\r\n  // makeComBlockSchema,\r\n  openAIBlockSchema,\r\n  // pabblyConnectBlockSchema,\r\n  // sendEmailBlockSchema,\r\n  webhookBlockSchema,\r\n  // zapierBlockSchema,\r\n])\r\n\r\nexport type IntegrationBlock = z.infer<typeof integrationBlockSchema>\r\nexport type IntegrationBlockOptions = IntegrationBlock['options']\r\n\r\nexport const blockSchema = z.union([\r\n  startBlockSchema,\r\n  bubbleBlockSchema,\r\n  inputBlockSchema,\r\n  logicBlockSchema,\r\n  integrationBlockSchema,\r\n])\r\n\r\nexport type Block = z.infer<typeof blockSchema>\r\n","import { z } from 'zod'\r\n\r\nconst generalSettings = z.object({\r\n  isBrandingEnabled: z.boolean(),\r\n  isTypingEmulationEnabled: z.boolean().optional(),\r\n  isInputPrefillEnabled: z.boolean().optional(),\r\n  isHideQueryParamsEnabled: z.boolean().optional(),\r\n  isNewResultOnRefreshEnabled: z.boolean().optional(),\r\n})\r\n\r\nconst typingEmulation = z.object({\r\n  enabled: z.boolean(),\r\n  speed: z.number(),\r\n  maxDelay: z.number(),\r\n})\r\n\r\nconst metadataSchema = z.object({\r\n  title: z.string().optional(),\r\n  description: z.string().optional(),\r\n  imageUrl: z.string().optional(),\r\n  favIconUrl: z.string().optional(),\r\n  customHeadCode: z.string().optional(),\r\n  googleTagManagerId: z.string().optional(),\r\n})\r\n\r\nexport const settingsSchema = z.object({\r\n  general: generalSettings,\r\n  typingEmulation: typingEmulation,\r\n  metadata: metadataSchema,\r\n})\r\n\r\nexport const defaultSettings: Settings = {\r\n  general: {\r\n    isBrandingEnabled: true,\r\n    isNewResultOnRefreshEnabled: true,\r\n    isInputPrefillEnabled: true,\r\n    isHideQueryParamsEnabled: true,\r\n  },\r\n  typingEmulation: { enabled: true, speed: 300, maxDelay: 1.5 },\r\n  metadata: {\r\n    description:\r\n      'Build beautiful conversational forms and embed them directly in your applications without a line of code. Triple your response rate and collect answers that has more value compared to a traditional form.',\r\n  },\r\n}\r\n\r\nexport type Settings = z.infer<typeof settingsSchema>\r\nexport type GeneralSettings = z.infer<typeof generalSettings>\r\nexport type TypingEmulation = z.infer<typeof typingEmulation>\r\nexport type Metadata = z.infer<typeof metadataSchema>\r\n","export enum BackgroundType {\r\n  COLOR = 'Color',\r\n  IMAGE = 'Image',\r\n  NONE = 'None',\r\n}\r\n","import { ThemeTemplate as ThemeTemplatePrisma } from '@typebot.io/prisma'\r\nimport { z } from 'zod'\r\nimport { BackgroundType } from './enums'\r\n\r\nconst avatarPropsSchema = z.object({\r\n  isEnabled: z.boolean(),\r\n  url: z.string().optional(),\r\n})\r\n\r\nconst containerColorsSchema = z.object({\r\n  backgroundColor: z.string(),\r\n  color: z.string(),\r\n})\r\n\r\nconst inputColorsSchema = containerColorsSchema.merge(\r\n  z.object({\r\n    placeholderColor: z.string(),\r\n  })\r\n)\r\n\r\nexport const chatThemeSchema = z.object({\r\n  hostAvatar: avatarPropsSchema.optional(),\r\n  guestAvatar: avatarPropsSchema.optional(),\r\n  hostBubbles: containerColorsSchema,\r\n  guestBubbles: containerColorsSchema,\r\n  buttons: containerColorsSchema,\r\n  inputs: inputColorsSchema,\r\n  roundness: z.enum(['none', 'medium', 'large']).optional(),\r\n})\r\n\r\nconst backgroundSchema = z.object({\r\n  type: z.nativeEnum(BackgroundType),\r\n  content: z.string().optional(),\r\n})\r\n\r\nconst generalThemeSchema = z.object({\r\n  font: z.string(),\r\n  background: backgroundSchema,\r\n})\r\n\r\nexport const themeSchema = z.object({\r\n  general: generalThemeSchema,\r\n  chat: chatThemeSchema,\r\n  customCss: z.string().optional(),\r\n})\r\n\r\nexport const themeTemplateSchema = z.object({\r\n  id: z.string(),\r\n  name: z.string(),\r\n  theme: themeSchema,\r\n  workspaceId: z.string(),\r\n  createdAt: z.date(),\r\n  updatedAt: z.date(),\r\n}) satisfies z.ZodType<ThemeTemplatePrisma>\r\n\r\nexport const defaultTheme: Theme = {\r\n  chat: {\r\n    hostBubbles: { backgroundColor: '#F7F8FF', color: '#303235' },\r\n    guestBubbles: { backgroundColor: '#FF8E21', color: '#FFFFFF' },\r\n    buttons: { backgroundColor: '#0042DA', color: '#FFFFFF' },\r\n    inputs: {\r\n      backgroundColor: '#FFFFFF',\r\n      color: '#303235',\r\n      placeholderColor: '#9095A0',\r\n    },\r\n  },\r\n  general: {\r\n    font: 'Open Sans',\r\n    background: { type: BackgroundType.COLOR, content: '#ffffff' },\r\n  },\r\n}\r\n\r\nexport type Theme = z.infer<typeof themeSchema>\r\nexport type ChatTheme = z.infer<typeof chatThemeSchema>\r\nexport type AvatarProps = z.infer<typeof avatarPropsSchema>\r\nexport type GeneralTheme = z.infer<typeof generalThemeSchema>\r\nexport type Background = z.infer<typeof backgroundSchema>\r\nexport type ContainerColors = z.infer<typeof containerColorsSchema>\r\nexport type InputColors = z.infer<typeof inputColorsSchema>\r\nexport type ThemeTemplate = z.infer<typeof themeTemplateSchema>\r\n","import { z } from 'zod'\r\n\r\nexport const listVariableValue = z.array(z.string().nullable())\r\n\r\nexport const variableSchema = z.object({\r\n  id: z.string(),\r\n  name: z.string(),\r\n  value: z.string().or(listVariableValue).nullish(),\r\n})\r\n\r\n/**\r\n * Variable when retrieved from the database\r\n */\r\nexport const variableWithValueSchema = z.object({\r\n  id: z.string(),\r\n  name: z.string(),\r\n  value: z.string().or(listVariableValue),\r\n})\r\n\r\n/**\r\n * Variable when computed or retrieved from a block\r\n */\r\nconst VariableWithUnknowValueSchema = z.object({\r\n  id: z.string(),\r\n  name: z.string(),\r\n  value: z.unknown(),\r\n})\r\n\r\nexport type Variable = z.infer<typeof variableSchema>\r\nexport type VariableWithValue = z.infer<typeof variableWithValueSchema>\r\nexport type VariableWithUnknowValue = z.infer<\r\n  typeof VariableWithUnknowValueSchema\r\n>\r\n","import { z } from 'zod'\r\nimport { settingsSchema } from './settings'\r\nimport { themeSchema } from './theme'\r\nimport { variableSchema } from './variable'\r\nimport { Typebot as TypebotPrisma } from '@typebot.io/prisma'\r\nimport { blockSchema } from '../blocks/schemas'\r\n\r\nexport const groupSchema = z.object({\r\n  id: z.string(),\r\n  title: z.string(),\r\n  graphCoordinates: z.object({\r\n    x: z.number(),\r\n    y: z.number(),\r\n  }),\r\n  blocks: z.array(blockSchema),\r\n})\r\n\r\nconst sourceSchema = z.object({\r\n  groupId: z.string(),\r\n  blockId: z.string(),\r\n  itemId: z.string().optional(),\r\n})\r\n\r\nconst targetSchema = z.object({\r\n  groupId: z.string(),\r\n  blockId: z.string().optional(),\r\n})\r\n\r\nexport const edgeSchema = z.object({\r\n  id: z.string(),\r\n  from: sourceSchema,\r\n  to: targetSchema,\r\n})\r\n\r\nconst resultsTablePreferencesSchema = z.object({\r\n  columnsOrder: z.array(z.string()),\r\n  columnsVisibility: z.record(z.string(), z.boolean()),\r\n  columnsWidth: z.record(z.string(), z.number()),\r\n})\r\n\r\nexport const typebotSchema = z.object({\r\n  version: z.enum(['3']).nullable(),\r\n  id: z.string(),\r\n  name: z.string(),\r\n  groups: z.array(groupSchema),\r\n  edges: z.array(edgeSchema),\r\n  variables: z.array(variableSchema),\r\n  theme: themeSchema,\r\n  selectedThemeTemplateId: z.string().nullable(),\r\n  settings: settingsSchema,\r\n  createdAt: z.date(),\r\n  updatedAt: z.date(),\r\n  icon: z.string().nullable(),\r\n  folderId: z.string().nullable(),\r\n  publicId: z.string().nullable(),\r\n  customDomain: z.string().nullable(),\r\n  workspaceId: z.string(),\r\n  resultsTablePreferences: resultsTablePreferencesSchema.nullable(),\r\n  isArchived: z.boolean(),\r\n  isClosed: z.boolean(),\r\n}) satisfies z.ZodType<TypebotPrisma>\r\n\r\nexport type Typebot = z.infer<typeof typebotSchema>\r\nexport type Target = z.infer<typeof targetSchema>\r\nexport type Source = z.infer<typeof sourceSchema>\r\nexport type Edge = z.infer<typeof edgeSchema>\r\nexport type Group = z.infer<typeof groupSchema>\r\nexport type ResultsTablePreferences = z.infer<\r\n  typeof resultsTablePreferencesSchema\r\n>\r\n","import { PublicTypebot as PrismaPublicTypebot } from '@typebot.io/prisma'\r\nimport {\r\n  groupSchema,\r\n  edgeSchema,\r\n  variableSchema,\r\n  themeSchema,\r\n  settingsSchema,\r\n  typebotSchema,\r\n} from './typebot'\r\nimport { z } from 'zod'\r\n\r\nexport const publicTypebotSchema = z.object({\r\n  id: z.string(),\r\n  version: z.enum(['3']).nullable(),\r\n  createdAt: z.date(),\r\n  updatedAt: z.date(),\r\n  typebotId: z.string(),\r\n  groups: z.array(groupSchema),\r\n  edges: z.array(edgeSchema),\r\n  variables: z.array(variableSchema),\r\n  theme: themeSchema,\r\n  settings: settingsSchema,\r\n}) satisfies z.ZodType<PrismaPublicTypebot>\r\n\r\nconst publicTypebotWithName = publicTypebotSchema.merge(\r\n  typebotSchema.pick({ name: true, isArchived: true, isClosed: true })\r\n)\r\n\r\nexport type PublicTypebot = z.infer<typeof publicTypebotSchema>\r\nexport type PublicTypebotWithName = z.infer<typeof publicTypebotWithName>\r\n","import { z } from 'zod'\r\nimport { Answer as AnswerPrisma, Prisma } from '@typebot.io/prisma'\r\n\r\nexport const answerSchema = z.object({\r\n  createdAt: z.date(),\r\n  resultId: z.string(),\r\n  blockId: z.string(),\r\n  groupId: z.string(),\r\n  variableId: z.string().nullable(),\r\n  content: z.string(),\r\n  storageUsed: z.number().nullable(),\r\n}) satisfies z.ZodType<AnswerPrisma>\r\n\r\nexport const answerInputSchema = answerSchema\r\n  .omit({\r\n    createdAt: true,\r\n    resultId: true,\r\n    variableId: true,\r\n    storageUsed: true,\r\n  })\r\n  .merge(\r\n    z.object({\r\n      variableId: z.string().nullish(),\r\n      storageUsed: z.number().nullish(),\r\n    })\r\n  ) satisfies z.ZodType<Prisma.AnswerUncheckedUpdateInput>\r\n\r\nexport type Stats = {\r\n  totalViews: number\r\n  totalStarts: number\r\n  totalCompleted: number\r\n}\r\n\r\nexport type Answer = z.infer<typeof answerSchema>\r\n\r\nexport type AnswerInput = z.infer<typeof answerInputSchema>\r\n","import { z } from 'zod'\r\nimport { answerInputSchema, answerSchema } from './answer'\r\nimport { InputBlockType } from './blocks'\r\nimport { variableWithValueSchema } from './typebot/variable'\r\nimport { Result as ResultPrisma, Log as LogPrisma } from '@typebot.io/prisma'\r\n\r\nexport const resultSchema = z.object({\r\n  id: z.string(),\r\n  createdAt: z.date(),\r\n  typebotId: z.string(),\r\n  variables: z.array(variableWithValueSchema),\r\n  isCompleted: z.boolean(),\r\n  hasStarted: z.boolean().nullable(),\r\n  isArchived: z.boolean().nullable(),\r\n}) satisfies z.ZodType<ResultPrisma>\r\n\r\nexport const resultWithAnswersSchema = resultSchema.merge(\r\n  z.object({\r\n    answers: z.array(answerSchema),\r\n  })\r\n)\r\n\r\nexport const resultWithAnswersInputSchema = resultSchema.merge(\r\n  z.object({\r\n    answers: z.array(answerInputSchema),\r\n  })\r\n)\r\n\r\nexport const logSchema = z.object({\r\n  id: z.string(),\r\n  createdAt: z.date(),\r\n  resultId: z.string(),\r\n  status: z.string(),\r\n  description: z.string(),\r\n  details: z.string().nullable(),\r\n}) satisfies z.ZodType<LogPrisma>\r\n\r\nexport type Result = z.infer<typeof resultSchema>\r\nexport type ResultWithAnswers = z.infer<typeof resultWithAnswersSchema>\r\nexport type ResultWithAnswersInput = z.infer<\r\n  typeof resultWithAnswersInputSchema\r\n>\r\nexport type Log = z.infer<typeof logSchema>\r\n\r\nexport type ResultValuesInput = Pick<\r\n  ResultWithAnswersInput,\r\n  'answers' | 'createdAt' | 'variables'\r\n>\r\n\r\nexport type ResultValues = Pick<\r\n  ResultWithAnswers,\r\n  'answers' | 'createdAt' | 'variables'\r\n>\r\n\r\nexport type ResultHeaderCell = {\r\n  id: string\r\n  label: string\r\n  blocks?: {\r\n    id: string\r\n    groupId: string\r\n  }[]\r\n  blockType?: InputBlockType\r\n  variableIds?: string[]\r\n}\r\n","import { z } from 'zod'\r\nimport { stripeCredentialsSchema } from './blocks/inputs/payment/schemas'\r\nimport { googleSheetsCredentialsSchema } from './blocks/integrations/googleSheets/schemas'\r\nimport { openAICredentialsSchema } from './blocks/integrations/openai'\r\nimport { smtpCredentialsSchema } from './blocks/integrations/sendEmail'\r\n\r\nexport const credentialsSchema = z.discriminatedUnion('type', [\r\n  smtpCredentialsSchema,\r\n  googleSheetsCredentialsSchema,\r\n  stripeCredentialsSchema,\r\n  openAICredentialsSchema,\r\n])\r\n\r\nexport type Credentials = z.infer<typeof credentialsSchema>\r\n","import { z } from 'zod'\r\nimport {\r\n  googleAnalyticsOptionsSchema,\r\n  paymentInputRuntimeOptionsSchema,\r\n  redirectOptionsSchema,\r\n} from './blocks'\r\nimport { publicTypebotSchema } from './publicTypebot'\r\nimport { logSchema, resultSchema } from './result'\r\nimport { listVariableValue, typebotSchema } from './typebot'\r\nimport {\r\n  textBubbleContentSchema,\r\n  imageBubbleContentSchema,\r\n  videoBubbleContentSchema,\r\n  audioBubbleContentSchema,\r\n  embedBubbleContentSchema,\r\n} from './blocks/bubbles'\r\nimport { answerSchema } from './answer'\r\nimport { BubbleBlockType } from './blocks/bubbles/enums'\r\nimport { inputBlockSchema } from './blocks/schemas'\r\n\r\nconst typebotInSessionStateSchema = publicTypebotSchema.pick({\r\n  id: true,\r\n  groups: true,\r\n  edges: true,\r\n  variables: true,\r\n})\r\n\r\nconst dynamicThemeSchema = z.object({\r\n  hostAvatarUrl: z.string().optional(),\r\n  guestAvatarUrl: z.string().optional(),\r\n})\r\n\r\nconst answerInSessionStateSchema = answerSchema.pick({\r\n  content: true,\r\n  blockId: true,\r\n  variableId: true,\r\n})\r\n\r\nconst resultInSessionStateSchema = resultSchema\r\n  .pick({\r\n    variables: true,\r\n  })\r\n  .merge(\r\n    z.object({\r\n      answers: z.array(answerInSessionStateSchema),\r\n      id: z.string().optional(),\r\n    })\r\n  )\r\n\r\nexport const sessionStateSchema = z.object({\r\n  typebot: typebotInSessionStateSchema,\r\n  dynamicTheme: dynamicThemeSchema.optional(),\r\n  linkedTypebots: z.object({\r\n    typebots: z.array(typebotInSessionStateSchema),\r\n    queue: z.array(z.object({ edgeId: z.string(), typebotId: z.string() })),\r\n  }),\r\n  currentTypebotId: z.string(),\r\n  result: resultInSessionStateSchema,\r\n  currentBlock: z\r\n    .object({\r\n      blockId: z.string(),\r\n      groupId: z.string(),\r\n    })\r\n    .optional(),\r\n})\r\n\r\nconst chatSessionSchema = z.object({\r\n  id: z.string(),\r\n  createdAt: z.date(),\r\n  updatedAt: z.date(),\r\n  state: sessionStateSchema,\r\n})\r\n\r\nconst textMessageSchema = z.object({\r\n  type: z.literal(BubbleBlockType.TEXT),\r\n  content: textBubbleContentSchema,\r\n})\r\n\r\nconst imageMessageSchema = z.object({\r\n  type: z.enum([BubbleBlockType.IMAGE]),\r\n  content: imageBubbleContentSchema,\r\n})\r\n\r\nconst videoMessageSchema = z.object({\r\n  type: z.enum([BubbleBlockType.VIDEO]),\r\n  content: videoBubbleContentSchema,\r\n})\r\n\r\nconst audioMessageSchema = z.object({\r\n  type: z.enum([BubbleBlockType.AUDIO]),\r\n  content: audioBubbleContentSchema,\r\n})\r\n\r\nconst embedMessageSchema = z.object({\r\n  type: z.enum([BubbleBlockType.EMBED]),\r\n  content: embedBubbleContentSchema\r\n    .omit({\r\n      height: true,\r\n    })\r\n    .merge(z.object({ height: z.number().optional() })),\r\n})\r\n\r\nconst chatMessageSchema = z\r\n  .object({ id: z.string() })\r\n  .and(\r\n    z.discriminatedUnion('type', [\r\n      textMessageSchema,\r\n      imageMessageSchema,\r\n      videoMessageSchema,\r\n      audioMessageSchema,\r\n      embedMessageSchema,\r\n    ])\r\n  )\r\n\r\nconst scriptToExecuteSchema = z.object({\r\n  content: z.string(),\r\n  args: z.array(\r\n    z.object({\r\n      id: z.string(),\r\n      value: z\r\n        .string()\r\n        .or(z.number())\r\n        .or(z.boolean())\r\n        .or(listVariableValue)\r\n        .nullish(),\r\n    })\r\n  ),\r\n})\r\n\r\nconst startTypebotSchema = typebotSchema.pick({\r\n  id: true,\r\n  groups: true,\r\n  edges: true,\r\n  variables: true,\r\n  settings: true,\r\n  theme: true,\r\n})\r\n\r\nconst startParamsSchema = z.object({\r\n  typebot: startTypebotSchema\r\n    .or(z.string())\r\n    .describe(\r\n      'Either a Typebot ID or a Typebot object. If you provide a Typebot object, it will be executed in preview mode. ([How can I find my altbot ID?](https://docs.typebot.io/api#how-to-find-my-typebotid)).'\r\n    ),\r\n  isPreview: z\r\n    .boolean()\r\n    .optional()\r\n    .describe(\r\n      \"If set to `true`, it will start a Preview session with the unpublished bot and it won't be saved in the Results tab. You need to be authenticated for this to work.\"\r\n    ),\r\n  resultId: z\r\n    .string()\r\n    .optional()\r\n    .describe(\"Provide it if you'd like to overwrite an existing result.\"),\r\n  startGroupId: z\r\n    .string()\r\n    .optional()\r\n    .describe('Start chat from a specific group.'),\r\n  prefilledVariables: z\r\n    .record(z.unknown())\r\n    .optional()\r\n    .describe(\r\n      '[More info about prefilled variables.](https://docs.typebot.io/editor/variables#prefilled-variables)'\r\n    ),\r\n})\r\n\r\nexport const sendMessageInputSchema = z.object({\r\n  message: z\r\n    .string()\r\n    .optional()\r\n    .describe(\r\n      'The answer to the previous chat input. Do not provide it if you are starting a new chat.'\r\n    ),\r\n  sessionId: z\r\n    .string()\r\n    .optional()\r\n    .describe(\r\n      'Session ID that you get from the initial chat request to a bot. If not provided, it will create a new session.'\r\n    ),\r\n  startParams: startParamsSchema.optional(),\r\n  choiceInputId: z.string().optional(),\r\n})\r\n\r\nconst runtimeOptionsSchema = paymentInputRuntimeOptionsSchema.optional()\r\n\r\nconst replyLogSchema = logSchema\r\n  .pick({\r\n    status: true,\r\n    description: true,\r\n  })\r\n  .merge(z.object({ details: z.unknown().optional() }))\r\n\r\nconst clientSideActionSchema = z\r\n  .object({\r\n    lastBubbleBlockId: z.string().optional(),\r\n  })\r\n  .and(\r\n    z\r\n      .object({\r\n        scriptToExecute: scriptToExecuteSchema,\r\n      })\r\n      .or(\r\n        z.object({\r\n          redirect: redirectOptionsSchema,\r\n        })\r\n      )\r\n      .or(\r\n        z.object({\r\n          chatwoot: z.object({ scriptToExecute: scriptToExecuteSchema }),\r\n        })\r\n      )\r\n      .or(\r\n        z.object({\r\n          googleAnalytics: googleAnalyticsOptionsSchema,\r\n        })\r\n      )\r\n      .or(\r\n        z.object({\r\n          wait: z.object({\r\n            secondsToWaitFor: z.number(),\r\n          }),\r\n        })\r\n      )\r\n      .or(\r\n        z.object({\r\n          setVariable: z.object({ scriptToExecute: scriptToExecuteSchema }),\r\n        })\r\n      )\r\n  )\r\n\r\nexport const chatReplySchema = z.object({\r\n  messages: z.array(chatMessageSchema),\r\n  input: inputBlockSchema\r\n    .and(\r\n      z.object({\r\n        prefilledValue: z.string().optional(),\r\n        runtimeOptions: runtimeOptionsSchema.optional(),\r\n      })\r\n    )\r\n    .optional(),\r\n  clientSideActions: z.array(clientSideActionSchema).optional(),\r\n  sessionId: z.string().optional(),\r\n  typebot: typebotSchema\r\n    .pick({ id: true, theme: true, settings: true })\r\n    .optional(),\r\n  resultId: z.string().optional(),\r\n  dynamicTheme: dynamicThemeSchema.optional(),\r\n  logs: z.array(replyLogSchema).optional(),\r\n  choiceInputId: z.string().optional(),\r\n})\r\n\r\nexport type ChatSession = z.infer<typeof chatSessionSchema>\r\nexport type SessionState = z.infer<typeof sessionStateSchema>\r\nexport type TypebotInSession = z.infer<typeof typebotInSessionStateSchema>\r\nexport type ResultInSession = z.infer<typeof resultInSessionStateSchema>\r\nexport type ChatReply = z.infer<typeof chatReplySchema>\r\nexport type ChatMessage = z.infer<typeof chatMessageSchema>\r\nexport type SendMessageInput = z.infer<typeof sendMessageInputSchema>\r\nexport type ScriptToExecute = z.infer<typeof scriptToExecuteSchema>\r\nexport type StartParams = z.infer<typeof startParamsSchema>\r\nexport type RuntimeOptions = z.infer<typeof runtimeOptionsSchema>\r\nexport type StartTypebot = z.infer<typeof startTypebotSchema>\r\nexport type ReplyLog = z.infer<typeof replyLogSchema>\r\n","import { z } from 'zod'\r\nimport {\r\n  Workspace as WorkspacePrisma,\r\n  Plan,\r\n  MemberInWorkspace as MemberInWorkspacePrisma,\r\n  WorkspaceRole,\r\n  User as UserPrisma,\r\n  WorkspaceInvitation as WorkspaceInvitationPrisma,\r\n} from '@typebot.io/prisma'\r\n\r\nexport const workspaceMemberSchema = z.object({\r\n  workspaceId: z.string(),\r\n  user: z.object({\r\n    name: z.string().nullable(),\r\n    email: z.string().nullable(),\r\n    image: z.string().nullable(),\r\n  }),\r\n  role: z.nativeEnum(WorkspaceRole),\r\n}) satisfies z.ZodType<\r\n  Omit<MemberInWorkspacePrisma, 'userId' | 'createdAt' | 'updatedAt'> & {\r\n    user: Pick<UserPrisma, 'name' | 'email' | 'image'>\r\n  }\r\n>\r\n\r\nexport const workspaceInvitationSchema = z.object({\r\n  createdAt: z.date(),\r\n  updatedAt: z.date(),\r\n  email: z.string(),\r\n  type: z.nativeEnum(WorkspaceRole),\r\n}) satisfies z.ZodType<\r\n  Omit<WorkspaceInvitationPrisma, 'workspaceId' | 'userId' | 'id'>\r\n>\r\n\r\nexport const workspaceSchema = z.object({\r\n  id: z.string(),\r\n  createdAt: z.date(),\r\n  updatedAt: z.date(),\r\n  name: z.string(),\r\n  icon: z.string().nullable(),\r\n  plan: z.nativeEnum(Plan),\r\n  stripeId: z.string().nullable(),\r\n  additionalChatsIndex: z.number(),\r\n  additionalStorageIndex: z.number(),\r\n  chatsLimitFirstEmailSentAt: z.date().nullable(),\r\n  chatsLimitSecondEmailSentAt: z.date().nullable(),\r\n  storageLimitFirstEmailSentAt: z.date().nullable(),\r\n  storageLimitSecondEmailSentAt: z.date().nullable(),\r\n  customChatsLimit: z.number().nullable(),\r\n  customStorageLimit: z.number().nullable(),\r\n  customSeatsLimit: z.number().nullable(),\r\n  isQuarantined: z.boolean(),\r\n}) satisfies z.ZodType<WorkspacePrisma>\r\n\r\nexport type Workspace = z.infer<typeof workspaceSchema>\r\nexport type WorkspaceMember = z.infer<typeof workspaceMemberSchema>\r\nexport type WorkspaceInvitation = z.infer<typeof workspaceInvitationSchema>\r\n","import { z } from 'zod'\r\nimport { buttonItemSchema } from '../blocks/inputs/choice'\r\nimport { conditionItemSchema } from '../blocks/logic/condition'\r\nimport { aItemSchema, bItemSchema } from '../blocks'\r\n\r\nconst itemSchema = buttonItemSchema\r\n  .or(conditionItemSchema)\r\n  .or(aItemSchema)\r\n  .or(bItemSchema)\r\n\r\nexport type Item = z.infer<typeof itemSchema>\r\n","import { useEffect, useRef, useState } from 'react'\r\nimport { useTypebot } from '@/providers/TypebotProvider'\r\nimport { AudioBubbleContent } from '@typebot.io/schemas'\r\nimport { TypingBubble } from '@/components/TypingBubble'\r\nimport { parseVariables } from '@/features/variables'\r\n\r\ntype Props = {\r\n  url: AudioBubbleContent['url']\r\n  onTransitionEnd: () => void\r\n}\r\n\r\nconst showAnimationDuration = 400\r\nconst typingDuration = 500\r\n\r\nexport const AudioBubble = ({ url, onTransitionEnd }: Props) => {\r\n  const { typebot, isLoading } = useTypebot()\r\n  const audio = useRef<HTMLAudioElement | null>(null)\r\n  const [isTyping, setIsTyping] = useState(true)\r\n  const [parsedUrl] = useState(parseVariables(typebot.variables)(url))\r\n\r\n  useEffect(() => {\r\n    if (!isTyping || isLoading) return\r\n\r\n    const typingTimeout = setTimeout(() => {\r\n      setIsTyping(false)\r\n      setTimeout(() => {\r\n        onTransitionEnd()\r\n      }, showAnimationDuration)\r\n    }, typingDuration)\r\n\r\n    return () => {\r\n      clearTimeout(typingTimeout)\r\n    }\r\n  }, [isLoading, isTyping, onTransitionEnd])\r\n\r\n  return (\r\n    <div className=\"flex flex-col\">\r\n      <div className=\"flex mb-2 w-full lg:w-11/12 items-center\">\r\n        <div className={'flex relative z-10 items-start typebot-host-bubble'}>\r\n          <div\r\n            className=\"flex items-center absolute px-4 py-2 rounded-lg bubble-typing z-10 \"\r\n            style={{\r\n              width: isTyping ? '4rem' : '100%',\r\n              height: isTyping ? '2rem' : '100%',\r\n            }}\r\n          >\r\n            {isTyping ? <TypingBubble /> : null}\r\n          </div>\r\n          <audio\r\n            ref={audio}\r\n            src={parsedUrl}\r\n            className={\r\n              'z-10 content-opacity m-2 ' +\r\n              (isTyping ? 'opacity-0' : 'opacity-100')\r\n            }\r\n            style={{ height: isTyping ? '2rem' : 'revert' }}\r\n            autoPlay\r\n            controls\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport const TypingBubble = (): JSX.Element => (\r\n  <div className=\"flex items-center\">\r\n    <div className=\"w-2 h-2 mr-1 rounded-full bubble1\" />\r\n    <div className=\"w-2 h-2 mr-1 rounded-full bubble2\" />\r\n    <div className=\"w-2 h-2 rounded-full bubble3\" />\r\n  </div>\r\n)\r\n","import { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { EmbedBubbleBlock } from '@typebot.io/schemas'\r\nimport { TypingBubble } from '../../../../../components/TypingBubble'\r\nimport { parseVariables } from '@/features/variables'\r\nimport { useTypebot } from '@/providers/TypebotProvider'\r\n\r\ntype Props = {\r\n  block: EmbedBubbleBlock\r\n  onTransitionEnd: () => void\r\n}\r\n\r\nexport const showAnimationDuration = 400\r\n\r\nexport const EmbedBubble = ({ block, onTransitionEnd }: Props) => {\r\n  const { typebot, isLoading } = useTypebot()\r\n  const messageContainer = useRef<HTMLDivElement | null>(null)\r\n  const [isTyping, setIsTyping] = useState(true)\r\n  const [url] = useState(parseVariables(typebot.variables)(block.content?.url))\r\n\r\n  const onTypingEnd = useCallback(() => {\r\n    setIsTyping(false)\r\n    setTimeout(() => {\r\n      onTransitionEnd()\r\n    }, showAnimationDuration)\r\n  }, [onTransitionEnd])\r\n\r\n  useEffect(() => {\r\n    if (!isTyping || isLoading) return\r\n    const timeout = setTimeout(() => {\r\n      setIsTyping(false)\r\n      onTypingEnd()\r\n    }, 1000)\r\n\r\n    return () => {\r\n      clearTimeout(timeout)\r\n    }\r\n  }, [isLoading, isTyping, onTypingEnd])\r\n\r\n  const height = block.content.height\r\n    ? typeof block.content.height === 'string'\r\n      ? parseVariables(typebot.variables)(block.content.height) + 'px'\r\n      : block.content.height\r\n    : '2rem'\r\n\r\n  return (\r\n    <div className=\"flex flex-col w-full\" ref={messageContainer}>\r\n      <div className=\"flex mb-2 w-full lg:w-11/12 items-center\">\r\n        <div\r\n          className={\r\n            'flex relative z-10 items-start typebot-host-bubble w-full'\r\n          }\r\n        >\r\n          <div\r\n            className=\"flex items-center absolute px-4 py-2 rounded-lg bubble-typing z-10 \"\r\n            style={{\r\n              width: isTyping ? '4rem' : '100%',\r\n              height: isTyping ? '2rem' : '100%',\r\n            }}\r\n          >\r\n            {isTyping ? <TypingBubble /> : <></>}\r\n          </div>\r\n          <iframe\r\n            id=\"embed-bubble-content\"\r\n            src={url}\r\n            className={\r\n              'w-full z-20 p-4 content-opacity ' +\r\n              (isTyping ? 'opacity-0' : 'opacity-100')\r\n            }\r\n            style={{\r\n              height: isTyping ? '2rem' : height,\r\n              borderRadius: '15px',\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { useTypebot } from '@/providers/TypebotProvider'\r\nimport { ImageBubbleBlock } from '@typebot.io/schemas'\r\nimport { TypingBubble } from '@/components/TypingBubble'\r\nimport { parseVariables } from '@/features/variables'\r\n\r\ntype Props = {\r\n  block: ImageBubbleBlock\r\n  onTransitionEnd: () => void\r\n}\r\n\r\nexport const showAnimationDuration = 400\r\n\r\nexport const mediaLoadingFallbackTimeout = 5000\r\n\r\nexport const ImageBubble = ({ block, onTransitionEnd }: Props) => {\r\n  const { typebot, isLoading } = useTypebot()\r\n  const messageContainer = useRef<HTMLDivElement | null>(null)\r\n  const image = useRef<HTMLImageElement | null>(null)\r\n  const [isTyping, setIsTyping] = useState(true)\r\n  const [url] = useState(parseVariables(typebot.variables)(block.content?.url))\r\n\r\n  const onTypingEnd = useCallback(() => {\r\n    setIsTyping(false)\r\n    setTimeout(() => {\r\n      onTransitionEnd()\r\n    }, showAnimationDuration)\r\n  }, [onTransitionEnd])\r\n\r\n  useEffect(() => {\r\n    if (!isTyping || isLoading) return\r\n\r\n    const timeout = setTimeout(() => {\r\n      setIsTyping(false)\r\n      onTypingEnd()\r\n    }, mediaLoadingFallbackTimeout)\r\n\r\n    return () => {\r\n      clearTimeout(timeout)\r\n    }\r\n  }, [isLoading, isTyping, onTypingEnd])\r\n\r\n  useEffect(() => {\r\n    const currentImage = image.current\r\n    if (!currentImage || isLoading || !isTyping) return\r\n    currentImage.onload = () => {\r\n      setIsTyping(false)\r\n      onTypingEnd()\r\n    }\r\n    return () => {\r\n      currentImage.onload = null\r\n    }\r\n  }, [isLoading, isTyping, onTypingEnd])\r\n\r\n  return (\r\n    <div className=\"flex flex-col\" ref={messageContainer}>\r\n      <div className=\"flex mb-2 w-full lg:w-11/12 items-center\">\r\n        <div className={'flex relative z-10 items-start typebot-host-bubble'}>\r\n          <div\r\n            className=\"flex items-center absolute px-4 py-2 rounded-lg bubble-typing z-10 \"\r\n            style={{\r\n              width: isTyping ? '4rem' : '100%',\r\n              height: isTyping ? '2rem' : '100%',\r\n            }}\r\n          >\r\n            {isTyping ? <TypingBubble /> : null}\r\n          </div>\r\n          <img\r\n            ref={image}\r\n            src={url}\r\n            className={\r\n              'p-4 content-opacity z-10 w-auto rounded-lg ' +\r\n              (isTyping ? 'opacity-0' : 'opacity-100')\r\n            }\r\n            style={{\r\n              maxHeight: '32rem',\r\n              height: isTyping ? '2rem' : 'auto',\r\n              maxWidth: '100%',\r\n            }}\r\n            alt=\"Bubble image\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { useTypebot } from '@/providers/TypebotProvider'\r\nimport { BubbleBlockType, TextBubbleBlock } from '@typebot.io/schemas'\r\nimport { computeTypingDuration } from '../utils/computeTypingDuration'\r\nimport { parseVariables } from '@/features/variables'\r\nimport { TypingBubble } from '@/components/TypingBubble'\r\n\r\ntype Props = {\r\n  block: TextBubbleBlock\r\n  onTransitionEnd: () => void\r\n}\r\n\r\nexport const showAnimationDuration = 400\r\n\r\nconst defaultTypingEmulation = {\r\n  enabled: true,\r\n  speed: 300,\r\n  maxDelay: 1.5,\r\n}\r\n\r\nexport const TextBubble = ({ block, onTransitionEnd }: Props) => {\r\n  const { typebot, isLoading } = useTypebot()\r\n  const messageContainer = useRef<HTMLDivElement | null>(null)\r\n  const [isTyping, setIsTyping] = useState(true)\r\n\r\n  const [content] = useState(\r\n    parseVariables(typebot.variables)(block.content.html)\r\n  )\r\n\r\n  const onTypingEnd = useCallback(() => {\r\n    setIsTyping(false)\r\n    setTimeout(() => {\r\n      onTransitionEnd()\r\n    }, showAnimationDuration)\r\n  }, [onTransitionEnd])\r\n\r\n  useEffect(() => {\r\n    if (!isTyping || isLoading) return\r\n\r\n    const typingTimeout = computeTypingDuration(\r\n      block.content.plainText ?? '',\r\n      typebot.settings?.typingEmulation ?? defaultTypingEmulation\r\n    )\r\n    const timeout = setTimeout(() => {\r\n      onTypingEnd()\r\n    }, typingTimeout)\r\n\r\n    return () => {\r\n      clearTimeout(timeout)\r\n    }\r\n  }, [\r\n    block.content.plainText,\r\n    isLoading,\r\n    isTyping,\r\n    onTypingEnd,\r\n    typebot.settings?.typingEmulation,\r\n  ])\r\n\r\n  return (\r\n    <div className=\"flex flex-col\" ref={messageContainer}>\r\n      <div className=\"flex mb-2 w-full items-center\">\r\n        <div className={'flex relative items-start typebot-host-bubble'}>\r\n          <div\r\n            className=\"flex items-center absolute px-4 py-2 rounded-lg bubble-typing \"\r\n            style={{\r\n              width: isTyping ? '4rem' : '100%',\r\n              height: isTyping ? '2rem' : '100%',\r\n            }}\r\n            data-testid=\"host-bubble\"\r\n          >\r\n            {isTyping ? <TypingBubble /> : null}\r\n          </div>\r\n          {block.type === BubbleBlockType.TEXT && (\r\n            <p\r\n              style={{\r\n                textOverflow: 'ellipsis',\r\n              }}\r\n              className={\r\n                'overflow-hidden content-opacity mx-4 my-2 whitespace-pre-wrap slate-html-container relative ' +\r\n                (isTyping ? 'opacity-0 h-6' : 'opacity-100 h-full')\r\n              }\r\n              dangerouslySetInnerHTML={{\r\n                __html: content,\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { TypingEmulation } from '@typebot.io/schemas'\r\n\r\nexport const computeTypingDuration = (\r\n  bubbleContent: string,\r\n  typingSettings: TypingEmulation\r\n) => {\r\n  let wordCount = bubbleContent.match(/(\\w+)/g)?.length ?? 0\r\n  if (wordCount === 0) wordCount = bubbleContent.length\r\n  const typedWordsPerMinute = typingSettings.speed\r\n  let typingTimeout = typingSettings.enabled\r\n    ? (wordCount / typedWordsPerMinute) * 60000\r\n    : 0\r\n  if (typingTimeout > typingSettings.maxDelay * 1000)\r\n    typingTimeout = typingSettings.maxDelay * 1000\r\n  return typingTimeout\r\n}\r\n","import { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { useTypebot } from '@/providers/TypebotProvider'\r\nimport {\r\n  Variable,\r\n  VideoBubbleContent,\r\n  VideoBubbleContentType,\r\n  VideoBubbleBlock,\r\n} from '@typebot.io/schemas'\r\nimport { TypingBubble } from '@/components/TypingBubble'\r\nimport { parseVariables } from '@/features/variables'\r\n\r\ntype Props = {\r\n  block: VideoBubbleBlock\r\n  onTransitionEnd: () => void\r\n}\r\n\r\nexport const showAnimationDuration = 400\r\n\r\nexport const mediaLoadingFallbackTimeout = 5000\r\n\r\nexport const VideoBubble = ({ block, onTransitionEnd }: Props) => {\r\n  const { typebot, isLoading } = useTypebot()\r\n  const messageContainer = useRef<HTMLDivElement | null>(null)\r\n  const [isTyping, setIsTyping] = useState(true)\r\n\r\n  const onTypingEnd = useCallback(() => {\r\n    setIsTyping(false)\r\n    setTimeout(() => {\r\n      onTransitionEnd()\r\n    }, showAnimationDuration)\r\n  }, [onTransitionEnd])\r\n\r\n  useEffect(() => {\r\n    if (!isTyping || isLoading) return\r\n    const timeout = setTimeout(() => {\r\n      setIsTyping(false)\r\n      onTypingEnd()\r\n    }, 1000)\r\n\r\n    return () => {\r\n      clearTimeout(timeout)\r\n    }\r\n  }, [isLoading, isTyping, onTypingEnd])\r\n\r\n  return (\r\n    <div className=\"flex flex-col\" ref={messageContainer}>\r\n      <div className=\"flex mb-2 w-full lg:w-11/12 items-center\">\r\n        <div className={'flex relative z-10 items-start typebot-host-bubble'}>\r\n          <div\r\n            className=\"flex items-center absolute px-4 py-2 rounded-lg bubble-typing z-10 \"\r\n            style={{\r\n              width: isTyping ? '4rem' : '100%',\r\n              height: isTyping ? '2rem' : '100%',\r\n            }}\r\n          >\r\n            {isTyping ? <TypingBubble /> : <></>}\r\n          </div>\r\n          <VideoContent\r\n            content={block.content}\r\n            isTyping={isTyping}\r\n            variables={typebot.variables}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst VideoContent = ({\r\n  content,\r\n  isTyping,\r\n  variables,\r\n}: {\r\n  content?: VideoBubbleContent\r\n  isTyping: boolean\r\n  variables: Variable[]\r\n}) => {\r\n  const [url] = useState(parseVariables(variables)(content?.url))\r\n\r\n  if (!content?.type) return <></>\r\n\r\n  switch (content.type) {\r\n    case VideoBubbleContentType.URL: {\r\n      const isSafariBrowser = window.navigator.vendor.match(/apple/i)\r\n      return (\r\n        <video\r\n          controls\r\n          className={\r\n            'p-4 focus:outline-none w-full z-10 content-opacity rounded-md ' +\r\n            (isTyping ? 'opacity-0' : 'opacity-100')\r\n          }\r\n          style={{\r\n            height: isTyping ? '2rem' : 'auto',\r\n            maxHeight: isSafariBrowser ? '40vh' : '',\r\n          }}\r\n          autoPlay\r\n        >\r\n          <source src={url} type=\"video/mp4\" />\r\n          Sorry, your browser doesn&apos;t support embedded videos.\r\n        </video>\r\n      )\r\n    }\r\n    case VideoBubbleContentType.VIMEO:\r\n    case VideoBubbleContentType.YOUTUBE: {\r\n      const baseUrl =\r\n        content.type === VideoBubbleContentType.VIMEO\r\n          ? 'https://player.vimeo.com/video'\r\n          : 'https://www.youtube.com/embed'\r\n      return (\r\n        <iframe\r\n          src={`${baseUrl}/${content.id}`}\r\n          className={\r\n            'w-full p-4 content-opacity z-10 rounded-md ' +\r\n            (isTyping ? 'opacity-0' : 'opacity-100')\r\n          }\r\n          height={isTyping ? '2rem' : '200px'}\r\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n          allowFullScreen\r\n        />\r\n      )\r\n    }\r\n  }\r\n}\r\n","import { AudioBubble } from '@/features/blocks/bubbles/audio'\r\nimport { EmbedBubble } from '@/features/blocks/bubbles/embed'\r\nimport { ImageBubble } from '@/features/blocks/bubbles/image'\r\nimport { TextBubble } from '@/features/blocks/bubbles/textBubble'\r\nimport { VideoBubble } from '@/features/blocks/bubbles/video'\r\nimport { BubbleBlock, BubbleBlockType } from '@typebot.io/schemas'\r\n\r\ntype Props = {\r\n  block: BubbleBlock\r\n  onTransitionEnd: () => void\r\n}\r\n\r\nexport const HostBubble = ({ block, onTransitionEnd }: Props) => {\r\n  switch (block.type) {\r\n    case BubbleBlockType.TEXT:\r\n      return <TextBubble block={block} onTransitionEnd={onTransitionEnd} />\r\n    case BubbleBlockType.IMAGE:\r\n      return <ImageBubble block={block} onTransitionEnd={onTransitionEnd} />\r\n    case BubbleBlockType.VIDEO:\r\n      return <VideoBubble block={block} onTransitionEnd={onTransitionEnd} />\r\n    case BubbleBlockType.EMBED:\r\n      return <EmbedBubble block={block} onTransitionEnd={onTransitionEnd} />\r\n    case BubbleBlockType.AUDIO:\r\n      return (\r\n        <AudioBubble\r\n          url={block.content.url}\r\n          onTransitionEnd={onTransitionEnd}\r\n        />\r\n      )\r\n  }\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useAnswers } from '../../../providers/AnswersProvider'\r\nimport { InputBlock, InputBlockType } from '@typebot.io/schemas'\r\nimport { GuestBubble } from './bubbles/GuestBubble'\r\nimport { byId } from '@typebot.io/lib'\r\nimport { InputSubmitContent } from '@/types'\r\nimport { useTypebot } from '@/providers/TypebotProvider'\r\nimport { isInputValid } from '@/utils/inputs'\r\nimport { parseVariables } from '@/features/variables'\r\nimport { TextInput } from '@/features/blocks/inputs/textInput'\r\nimport { NumberInput } from '@/features/blocks/inputs/number'\r\nimport { EmailInput } from '@/features/blocks/inputs/email'\r\nimport { UrlInput } from '@/features/blocks/inputs/url'\r\nimport { PhoneInput } from '@/features/blocks/inputs/phone'\r\nimport { DateForm } from '@/features/blocks/inputs/date'\r\nimport { ChoiceForm } from '@/features/blocks/inputs/buttons'\r\nimport { PaymentForm } from '@/features/blocks/inputs/payment'\r\nimport { RatingForm } from '@/features/blocks/inputs/rating'\r\nimport { FileUploadForm } from '@/features/blocks/inputs/fileUpload'\r\n\r\nexport const InputChatBlock = ({\r\n  block,\r\n  hasAvatar,\r\n  hasGuestAvatar,\r\n  onTransitionEnd,\r\n  onSkip,\r\n}: {\r\n  block: InputBlock\r\n  hasGuestAvatar: boolean\r\n  hasAvatar: boolean\r\n  onTransitionEnd: (\r\n    answerContent?: InputSubmitContent,\r\n    isRetry?: boolean\r\n  ) => void\r\n  onSkip: () => void\r\n}) => {\r\n  const { typebot, isLoading } = useTypebot()\r\n  const { addAnswer } = useAnswers()\r\n  const [answer, setAnswer] = useState<string>()\r\n  const [isEditting, setIsEditting] = useState(false)\r\n\r\n  const { variableId } = block.options\r\n  const defaultValue =\r\n    (typebot.settings.general.isInputPrefillEnabled ?? true) && variableId\r\n      ? typebot.variables.find(\r\n          (variable) =>\r\n            variable.name === typebot.variables.find(byId(variableId))?.name\r\n        )?.value\r\n      : undefined\r\n\r\n  const handleSubmit = async ({ label, value, itemId }: InputSubmitContent) => {\r\n    setAnswer(label ?? value)\r\n    const isRetry = !isInputValid(value, block.type)\r\n    if (!isRetry && addAnswer)\r\n      await addAnswer(typebot.variables)({\r\n        blockId: block.id,\r\n        groupId: block.groupId,\r\n        content: value,\r\n        variableId,\r\n        uploadedFiles: block.type === InputBlockType.FILE,\r\n      })\r\n    if (!isEditting) onTransitionEnd({ label, value, itemId }, isRetry)\r\n    setIsEditting(false)\r\n  }\r\n\r\n  if (isLoading) return null\r\n\r\n  if (answer) {\r\n    const avatarUrl = typebot.theme.chat.guestAvatar?.url\r\n    return (\r\n      <GuestBubble\r\n        message={answer}\r\n        showAvatar={typebot.theme.chat.guestAvatar?.isEnabled ?? false}\r\n        avatarSrc={avatarUrl && parseVariables(typebot.variables)(avatarUrl)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex justify-end\">\r\n      {hasAvatar && (\r\n        <div className=\"flex w-6 xs:w-10 h-6 xs:h-10 mr-2 mb-2 mt-1 flex-shrink-0 items-center\" />\r\n      )}\r\n      <Input\r\n        block={block}\r\n        onSubmit={handleSubmit}\r\n        onSkip={onSkip}\r\n        defaultValue={defaultValue?.toString()}\r\n        hasGuestAvatar={hasGuestAvatar}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Input = ({\r\n  block,\r\n  onSubmit,\r\n  onSkip,\r\n  defaultValue,\r\n  hasGuestAvatar,\r\n}: {\r\n  block: InputBlock\r\n  onSubmit: (value: InputSubmitContent) => void\r\n  onSkip: () => void\r\n  defaultValue?: string\r\n  hasGuestAvatar: boolean\r\n}) => {\r\n  switch (block.type) {\r\n    case InputBlockType.TEXT:\r\n      return (\r\n        <TextInput\r\n          block={block}\r\n          onSubmit={onSubmit}\r\n          defaultValue={defaultValue}\r\n          hasGuestAvatar={hasGuestAvatar}\r\n        />\r\n      )\r\n    case InputBlockType.NUMBER:\r\n      return (\r\n        <NumberInput\r\n          block={block}\r\n          onSubmit={onSubmit}\r\n          defaultValue={defaultValue}\r\n          hasGuestAvatar={hasGuestAvatar}\r\n        />\r\n      )\r\n    case InputBlockType.EMAIL:\r\n      return (\r\n        <EmailInput\r\n          block={block}\r\n          onSubmit={onSubmit}\r\n          defaultValue={defaultValue}\r\n          hasGuestAvatar={hasGuestAvatar}\r\n        />\r\n      )\r\n    case InputBlockType.URL:\r\n      return (\r\n        <UrlInput\r\n          block={block}\r\n          onSubmit={onSubmit}\r\n          defaultValue={defaultValue}\r\n          hasGuestAvatar={hasGuestAvatar}\r\n        />\r\n      )\r\n    case InputBlockType.PHONE:\r\n      return (\r\n        <PhoneInput\r\n          block={block}\r\n          onSubmit={onSubmit}\r\n          defaultValue={defaultValue}\r\n          hasGuestAvatar={hasGuestAvatar}\r\n        />\r\n      )\r\n    case InputBlockType.DATE:\r\n      return <DateForm options={block.options} onSubmit={onSubmit} />\r\n    case InputBlockType.CHOICE:\r\n      return <ChoiceForm block={block} onSubmit={onSubmit} />\r\n    case InputBlockType.PAYMENT:\r\n      return (\r\n        <PaymentForm\r\n          options={block.options}\r\n          onSuccess={() =>\r\n            onSubmit({ value: block.options.labels.success ?? 'Success' })\r\n          }\r\n        />\r\n      )\r\n    case InputBlockType.RATING:\r\n      return <RatingForm block={block} onSubmit={onSubmit} />\r\n    case InputBlockType.FILE:\r\n      return (\r\n        <FileUploadForm block={block} onSubmit={onSubmit} onSkip={onSkip} />\r\n      )\r\n  }\r\n}\r\n","import { safeStringify } from '@/features/variables'\r\nimport {\r\n  AnswerInput,\r\n  ResultValuesInput,\r\n  Variable,\r\n  VariableWithUnknowValue,\r\n  VariableWithValue,\r\n} from '@typebot.io/schemas'\r\nimport { createContext, ReactNode, useContext, useState } from 'react'\r\nimport { isDefined } from '@typebot.io/lib'\r\n\r\nconst answersContext = createContext<{\r\n  resultId?: string\r\n  resultValues: ResultValuesInput\r\n  addAnswer: (\r\n    existingVariables: Variable[]\r\n  ) => (\r\n    answer: AnswerInput & { uploadedFiles: boolean }\r\n  ) => Promise<void> | undefined\r\n  updateVariables: (variables: VariableWithUnknowValue[]) => void\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  //@ts-ignore\r\n}>({})\r\n\r\nexport const AnswersProvider = ({\r\n  children,\r\n  resultId,\r\n  onNewAnswer,\r\n  onVariablesUpdated,\r\n}: {\r\n  resultId?: string\r\n  onNewAnswer: (\r\n    answer: AnswerInput & { uploadedFiles: boolean }\r\n  ) => Promise<void> | undefined\r\n  onVariablesUpdated?: (variables: VariableWithValue[]) => void\r\n  children: ReactNode\r\n}) => {\r\n  const [resultValues, setResultValues] = useState<ResultValuesInput>({\r\n    answers: [],\r\n    variables: [],\r\n    createdAt: new Date(),\r\n  })\r\n\r\n  const addAnswer =\r\n    (existingVariables: Variable[]) =>\r\n    (answer: AnswerInput & { uploadedFiles: boolean }) => {\r\n      if (answer.variableId)\r\n        updateVariables([\r\n          {\r\n            id: answer.variableId,\r\n            value: answer.content,\r\n            name:\r\n              existingVariables.find(\r\n                (existingVariable) => existingVariable.id === answer.variableId\r\n              )?.name ?? '',\r\n          },\r\n        ])\r\n      setResultValues((resultValues) => ({\r\n        ...resultValues,\r\n        answers: [...resultValues.answers, answer],\r\n      }))\r\n      return onNewAnswer && onNewAnswer(answer)\r\n    }\r\n\r\n  const updateVariables = (newVariables: VariableWithUnknowValue[]) => {\r\n    const serializedNewVariables = newVariables.map((variable) => ({\r\n      ...variable,\r\n      value: safeStringify(variable.value),\r\n    }))\r\n\r\n    setResultValues((resultValues) => {\r\n      const updatedVariables = [\r\n        ...resultValues.variables.filter((v) =>\r\n          serializedNewVariables.every(\r\n            (variable) => variable.id !== v.id || variable.name !== v.name\r\n          )\r\n        ),\r\n        ...serializedNewVariables,\r\n      ].filter((variable) => isDefined(variable.value)) as VariableWithValue[]\r\n      if (onVariablesUpdated) onVariablesUpdated(updatedVariables)\r\n      return {\r\n        ...resultValues,\r\n        variables: updatedVariables,\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <answersContext.Provider\r\n      value={{\r\n        resultId,\r\n        resultValues,\r\n        addAnswer,\r\n        updateVariables,\r\n      }}\r\n    >\r\n      {children}\r\n    </answersContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useAnswers = () => useContext(answersContext)\r\n","import { Avatar } from '@/components/avatars/Avatar'\r\nimport React, { useState } from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\n\r\ninterface Props {\r\n  message: string\r\n  showAvatar: boolean\r\n  avatarSrc?: string\r\n}\r\n\r\nexport const GuestBubble = ({\r\n  message,\r\n  showAvatar,\r\n  avatarSrc,\r\n}: Props): JSX.Element => {\r\n  const [content] = useState(message)\r\n\r\n  return (\r\n    <CSSTransition classNames=\"bubble\" timeout={1000}>\r\n      <div\r\n        className=\"flex justify-end mb-2 items-end\"\r\n        style={{ marginLeft: '50px' }}\r\n      >\r\n        <span\r\n          className=\"px-4 py-2 rounded-lg mr-2 whitespace-pre-wrap max-w-full typebot-guest-bubble cursor-pointer\"\r\n          data-testid=\"guest-bubble\"\r\n        >\r\n          {content}\r\n        </span>\r\n        {showAvatar && <Avatar avatarSrc={avatarSrc} />}\r\n      </div>\r\n    </CSSTransition>\r\n  )\r\n}\r\n","import { Log } from '@typebot.io/prisma'\r\n\r\nexport const sanitizeUrl = (url: string): string =>\r\n  url.startsWith('http') ||\r\n  url.startsWith('mailto:') ||\r\n  url.startsWith('tel:') ||\r\n  url.startsWith('sms:')\r\n    ? url\r\n    : `https://${url}`\r\n\r\nexport const isMobile =\r\n  typeof window !== 'undefined' &&\r\n  window.matchMedia('only screen and (max-width: 760px)').matches\r\n\r\nexport const isEmbedded =\r\n  typeof window !== 'undefined' &&\r\n  window.parent &&\r\n  window.location !== window.top?.location\r\n\r\nexport const parseLog = (\r\n  error: Error | undefined,\r\n  successMessage: string,\r\n  errorMessage: string\r\n): Omit<Log, 'id' | 'createdAt' | 'resultId'> => ({\r\n  status: error ? 'error' : 'success',\r\n  description: error ? errorMessage : successMessage,\r\n  details: (error && JSON.stringify(error, null, 2).substring(0, 1000)) ?? null,\r\n})\r\n","import { isMobile } from '@/utils/helpers'\r\nimport React from 'react'\r\n\r\ntype ShortTextInputProps = {\r\n  onChange: (value: string) => void\r\n} & Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange'>\r\n\r\nexport const ShortTextInput = React.forwardRef(function ShortTextInput(\r\n  { onChange, ...props }: ShortTextInputProps,\r\n  ref: React.ForwardedRef<HTMLInputElement>\r\n) {\r\n  return (\r\n    <input\r\n      ref={ref}\r\n      className=\"focus:outline-none bg-transparent px-4 py-4 flex-1 w-full text-input\"\r\n      type=\"text\"\r\n      style={{ fontSize: '16px' }}\r\n      autoFocus={!isMobile}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\n","import React from 'react'\r\n\r\nexport const SendIcon = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    viewBox=\"0 0 512 512\"\r\n    width=\"19px\"\r\n    color=\"white\"\r\n    {...props}\r\n  >\r\n    <path d=\"M476.59 227.05l-.16-.07L49.35 49.84A23.56 23.56 0 0027.14 52 24.65 24.65 0 0016 72.59v113.29a24 24 0 0019.52 23.57l232.93 43.07a4 4 0 010 7.86L35.53 303.45A24 24 0 0016 327v113.31A23.57 23.57 0 0026.59 460a23.94 23.94 0 0013.22 4 24.55 24.55 0 009.52-1.93L476.4 285.94l.19-.09a32 32 0 000-58.8z\" />\r\n  </svg>\r\n)\r\n","import React, { SVGProps } from 'react'\r\nimport { SendIcon } from './icons'\r\n\r\ntype SendButtonProps = {\r\n  label: string\r\n  isDisabled?: boolean\r\n  isLoading?: boolean\r\n  disableIcon?: boolean\r\n} & React.ButtonHTMLAttributes<HTMLButtonElement>\r\n\r\nexport const SendButton = ({\r\n  label,\r\n  isDisabled,\r\n  isLoading,\r\n  disableIcon,\r\n  ...props\r\n}: SendButtonProps) => {\r\n  return (\r\n    <button\r\n      type=\"submit\"\r\n      disabled={isDisabled || isLoading}\r\n      {...props}\r\n      className={\r\n        'py-2 px-4 justify-center font-semibold rounded-md text-white focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 typebot-button ' +\r\n        props.className\r\n      }\r\n    >\r\n      {isLoading && <Spinner className=\"text-white\" />}\r\n      <span className={'xs:flex ' + (disableIcon ? '' : 'hidden')}>\r\n        {label}\r\n      </span>\r\n      <SendIcon\r\n        className={'send-icon flex ' + (disableIcon ? 'hidden' : 'xs:hidden')}\r\n      />\r\n    </button>\r\n  )\r\n}\r\n\r\nexport const Spinner = (props: SVGProps<SVGSVGElement>) => (\r\n  <svg\r\n    {...props}\r\n    className={'animate-spin -ml-1 mr-3 h-5 w-5 ' + props.className}\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    fill=\"none\"\r\n    viewBox=\"0 0 24 24\"\r\n    data-testid=\"loading-spinner\"\r\n  >\r\n    <circle\r\n      className=\"opacity-25\"\r\n      cx=\"12\"\r\n      cy=\"12\"\r\n      r=\"10\"\r\n      stroke=\"currentColor\"\r\n      strokeWidth=\"4\"\r\n    ></circle>\r\n    <path\r\n      className=\"opacity-75\"\r\n      fill=\"currentColor\"\r\n      d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n    ></path>\r\n  </svg>\r\n)\r\n","import { ShortTextInput } from '@/components/inputs/ShortTextInput'\r\nimport { SendButton } from '@/components/SendButton'\r\nimport { InputSubmitContent } from '@/types'\r\nimport { EmailInputBlock } from '@typebot.io/schemas'\r\nimport React, { MutableRefObject, useRef, useState } from 'react'\r\n\r\ntype EmailInputProps = {\r\n  block: EmailInputBlock\r\n  onSubmit: (value: InputSubmitContent) => void\r\n  defaultValue?: string\r\n  hasGuestAvatar: boolean\r\n}\r\n\r\nexport const EmailInput = ({\r\n  block,\r\n  onSubmit,\r\n  defaultValue,\r\n  hasGuestAvatar,\r\n}: EmailInputProps) => {\r\n  const [inputValue, setInputValue] = useState(defaultValue ?? '')\r\n  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement | null>(null)\r\n\r\n  const handleChange = (inputValue: string) => setInputValue(inputValue)\r\n\r\n  const checkIfInputIsValid = () =>\r\n    inputValue !== '' && inputRef.current?.reportValidity()\r\n\r\n  const submit = () => {\r\n    if (checkIfInputIsValid()) onSubmit({ value: inputValue })\r\n  }\r\n\r\n  const submitWhenEnter = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') submit()\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        'flex items-end justify-between rounded-lg pr-2 typebot-input w-full'\r\n      }\r\n      data-testid=\"input\"\r\n      style={{\r\n        marginRight: hasGuestAvatar ? '50px' : '0.5rem',\r\n        maxWidth: '350px',\r\n      }}\r\n      onKeyDown={submitWhenEnter}\r\n    >\r\n      <ShortTextInput\r\n        ref={inputRef as MutableRefObject<HTMLInputElement>}\r\n        value={inputValue}\r\n        placeholder={block.options?.labels?.placeholder ?? 'Type your email...'}\r\n        onChange={handleChange}\r\n        type=\"email\"\r\n        autoComplete=\"email\"\r\n      />\r\n      <SendButton\r\n        type=\"button\"\r\n        label={block.options?.labels?.button ?? 'Send'}\r\n        isDisabled={inputValue === ''}\r\n        className=\"my-2 ml-2\"\r\n        onClick={submit}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","const emailRegex =\r\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n\r\nexport const validateEmail = (email: string) => emailRegex.test(email)\r\n","import { SendButton } from '@/components/SendButton'\r\nimport { InputSubmitContent } from '@/types'\r\nimport { isMobile } from '@/utils/helpers'\r\nimport { PhoneNumberInputBlock } from '@typebot.io/schemas'\r\nimport React, { useRef, useState } from 'react'\r\nimport ReactPhoneNumberInput, { Value, Country } from 'react-phone-number-input'\r\n\r\ntype PhoneInputProps = {\r\n  block: PhoneNumberInputBlock\r\n  onSubmit: (value: InputSubmitContent) => void\r\n  defaultValue?: string\r\n  hasGuestAvatar: boolean\r\n}\r\n\r\nexport const PhoneInput = ({\r\n  block,\r\n  onSubmit,\r\n  defaultValue,\r\n  hasGuestAvatar,\r\n}: PhoneInputProps) => {\r\n  const [inputValue, setInputValue] = useState(defaultValue ?? '')\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const inputRef = useRef<any>(null)\r\n\r\n  const handleChange = (inputValue: Value | undefined) =>\r\n    setInputValue(inputValue as string)\r\n\r\n  const checkIfInputIsValid = () =>\r\n    inputValue !== '' && inputRef.current?.reportValidity()\r\n\r\n  const submit = () => {\r\n    if (checkIfInputIsValid()) onSubmit({ value: inputValue })\r\n  }\r\n\r\n  const submitWhenEnter = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') submit()\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        'flex items-end justify-between rounded-lg pr-2 typebot-input w-full'\r\n      }\r\n      data-testid=\"input\"\r\n      style={{\r\n        marginRight: hasGuestAvatar ? '50px' : '0.5rem',\r\n        maxWidth: '350px',\r\n      }}\r\n      onKeyDown={submitWhenEnter}\r\n    >\r\n      <ReactPhoneNumberInput\r\n        ref={inputRef}\r\n        value={inputValue}\r\n        onChange={handleChange}\r\n        placeholder={block.options.labels.placeholder ?? 'Your phone number...'}\r\n        defaultCountry={block.options.defaultCountryCode as Country}\r\n        autoFocus={!isMobile}\r\n      />\r\n      <SendButton\r\n        type=\"button\"\r\n        label={block.options?.labels?.button ?? 'Send'}\r\n        isDisabled={inputValue === ''}\r\n        className=\"my-2 ml-2\"\r\n        onClick={submit}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import { isPossiblePhoneNumber } from 'react-phone-number-input'\r\n\r\nexport const validatePhoneNumber = (phoneNumber: string) =>\r\n  isPossiblePhoneNumber(phoneNumber)\r\n","import { ShortTextInput } from '@/components/inputs/ShortTextInput'\r\nimport { SendButton } from '@/components/SendButton'\r\nimport { InputSubmitContent } from '@/types'\r\nimport { UrlInputBlock } from '@typebot.io/schemas'\r\nimport React, { MutableRefObject, useRef, useState } from 'react'\r\n\r\ntype UrlInputProps = {\r\n  block: UrlInputBlock\r\n  onSubmit: (value: InputSubmitContent) => void\r\n  defaultValue?: string\r\n  hasGuestAvatar: boolean\r\n}\r\n\r\nexport const UrlInput = ({\r\n  block,\r\n  onSubmit,\r\n  defaultValue,\r\n  hasGuestAvatar,\r\n}: UrlInputProps) => {\r\n  const [inputValue, setInputValue] = useState(defaultValue ?? '')\r\n  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement | null>(null)\r\n\r\n  const handleChange = (inputValue: string) => {\r\n    if (!inputValue.startsWith('https://'))\r\n      return inputValue === 'https:/'\r\n        ? undefined\r\n        : setInputValue(`https://${inputValue}`)\r\n    setInputValue(inputValue)\r\n  }\r\n\r\n  const checkIfInputIsValid = () =>\r\n    inputValue !== '' && inputRef.current?.reportValidity()\r\n\r\n  const submit = () => {\r\n    if (checkIfInputIsValid()) onSubmit({ value: inputValue })\r\n  }\r\n\r\n  const submitWhenEnter = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') submit()\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        'flex items-end justify-between rounded-lg pr-2 typebot-input w-full'\r\n      }\r\n      data-testid=\"input\"\r\n      style={{\r\n        marginRight: hasGuestAvatar ? '50px' : '0.5rem',\r\n        maxWidth: '350px',\r\n      }}\r\n      onKeyDown={submitWhenEnter}\r\n    >\r\n      <ShortTextInput\r\n        ref={inputRef as MutableRefObject<HTMLInputElement>}\r\n        value={inputValue}\r\n        placeholder={block.options?.labels?.placeholder ?? 'Type your URL...'}\r\n        onChange={handleChange}\r\n        type=\"url\"\r\n        autoComplete=\"url\"\r\n      />\r\n      <SendButton\r\n        type=\"button\"\r\n        label={block.options?.labels?.button ?? 'Send'}\r\n        isDisabled={inputValue === ''}\r\n        className=\"my-2 ml-2\"\r\n        onClick={submit}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","const urlRegex =\r\n  /^(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})$/\r\n\r\nexport const validateUrl = (url: string) => urlRegex.test(url)\r\n","import { validateEmail } from '@/features/blocks/inputs/email'\r\nimport { validatePhoneNumber } from '@/features/blocks/inputs/phone'\r\nimport { validateUrl } from '@/features/blocks/inputs/url'\r\nimport { parseVariables } from '@/features/variables'\r\nimport {\r\n  BubbleBlock,\r\n  BubbleBlockType,\r\n  Edge,\r\n  EmailInputBlock,\r\n  InputBlockType,\r\n  PhoneNumberInputBlock,\r\n  Block,\r\n  UrlInputBlock,\r\n  Variable,\r\n} from '@typebot.io/schemas'\r\nimport { isInputBlock } from '@typebot.io/lib'\r\n\r\nexport const isInputValid = (\r\n  inputValue: string,\r\n  type: InputBlockType\r\n): boolean => {\r\n  switch (type) {\r\n    case InputBlockType.EMAIL:\r\n      return validateEmail(inputValue)\r\n    case InputBlockType.PHONE:\r\n      return validatePhoneNumber(inputValue)\r\n    case InputBlockType.URL:\r\n      return validateUrl(inputValue)\r\n  }\r\n  return true\r\n}\r\n\r\nexport const blockCanBeRetried = (\r\n  block: Block\r\n): block is EmailInputBlock | UrlInputBlock | PhoneNumberInputBlock =>\r\n  isInputBlock(block) && 'retryMessageContent' in block.options\r\n\r\nexport const parseRetryBlock = (\r\n  block: EmailInputBlock | UrlInputBlock | PhoneNumberInputBlock,\r\n  variables: Variable[],\r\n  createEdge: (edge: Edge) => void\r\n): BubbleBlock => {\r\n  const content = parseVariables(variables)(block.options.retryMessageContent)\r\n  const newBlockId = block.id + Math.random() * 1000\r\n  const newEdge: Edge = {\r\n    id: (Math.random() * 1000).toString(),\r\n    from: { blockId: newBlockId, groupId: block.groupId },\r\n    to: { groupId: block.groupId, blockId: block.id },\r\n  }\r\n  createEdge(newEdge)\r\n  return {\r\n    groupId: block.groupId,\r\n    id: newBlockId,\r\n    type: BubbleBlockType.TEXT,\r\n    content: {\r\n      html: `<div>${content}</div>`,\r\n      richText: [],\r\n      plainText: content,\r\n    },\r\n    outgoingEdgeId: newEdge.id,\r\n  }\r\n}\r\n","import { isMobile } from '@/utils/helpers'\r\nimport React from 'react'\r\n\r\ntype TextareaProps = {\r\n  onChange: (value: string) => void\r\n} & Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'onChange'>\r\n\r\nexport const Textarea = React.forwardRef(function Textarea(\r\n  { onChange, ...props }: TextareaProps,\r\n  ref: React.ForwardedRef<HTMLTextAreaElement>\r\n) {\r\n  return (\r\n    <textarea\r\n      ref={ref}\r\n      className=\"focus:outline-none bg-transparent px-4 py-4 flex-1 w-full text-input\"\r\n      rows={6}\r\n      data-testid=\"textarea\"\r\n      required\r\n      style={{ fontSize: '16px' }}\r\n      autoFocus={!isMobile}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\n","import { ShortTextInput } from '@/components/inputs/ShortTextInput'\r\nimport { Textarea } from '@/components/inputs/Textarea'\r\nimport { SendButton } from '@/components/SendButton'\r\nimport { InputSubmitContent } from '@/types'\r\nimport { TextInputBlock } from '@typebot.io/schemas'\r\nimport React, { MutableRefObject, useRef, useState } from 'react'\r\n\r\ntype TextInputProps = {\r\n  block: TextInputBlock\r\n  onSubmit: (value: InputSubmitContent) => void\r\n  defaultValue: string | undefined\r\n  hasGuestAvatar: boolean\r\n}\r\n\r\nexport const TextInput = ({\r\n  block,\r\n  onSubmit,\r\n  defaultValue,\r\n  hasGuestAvatar,\r\n}: TextInputProps) => {\r\n  const [inputValue, setInputValue] = useState(defaultValue ?? '')\r\n  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement | null>(null)\r\n\r\n  const isLongText = block.options?.isLong\r\n\r\n  const handleChange = (inputValue: string) => setInputValue(inputValue)\r\n\r\n  const checkIfInputIsValid = () =>\r\n    inputValue !== '' && inputRef.current?.reportValidity()\r\n\r\n  const submit = () => {\r\n    if (checkIfInputIsValid()) onSubmit({ value: inputValue })\r\n  }\r\n\r\n  const submitWhenEnter = (e: React.KeyboardEvent) => {\r\n    if (isLongText) return\r\n    if (e.key === 'Enter') submit()\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        'flex items-end justify-between rounded-lg pr-2 typebot-input w-full'\r\n      }\r\n      data-testid=\"input\"\r\n      style={{\r\n        marginRight: hasGuestAvatar ? '50px' : '0.5rem',\r\n        maxWidth: isLongText ? undefined : '350px',\r\n      }}\r\n      onKeyDown={submitWhenEnter}\r\n    >\r\n      {isLongText ? (\r\n        <Textarea\r\n          ref={inputRef as MutableRefObject<HTMLTextAreaElement>}\r\n          onChange={handleChange}\r\n          value={inputValue}\r\n          placeholder={\r\n            block.options?.labels?.placeholder ?? 'Type your answer...'\r\n          }\r\n        />\r\n      ) : (\r\n        <ShortTextInput\r\n          ref={inputRef as MutableRefObject<HTMLInputElement>}\r\n          onChange={handleChange}\r\n          value={inputValue}\r\n          placeholder={\r\n            block.options?.labels?.placeholder ?? 'Type your answer...'\r\n          }\r\n        />\r\n      )}\r\n      <SendButton\r\n        type=\"button\"\r\n        label={block.options?.labels?.button ?? 'Send'}\r\n        isDisabled={inputValue === ''}\r\n        className=\"my-2 ml-2\"\r\n        onClick={submit}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import { ShortTextInput } from '@/components/inputs/ShortTextInput'\r\nimport { SendButton } from '@/components/SendButton'\r\nimport { InputSubmitContent } from '@/types'\r\nimport { NumberInputBlock } from '@typebot.io/schemas'\r\nimport React, { MutableRefObject, useRef, useState } from 'react'\r\n\r\ntype NumberInputProps = {\r\n  block: NumberInputBlock\r\n  onSubmit: (value: InputSubmitContent) => void\r\n  defaultValue?: string\r\n  hasGuestAvatar: boolean\r\n}\r\n\r\nexport const NumberInput = ({\r\n  block,\r\n  onSubmit,\r\n  defaultValue,\r\n  hasGuestAvatar,\r\n}: NumberInputProps) => {\r\n  const [inputValue, setInputValue] = useState(defaultValue ?? '')\r\n  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement | null>(null)\r\n\r\n  const handleChange = (inputValue: string) => setInputValue(inputValue)\r\n\r\n  const checkIfInputIsValid = () =>\r\n    inputValue !== '' && inputRef.current?.reportValidity()\r\n\r\n  const submit = () => {\r\n    if (checkIfInputIsValid()) onSubmit({ value: inputValue })\r\n  }\r\n\r\n  const submitWhenEnter = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') submit()\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        'flex items-end justify-between rounded-lg pr-2 typebot-input w-full'\r\n      }\r\n      data-testid=\"input\"\r\n      style={{\r\n        marginRight: hasGuestAvatar ? '50px' : '0.5rem',\r\n        maxWidth: '350px',\r\n      }}\r\n      onKeyDown={submitWhenEnter}\r\n    >\r\n      <ShortTextInput\r\n        ref={inputRef as MutableRefObject<HTMLInputElement>}\r\n        value={inputValue}\r\n        placeholder={\r\n          block.options?.labels?.placeholder ?? 'Type your answer...'\r\n        }\r\n        onChange={handleChange}\r\n        type=\"number\"\r\n        style={{ appearance: 'auto' }}\r\n        min={block.options?.min}\r\n        max={block.options?.max}\r\n        step={block.options?.step ?? 'any'}\r\n      />\r\n      <SendButton\r\n        type=\"button\"\r\n        label={block.options?.labels?.button ?? 'Send'}\r\n        isDisabled={inputValue === ''}\r\n        className=\"my-2 ml-2\"\r\n        onClick={submit}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import { SendButton } from '@/components/SendButton'\r\nimport { InputSubmitContent } from '@/types'\r\nimport { DateInputOptions } from '@typebot.io/schemas'\r\nimport { useState } from 'react'\r\nimport { parseReadableDate } from '../utils/parseReadableDate'\r\n\r\ntype DateInputProps = {\r\n  onSubmit: (inputValue: InputSubmitContent) => void\r\n  options?: DateInputOptions\r\n}\r\n\r\nexport const DateForm = ({\r\n  onSubmit,\r\n  options,\r\n}: DateInputProps): JSX.Element => {\r\n  const { hasTime, isRange, labels } = options ?? {}\r\n  const [inputValues, setInputValues] = useState({ from: '', to: '' })\r\n  return (\r\n    <div className=\"flex flex-col w-full lg:w-4/6\">\r\n      <div className=\"flex items-center\">\r\n        <form\r\n          className={\r\n            'flex justify-between rounded-lg typebot-input pr-2 items-end'\r\n          }\r\n          onSubmit={(e) => {\r\n            if (inputValues.from === '' && inputValues.to === '') return\r\n            e.preventDefault()\r\n            onSubmit({\r\n              value: `${inputValues.from}${\r\n                isRange ? ` to ${inputValues.to}` : ''\r\n              }`,\r\n              label: parseReadableDate({ ...inputValues, hasTime, isRange }),\r\n            })\r\n          }}\r\n        >\r\n          <div className=\"flex flex-col\">\r\n            <div className={'flex items-center p-4 ' + (isRange ? 'pb-0' : '')}>\r\n              {isRange && (\r\n                <p className=\"font-semibold mr-2\">{labels?.from ?? 'From:'}</p>\r\n              )}\r\n              <input\r\n                className=\"focus:outline-none flex-1 w-full text-input\"\r\n                style={{\r\n                  minHeight: '2rem',\r\n                  minWidth: '100px',\r\n                  fontSize: '16px',\r\n                }}\r\n                type={hasTime ? 'datetime-local' : 'date'}\r\n                onChange={(e) =>\r\n                  setInputValues({ ...inputValues, from: e.target.value })\r\n                }\r\n                data-testid=\"from-date\"\r\n              />\r\n            </div>\r\n            {isRange && (\r\n              <div className=\"flex items-center p-4\">\r\n                {isRange && (\r\n                  <p className=\"font-semibold\">{labels?.to ?? 'To:'}</p>\r\n                )}\r\n                <input\r\n                  className=\"focus:outline-none flex-1 w-full text-input ml-2\"\r\n                  style={{\r\n                    minHeight: '2rem',\r\n                    minWidth: '100px',\r\n                    fontSize: '16px',\r\n                  }}\r\n                  type={hasTime ? 'datetime-local' : 'date'}\r\n                  onChange={(e) =>\r\n                    setInputValues({ ...inputValues, to: e.target.value })\r\n                  }\r\n                  data-testid=\"to-date\"\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <SendButton\r\n            label={labels?.button ?? 'Send'}\r\n            isDisabled={inputValues.to === '' && inputValues.from === ''}\r\n            className=\"my-2 ml-2\"\r\n          />\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","export const parseReadableDate = ({\r\n  from,\r\n  to,\r\n  hasTime,\r\n  isRange,\r\n}: {\r\n  from: string\r\n  to: string\r\n  hasTime?: boolean\r\n  isRange?: boolean\r\n}) => {\r\n  const currentLocale = window.navigator.language\r\n  const formatOptions: Intl.DateTimeFormatOptions = {\r\n    day: '2-digit',\r\n    month: '2-digit',\r\n    year: 'numeric',\r\n    hour: hasTime ? '2-digit' : undefined,\r\n    minute: hasTime ? '2-digit' : undefined,\r\n  }\r\n  const fromReadable = new Date(\r\n    hasTime ? from : from.replace(/-/g, '/')\r\n  ).toLocaleString(currentLocale, formatOptions)\r\n  const toReadable = new Date(\r\n    hasTime ? to : to.replace(/-/g, '/')\r\n  ).toLocaleString(currentLocale, formatOptions)\r\n  return `${fromReadable}${isRange ? ` to ${toReadable}` : ''}`\r\n}\r\n","import { parseVariables } from '@/features/variables'\r\nimport { useAnswers } from '@/providers/AnswersProvider'\r\nimport { useTypebot } from '@/providers/TypebotProvider'\r\nimport { InputSubmitContent } from '@/types'\r\nimport { ChoiceInputBlock } from '@typebot.io/schemas'\r\nimport React, { useState } from 'react'\r\nimport { SendButton } from '../../../../../components/SendButton'\r\n\r\ntype ChoiceFormProps = {\r\n  block: ChoiceInputBlock\r\n  onSubmit: (value: InputSubmitContent) => void\r\n}\r\n\r\nexport const ChoiceForm = ({ block, onSubmit }: ChoiceFormProps) => {\r\n  const {\r\n    typebot: { variables },\r\n  } = useTypebot()\r\n  const { resultValues } = useAnswers()\r\n  const [selectedIndices, setSelectedIndices] = useState<number[]>([])\r\n\r\n  const handleClick = (itemIndex: number) => (e: React.MouseEvent) => {\r\n    e.preventDefault()\r\n    if (block.options?.isMultipleChoice) toggleSelectedItemIndex(itemIndex)\r\n    else\r\n      onSubmit({\r\n        value: parseVariables(variables)(block.items[itemIndex].content),\r\n        itemId: block.items[itemIndex].id,\r\n      })\r\n  }\r\n\r\n  const toggleSelectedItemIndex = (itemIndex: number) => {\r\n    const existingIndex = selectedIndices.indexOf(itemIndex)\r\n    if (existingIndex !== -1) {\r\n      selectedIndices.splice(existingIndex, 1)\r\n      setSelectedIndices([...selectedIndices])\r\n    } else {\r\n      setSelectedIndices([...selectedIndices, itemIndex])\r\n    }\r\n  }\r\n\r\n  const handleSubmit = () =>\r\n    onSubmit({\r\n      value: selectedIndices\r\n        .map((itemIndex) =>\r\n          parseVariables(variables)(block.items[itemIndex].content)\r\n        )\r\n        .join(', '),\r\n    })\r\n\r\n  const isUniqueFirstButton =\r\n    resultValues &&\r\n    resultValues.answers.length === 0 &&\r\n    block.items.length === 1\r\n\r\n  return (\r\n    <form className=\"flex flex-col items-end\" onSubmit={handleSubmit}>\r\n      <div className=\"flex flex-wrap justify-end\">\r\n        {block.items.map((item, idx) => (\r\n          <span key={item.id} className=\"relative inline-flex ml-2 mb-2\">\r\n            <button\r\n              role={block.options?.isMultipleChoice ? 'checkbox' : 'button'}\r\n              onClick={handleClick(idx)}\r\n              className={\r\n                'py-2 px-4 text-left font-semibold rounded-md transition-all filter hover:brightness-90 active:brightness-75 duration-100 focus:outline-none typebot-button ' +\r\n                (selectedIndices.includes(idx) ||\r\n                !block.options?.isMultipleChoice\r\n                  ? ''\r\n                  : 'selectable')\r\n              }\r\n              data-testid=\"button\"\r\n              data-itemid={item.id}\r\n            >\r\n              {parseVariables(variables)(item.content)}\r\n            </button>\r\n            {isUniqueFirstButton && (\r\n              <span className=\"flex h-3 w-3 absolute top-0 right-0 -mt-1 -mr-1 ping\">\r\n                <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full brightness-225 opacity-75\" />\r\n                <span className=\"relative inline-flex rounded-full h-3 w-3 brightness-200\" />\r\n              </span>\r\n            )}\r\n          </span>\r\n        ))}\r\n      </div>\r\n      <div className=\"flex\">\r\n        {selectedIndices.length > 0 && (\r\n          <SendButton\r\n            label={block.options?.buttonLabel ?? 'Send'}\r\n            disableIcon\r\n          />\r\n        )}\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n","import React, { FormEvent, useEffect, useState } from 'react'\r\nimport { useStripe, useElements, PaymentElement } from '@stripe/react-stripe-js'\r\nimport { Elements } from '@stripe/react-stripe-js'\r\nimport { PaymentInputOptions, Variable } from '@typebot.io/schemas'\r\nimport { SendButton, Spinner } from '@/components/SendButton'\r\nimport { initStripe } from '@/lib/stripe'\r\nimport { parseVariables } from '@/features/variables'\r\nimport { useChat } from '@/providers/ChatProvider'\r\nimport { useTypebot } from '@/providers/TypebotProvider'\r\nimport { createPaymentIntentQuery } from '../../queries/createPaymentIntentQuery'\r\nimport { Stripe } from '@stripe/stripe-js'\r\n\r\ntype Props = {\r\n  options: PaymentInputOptions\r\n  onSuccess: () => void\r\n}\r\n\r\nexport const StripePaymentForm = ({ options, onSuccess }: Props) => {\r\n  const {\r\n    apiHost,\r\n    isPreview,\r\n    typebot: { variables },\r\n    onNewLog,\r\n  } = useTypebot()\r\n  const [stripe, setStripe] = useState<Stripe | null>(null)\r\n  const [clientSecret, setClientSecret] = useState('')\r\n  const [amountLabel, setAmountLabel] = useState('')\r\n\r\n  useEffect(() => {\r\n    ;(async () => {\r\n      const { data, error } = await createPaymentIntentQuery({\r\n        apiHost,\r\n        isPreview,\r\n        variables,\r\n        inputOptions: options,\r\n      })\r\n      if (error)\r\n        return onNewLog({\r\n          status: 'error',\r\n          description: error.name + ' ' + error.message,\r\n          details: error.message,\r\n        })\r\n      if (!data || !document) return\r\n      await initStripe(document)\r\n      if (!window?.Stripe) return\r\n      setStripe(window.Stripe(data.publicKey))\r\n      setClientSecret(data.clientSecret)\r\n      setAmountLabel(data.amountLabel)\r\n    })()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  if (!stripe || !clientSecret) return <Spinner className=\"text-blue-500\" />\r\n  return (\r\n    <Elements stripe={stripe} options={{ clientSecret }}>\r\n      <CheckoutForm\r\n        onSuccess={onSuccess}\r\n        clientSecret={clientSecret}\r\n        amountLabel={amountLabel}\r\n        options={options}\r\n        variables={variables}\r\n        viewerHost={apiHost}\r\n      />\r\n    </Elements>\r\n  )\r\n}\r\n\r\nconst CheckoutForm = ({\r\n  onSuccess,\r\n  clientSecret,\r\n  amountLabel,\r\n  options,\r\n  variables,\r\n  viewerHost,\r\n}: {\r\n  onSuccess: () => void\r\n  clientSecret: string\r\n  amountLabel: string\r\n  options: PaymentInputOptions\r\n  variables: Variable[]\r\n  viewerHost: string\r\n}) => {\r\n  const { scroll } = useChat()\r\n  const [ignoreFirstPaymentIntentCall, setIgnoreFirstPaymentIntentCall] =\r\n    useState(true)\r\n\r\n  const stripe = useStripe()\r\n  const elements = useElements()\r\n\r\n  const [message, setMessage] = useState<string>()\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const [isPayButtonVisible, setIsPayButtonVisible] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!stripe || !clientSecret) return\r\n\r\n    if (ignoreFirstPaymentIntentCall)\r\n      return setIgnoreFirstPaymentIntentCall(false)\r\n\r\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n      switch (paymentIntent?.status) {\r\n        case 'succeeded':\r\n          setMessage('Payment succeeded!')\r\n          break\r\n        case 'processing':\r\n          setMessage('Your payment is processing.')\r\n          break\r\n        case 'requires_payment_method':\r\n          setMessage('Your payment was not successful, please try again.')\r\n          break\r\n        default:\r\n          setMessage('Something went wrong.')\r\n          break\r\n      }\r\n    })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [stripe, clientSecret])\r\n\r\n  const handleSubmit = async (e: FormEvent) => {\r\n    e.preventDefault()\r\n\r\n    if (!stripe || !elements) return\r\n\r\n    setIsLoading(true)\r\n\r\n    const { error, paymentIntent } = await stripe.confirmPayment({\r\n      elements,\r\n      confirmParams: {\r\n        // TO-DO: Handle redirection correctly.\r\n        return_url: viewerHost,\r\n        payment_method_data: {\r\n          billing_details: {\r\n            name: options.additionalInformation?.name\r\n              ? parseVariables(variables)(options.additionalInformation?.name)\r\n              : undefined,\r\n            email: options.additionalInformation?.email\r\n              ? parseVariables(variables)(options.additionalInformation?.email)\r\n              : undefined,\r\n            phone: options.additionalInformation?.phoneNumber\r\n              ? parseVariables(variables)(\r\n                  options.additionalInformation?.phoneNumber\r\n                )\r\n              : undefined,\r\n          },\r\n        },\r\n      },\r\n      redirect: 'if_required',\r\n    })\r\n\r\n    setIsLoading(false)\r\n    if (error?.type === 'validation_error') return\r\n    if (error?.type === 'card_error') return setMessage(error.message)\r\n    if (!error && paymentIntent.status === 'succeeded') return onSuccess()\r\n  }\r\n\r\n  const showPayButton = () => {\r\n    setIsPayButtonVisible(true)\r\n    scroll()\r\n  }\r\n\r\n  return (\r\n    <form\r\n      id=\"payment-form\"\r\n      onSubmit={handleSubmit}\r\n      className=\"flex flex-col rounded-lg p-4 typebot-input w-full items-center\"\r\n    >\r\n      <PaymentElement\r\n        id=\"payment-element\"\r\n        className=\"w-full\"\r\n        onReady={showPayButton}\r\n      />\r\n      {isPayButtonVisible && (\r\n        <SendButton\r\n          label={`${options.labels.button} ${amountLabel}`}\r\n          isDisabled={isLoading || !stripe || !elements}\r\n          isLoading={isLoading}\r\n          className=\"mt-4 w-full max-w-lg\"\r\n          disableIcon\r\n        />\r\n      )}\r\n\r\n      {message && (\r\n        <div\r\n          id=\"payment-message\"\r\n          className=\"typebot-input-error-message mt-4 text-center\"\r\n        >\r\n          {message}\r\n        </div>\r\n      )}\r\n    </form>\r\n  )\r\n}\r\n","export const initStripe = (document: Document): Promise<void> =>\r\n  new Promise((resolve) => {\r\n    const existingScript = document.getElementById('stripe-script')\r\n    if (existingScript) return resolve()\r\n    const script = document.createElement('script')\r\n    script.src = 'https://js.stripe.com/v3'\r\n    script.id = 'stripe-script'\r\n    document.body.appendChild(script)\r\n    script.onload = () => {\r\n      resolve()\r\n    }\r\n  })\r\n","import React, { createContext, ReactNode, useContext } from 'react'\r\n\r\nconst chatContext = createContext<{\r\n  scroll: () => void\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  //@ts-ignore\r\n}>({})\r\n\r\nexport const ChatProvider = ({\r\n  children,\r\n  onScroll,\r\n}: {\r\n  children: ReactNode\r\n  onScroll: () => void\r\n}) => {\r\n  const scroll = onScroll\r\n  return (\r\n    <chatContext.Provider\r\n      value={{\r\n        scroll,\r\n      }}\r\n    >\r\n      {children}\r\n    </chatContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useChat = () => useContext(chatContext)\r\n","import { PaymentInputOptions, Variable } from '@typebot.io/schemas'\r\nimport { sendRequest } from '@typebot.io/lib'\r\n\r\nexport const createPaymentIntentQuery = ({\r\n  apiHost,\r\n  isPreview,\r\n  inputOptions,\r\n  variables,\r\n}: {\r\n  inputOptions: PaymentInputOptions\r\n  apiHost: string\r\n  variables: Variable[]\r\n  isPreview: boolean\r\n}) =>\r\n  sendRequest<{ clientSecret: string; publicKey: string; amountLabel: string }>(\r\n    {\r\n      url: `${apiHost}/api/integrations/stripe/createPaymentIntent`,\r\n      method: 'POST',\r\n      body: { inputOptions, isPreview, variables },\r\n    }\r\n  )\r\n","import { PaymentInputOptions, PaymentProvider } from '@typebot.io/schemas'\r\nimport React from 'react'\r\nimport { StripePaymentForm } from './StripePaymentForm'\r\n\r\ntype Props = {\r\n  onSuccess: () => void\r\n  options: PaymentInputOptions\r\n}\r\n\r\nexport const PaymentForm = ({ onSuccess, options }: Props): JSX.Element => {\r\n  switch (options.provider) {\r\n    case PaymentProvider.STRIPE:\r\n      return <StripePaymentForm onSuccess={onSuccess} options={options} />\r\n  }\r\n}\r\n","import { InputSubmitContent } from '@/types'\r\nimport { RatingInputOptions, RatingInputBlock } from '@typebot.io/schemas'\r\nimport React, { FormEvent, useState } from 'react'\r\nimport { isDefined, isEmpty, isNotDefined } from '@typebot.io/lib'\r\nimport { SendButton } from '../../../../../components/SendButton'\r\n\r\ntype Props = {\r\n  block: RatingInputBlock\r\n  onSubmit: (value: InputSubmitContent) => void\r\n}\r\n\r\nexport const RatingForm = ({ block, onSubmit }: Props) => {\r\n  const [rating, setRating] = useState<number>()\r\n\r\n  const handleSubmit = (e: FormEvent) => {\r\n    e.preventDefault()\r\n    if (isNotDefined(rating)) return\r\n    onSubmit({ value: rating.toString() })\r\n  }\r\n\r\n  const handleClick = (rating: number) => {\r\n    if (block.options.isOneClickSubmitEnabled)\r\n      onSubmit({ value: rating.toString() })\r\n    setRating(rating)\r\n  }\r\n\r\n  return (\r\n    <form className=\"flex flex-col\" onSubmit={handleSubmit}>\r\n      {block.options.labels.left && (\r\n        <span className=\"text-sm w-full mb-2 rating-label\">\r\n          {block.options.labels.left}\r\n        </span>\r\n      )}\r\n      <div className=\"flex flex-wrap justify-center\">\r\n        {Array.from(\r\n          Array(\r\n            block.options.length +\r\n              (block.options.buttonType === 'Numbers' ? 1 : 0)\r\n          )\r\n        ).map((_, idx) => (\r\n          <RatingButton\r\n            {...block.options}\r\n            key={idx}\r\n            rating={rating}\r\n            idx={idx + (block.options.buttonType === 'Numbers' ? 0 : 1)}\r\n            onClick={handleClick}\r\n          />\r\n        ))}\r\n      </div>\r\n      {block.options.labels.right && (\r\n        <span className=\"text-sm w-full text-right mb-2 pr-2 rating-label\">\r\n          {block.options.labels.right}\r\n        </span>\r\n      )}\r\n\r\n      <div className=\"flex justify-end mr-2\">\r\n        {isDefined(rating) && (\r\n          <SendButton\r\n            label={block.options?.labels.button ?? 'Send'}\r\n            disableIcon\r\n          />\r\n        )}\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst RatingButton = ({\r\n  rating,\r\n  idx,\r\n  buttonType,\r\n  customIcon,\r\n  onClick,\r\n}: Pick<RatingInputOptions, 'buttonType' | 'customIcon'> & {\r\n  rating: number | undefined\r\n  idx: number\r\n  onClick: (idx: number) => void\r\n}) => {\r\n  if (buttonType === 'Numbers')\r\n    return (\r\n      <button\r\n        onClick={(e) => {\r\n          e.preventDefault()\r\n          onClick(idx)\r\n        }}\r\n        className={\r\n          'py-2 px-4 mr-2 mb-2 text-left font-semibold rounded-md transition-all filter hover:brightness-90 active:brightness-75 duration-100 focus:outline-none typebot-button ' +\r\n          (isDefined(rating) && idx <= rating ? '' : 'selectable')\r\n        }\r\n      >\r\n        {idx}\r\n      </button>\r\n    )\r\n  return (\r\n    <div\r\n      className={\r\n        'flex justify-center items-center rating-icon-container cursor-pointer mr-2 mb-2 ' +\r\n        (isDefined(rating) && idx <= rating ? 'selected' : '')\r\n      }\r\n      onClick={() => onClick(idx)}\r\n      dangerouslySetInnerHTML={{\r\n        __html:\r\n          customIcon.isEnabled && !isEmpty(customIcon.svg)\r\n            ? customIcon.svg\r\n            : defaultIcon,\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nconst defaultIcon = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-star\"><polygon points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"></polygon></svg>`\r\n","import { Spinner, SendButton } from '@/components/SendButton'\r\nimport { useAnswers } from '@/providers/AnswersProvider'\r\nimport { useTypebot } from '@/providers/TypebotProvider'\r\nimport { InputSubmitContent } from '@/types'\r\nimport { defaultFileInputOptions, FileInputBlock } from '@typebot.io/schemas'\r\nimport React, { ChangeEvent, FormEvent, useState, DragEvent } from 'react'\r\nimport { uploadFiles } from '@typebot.io/lib'\r\n\r\ntype Props = {\r\n  block: FileInputBlock\r\n  onSubmit: (url: InputSubmitContent) => void\r\n  onSkip: () => void\r\n}\r\n\r\nexport const FileUploadForm = ({\r\n  block: {\r\n    id,\r\n    options: { isMultipleAllowed, labels, sizeLimit, isRequired },\r\n  },\r\n  onSubmit,\r\n  onSkip,\r\n}: Props) => {\r\n  const { isPreview, currentTypebotId } = useTypebot()\r\n  const { resultId } = useAnswers()\r\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([])\r\n  const [isUploading, setIsUploading] = useState(false)\r\n  const [uploadProgressPercent, setUploadProgressPercent] = useState(0)\r\n  const [isDraggingOver, setIsDraggingOver] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState<string>()\r\n\r\n  const handleFileChange = async (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (!e.target.files) return\r\n    onNewFiles(e.target.files)\r\n  }\r\n\r\n  const onNewFiles = (files: FileList) => {\r\n    setErrorMessage(undefined)\r\n    const newFiles = Array.from(files)\r\n    if (newFiles.some((file) => file.size > (sizeLimit ?? 10) * 1024 * 1024))\r\n      return setErrorMessage(`A file is larger than ${sizeLimit ?? 10}MB`)\r\n    if (!isMultipleAllowed && files) return startSingleFileUpload(newFiles[0])\r\n    setSelectedFiles([...selectedFiles, ...newFiles])\r\n  }\r\n\r\n  const handleSubmit = async (e: FormEvent) => {\r\n    e.preventDefault()\r\n    if (selectedFiles.length === 0) return\r\n    startFilesUpload(selectedFiles)\r\n  }\r\n\r\n  const startSingleFileUpload = async (file: File) => {\r\n    if (isPreview)\r\n      return onSubmit({\r\n        label: `File uploaded`,\r\n        value: 'http://fake-upload-url.com',\r\n      })\r\n    setIsUploading(true)\r\n    const urls = await uploadFiles({\r\n      basePath: `/api/typebots/${currentTypebotId}/blocks/${id}`,\r\n      files: [\r\n        {\r\n          file,\r\n          path: `public/results/${resultId}/${id}/${file.name}`,\r\n        },\r\n      ],\r\n    })\r\n    setIsUploading(false)\r\n    if (urls.length)\r\n      return onSubmit({ label: `File uploaded`, value: urls[0] ?? '' })\r\n    setErrorMessage('An error occured while uploading the file')\r\n  }\r\n  const startFilesUpload = async (files: File[]) => {\r\n    if (isPreview)\r\n      return onSubmit({\r\n        label: `${files.length} file${files.length > 1 ? 's' : ''} uploaded`,\r\n        value: files\r\n          .map((_, idx) => `http://fake-upload-url.com/${idx}`)\r\n          .join(', '),\r\n      })\r\n    setIsUploading(true)\r\n    const urls = await uploadFiles({\r\n      basePath: `/api/typebots/${currentTypebotId}/blocks/${id}`,\r\n      files: files.map((file) => ({\r\n        file: file,\r\n        path: `public/results/${resultId}/${id}/${file.name}`,\r\n      })),\r\n      onUploadProgress: setUploadProgressPercent,\r\n    })\r\n    setIsUploading(false)\r\n    setUploadProgressPercent(0)\r\n    if (urls.length !== files.length)\r\n      return setErrorMessage('An error occured while uploading the files')\r\n    onSubmit({\r\n      label: `${urls.length} file${urls.length > 1 ? 's' : ''} uploaded`,\r\n      value: urls.join(', '),\r\n    })\r\n  }\r\n\r\n  const handleDragOver = (e: DragEvent) => {\r\n    e.preventDefault()\r\n    setIsDraggingOver(true)\r\n  }\r\n\r\n  const handleDragLeave = () => setIsDraggingOver(false)\r\n\r\n  const handleDropFile = (e: DragEvent<HTMLLabelElement>) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    if (!e.dataTransfer.files) return\r\n    onNewFiles(e.dataTransfer.files)\r\n  }\r\n\r\n  const clearFiles = () => setSelectedFiles([])\r\n\r\n  return (\r\n    <form className=\"flex flex-col w-full\" onSubmit={handleSubmit}>\r\n      <label\r\n        htmlFor=\"dropzone-file\"\r\n        className={\r\n          'typebot-upload-input py-6 flex flex-col justify-center items-center w-full bg-gray-50 rounded-lg border-2 border-gray-300 border-dashed cursor-pointer hover:bg-gray-100 px-8 mb-2 ' +\r\n          (isDraggingOver ? 'dragging-over' : '')\r\n        }\r\n        onDragOver={handleDragOver}\r\n        onDragLeave={handleDragLeave}\r\n        onDrop={handleDropFile}\r\n      >\r\n        {isUploading ? (\r\n          <>\r\n            {selectedFiles.length === 1 ? (\r\n              <Spinner />\r\n            ) : (\r\n              <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n                <div\r\n                  className=\"upload-progress-bar h-2.5 rounded-full\"\r\n                  style={{\r\n                    width: `${\r\n                      uploadProgressPercent > 0 ? uploadProgressPercent : 10\r\n                    }%`,\r\n                    transition: 'width 150ms cubic-bezier(0.4, 0, 0.2, 1)',\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"flex flex-col justify-center items-center\">\r\n              {selectedFiles.length ? (\r\n                <span className=\"relative\">\r\n                  <FileIcon />\r\n                  <div\r\n                    className=\"total-files-indicator flex items-center justify-center absolute -right-1 rounded-full px-1 h-4\"\r\n                    style={{ bottom: '5px' }}\r\n                  >\r\n                    {selectedFiles.length}\r\n                  </div>\r\n                </span>\r\n              ) : (\r\n                <UploadIcon />\r\n              )}\r\n              <p\r\n                className=\"text-sm text-gray-500 text-center\"\r\n                dangerouslySetInnerHTML={{ __html: labels.placeholder }}\r\n              />\r\n            </div>\r\n            <input\r\n              id=\"dropzone-file\"\r\n              type=\"file\"\r\n              className=\"hidden\"\r\n              multiple={isMultipleAllowed}\r\n              onChange={handleFileChange}\r\n            />\r\n          </>\r\n        )}\r\n      </label>\r\n      {selectedFiles.length === 0 && isRequired === false && (\r\n        <div className=\"flex justify-end\">\r\n          <button\r\n            className={\r\n              'py-2 px-4 justify-center font-semibold rounded-md text-white focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 typebot-button '\r\n            }\r\n            onClick={onSkip}\r\n          >\r\n            {labels.skip ?? defaultFileInputOptions.labels.skip}\r\n          </button>\r\n        </div>\r\n      )}\r\n      {isMultipleAllowed && selectedFiles.length > 0 && !isUploading && (\r\n        <div className=\"flex justify-end\">\r\n          <div className=\"flex\">\r\n            {selectedFiles.length && (\r\n              <button\r\n                className={\r\n                  'secondary-button py-2 px-4 justify-center font-semibold rounded-md text-white focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 mr-2'\r\n                }\r\n                onClick={clearFiles}\r\n              >\r\n                {labels.clear ?? defaultFileInputOptions.labels.clear}\r\n              </button>\r\n            )}\r\n            <SendButton\r\n              type=\"submit\"\r\n              label={\r\n                labels.button === defaultFileInputOptions.labels.button\r\n                  ? `${labels.button} ${selectedFiles.length} file${\r\n                      selectedFiles.length > 1 ? 's' : ''\r\n                    }`\r\n                  : labels.button\r\n              }\r\n              disableIcon\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n      {errorMessage && <p className=\"text-red-500 text-sm\">{errorMessage}</p>}\r\n    </form>\r\n  )\r\n}\r\n\r\nconst UploadIcon = () => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className=\"mb-3\"\r\n  >\r\n    <polyline points=\"16 16 12 12 8 16\"></polyline>\r\n    <line x1=\"12\" y1=\"12\" x2=\"12\" y2=\"21\"></line>\r\n    <path d=\"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3\"></path>\r\n    <polyline points=\"16 16 12 12 8 16\"></polyline>\r\n  </svg>\r\n)\r\n\r\nconst FileIcon = () => (\r\n  <svg\r\n    className=\"mb-3\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n  >\r\n    <path d=\"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z\"></path>\r\n    <polyline points=\"13 2 13 9 20 9\"></polyline>\r\n  </svg>\r\n)\r\n","import { parseVariables } from '@/features/variables'\r\nimport { IntegrationState } from '@/types'\r\nimport {\r\n  WebhookBlock,\r\n  ZapierBlock,\r\n  MakeComBlock,\r\n  PabblyConnectBlock,\r\n  VariableWithUnknowValue,\r\n} from '@typebot.io/schemas'\r\nimport { stringify } from 'qs'\r\nimport { sendRequest, byId } from '@typebot.io/lib'\r\n\r\nexport const executeWebhook = async (\r\n  block: WebhookBlock | ZapierBlock | MakeComBlock | PabblyConnectBlock,\r\n  {\r\n    blockId,\r\n    variables,\r\n    updateVariableValue,\r\n    updateVariables,\r\n    typebotId,\r\n    apiHost,\r\n    resultValues,\r\n    onNewLog,\r\n    resultId,\r\n    parentTypebotIds,\r\n  }: IntegrationState\r\n) => {\r\n  const params = stringify({ resultId })\r\n  const { data, error } = await sendRequest({\r\n    url: `${apiHost}/api/typebots/${typebotId}/blocks/${blockId}/executeWebhook?${params}`,\r\n    method: 'POST',\r\n    body: {\r\n      variables,\r\n      resultValues,\r\n      parentTypebotIds,\r\n    },\r\n  })\r\n  const statusCode = (\r\n    data as Record<string, string> | undefined\r\n  )?.statusCode.toString()\r\n  const isError = statusCode\r\n    ? statusCode?.startsWith('4') || statusCode?.startsWith('5')\r\n    : true\r\n  onNewLog({\r\n    status: error ? 'error' : isError ? 'warning' : 'success',\r\n    description: isError\r\n      ? 'Webhook returned an error'\r\n      : 'Webhook successfuly executed',\r\n    details: JSON.stringify(error ?? data, null, 2).substring(0, 1000),\r\n  })\r\n  const newVariables = block.options.responseVariableMapping.reduce<\r\n    VariableWithUnknowValue[]\r\n  >((newVariables, varMapping) => {\r\n    if (!varMapping?.bodyPath || !varMapping.variableId) return newVariables\r\n    const existingVariable = variables.find(byId(varMapping.variableId))\r\n    if (!existingVariable) return newVariables\r\n    const func = Function(\r\n      'data',\r\n      `return data.${parseVariables(variables)(varMapping?.bodyPath)}`\r\n    )\r\n    try {\r\n      const value: unknown = func(data)\r\n      updateVariableValue(existingVariable?.id, value)\r\n      return [...newVariables, { ...existingVariable, value }]\r\n    } catch (err) {\r\n      return newVariables\r\n    }\r\n  }, [])\r\n  updateVariables(newVariables)\r\n  return block.outgoingEdgeId\r\n}\r\n","import { executeChatwootBlock } from '@/features/blocks/integrations/chatwoot'\r\nimport { executeGoogleAnalyticsBlock } from '@/features/blocks/integrations/googleAnalytics'\r\nimport { executeGoogleSheetBlock } from '@/features/blocks/integrations/googleSheets'\r\nimport { executeSendEmailBlock } from '@/features/blocks/integrations/sendEmail'\r\nimport { executeWebhook } from '@/features/blocks/integrations/webhook'\r\nimport { IntegrationState } from '@/types'\r\nimport { IntegrationBlock, IntegrationBlockType } from '@typebot.io/schemas'\r\n\r\nexport const executeIntegration = ({\r\n  block,\r\n  context,\r\n}: {\r\n  block: IntegrationBlock\r\n  context: IntegrationState\r\n}): Promise<string | undefined> | string | undefined => {\r\n  switch (block.type) {\r\n    // case IntegrationBlockType.GOOGLE_SHEETS:\r\n    //   return executeGoogleSheetBlock(block, context)\r\n    // case IntegrationBlockType.GOOGLE_ANALYTICS:\r\n    //   return executeGoogleAnalyticsBlock(block, context)\r\n    // case IntegrationBlockType.ZAPIER:\r\n    // case IntegrationBlockType.MAKE_COM:\r\n    // case IntegrationBlockType.PABBLY_CONNECT:\r\n    case IntegrationBlockType.WEBHOOK:\r\n      return executeWebhook(block, context)\r\n    // case IntegrationBlockType.EMAIL:\r\n    //   return executeSendEmailBlock(block, context)\r\n    // case IntegrationBlockType.CHATWOOT:\r\n    //   return executeChatwootBlock(block, context)\r\n    default:\r\n      return\r\n  }\r\n}\r\n","import { parseVariables } from '@/features/variables'\r\nimport { EdgeId, LogicState } from '@/types'\r\nimport {\r\n  Comparison,\r\n  ComparisonOperators,\r\n  ConditionBlock,\r\n  LogicalOperator,\r\n  Variable,\r\n} from '@typebot.io/schemas'\r\nimport { isNotDefined, isDefined } from '@typebot.io/lib'\r\n\r\nexport const executeCondition = (\r\n  block: ConditionBlock,\r\n  { typebot: { variables } }: LogicState\r\n): EdgeId | undefined => {\r\n  const passedCondition = block.items.find((item) => {\r\n    const { content } = item\r\n    const isConditionPassed =\r\n      content.logicalOperator === LogicalOperator.AND\r\n        ? content.comparisons.every(executeComparison(variables))\r\n        : content.comparisons.some(executeComparison(variables))\r\n    return isConditionPassed\r\n  })\r\n  return passedCondition ? passedCondition.outgoingEdgeId : block.outgoingEdgeId\r\n}\r\n\r\nconst executeComparison =\r\n  (variables: Variable[]) => (comparison: Comparison) => {\r\n    if (!comparison?.variableId) return false\r\n    const inputValue = (\r\n      variables.find((v) => v.id === comparison.variableId)?.value ?? ''\r\n    )\r\n      .toString()\r\n      .trim()\r\n    const value = parseVariables(variables)(comparison.value).trim()\r\n    if (isNotDefined(value) || !comparison.comparisonOperator) return false\r\n    return matchComparison(inputValue, comparison.comparisonOperator, value)\r\n  }\r\n\r\nconst matchComparison = (\r\n  inputValue: string,\r\n  comparisonOperator: ComparisonOperators,\r\n  value: string\r\n) => {\r\n  switch (comparisonOperator) {\r\n    case ComparisonOperators.CONTAINS: {\r\n      return inputValue.toLowerCase().includes(value.toLowerCase())\r\n    }\r\n    case ComparisonOperators.EQUAL: {\r\n      return inputValue === value\r\n    }\r\n    case ComparisonOperators.NOT_EQUAL: {\r\n      return inputValue !== value\r\n    }\r\n    case ComparisonOperators.GREATER: {\r\n      return parseFloat(inputValue) > parseFloat(value)\r\n    }\r\n    case ComparisonOperators.LESS: {\r\n      return parseFloat(inputValue) < parseFloat(value)\r\n    }\r\n    case ComparisonOperators.IS_SET: {\r\n      return isDefined(inputValue) && inputValue.length > 0\r\n    }\r\n  }\r\n}\r\n","import { parseVariables } from '@/features/variables'\r\nimport { EdgeId, LogicState } from '@/types'\r\nimport { sendEventToParent } from '@/utils/chat'\r\nimport { RedirectBlock } from '@typebot.io/schemas'\r\nimport { sanitizeUrl } from '@typebot.io/lib'\r\n\r\nexport const executeRedirect = (\r\n  block: RedirectBlock,\r\n  { typebot: { variables } }: LogicState\r\n): {\r\n  nextEdgeId?: EdgeId\r\n  blockedPopupUrl?: string\r\n} => {\r\n  if (!block.options?.url) return { nextEdgeId: block.outgoingEdgeId }\r\n  const formattedUrl = sanitizeUrl(parseVariables(variables)(block.options.url))\r\n  const isEmbedded = window.parent && window.location !== window.top?.location\r\n  let newWindow: Window | null = null\r\n  if (isEmbedded) {\r\n    if (!block.options.isNewTab) {\r\n      ;(window.top as Window).location.href = formattedUrl\r\n      return { nextEdgeId: block.outgoingEdgeId }\r\n    }\r\n\r\n    try {\r\n      newWindow = window.open(formattedUrl)\r\n    } catch (err) {\r\n      sendEventToParent({ redirectUrl: formattedUrl })\r\n    }\r\n  } else {\r\n    newWindow = window.open(\r\n      formattedUrl,\r\n      block.options.isNewTab ? '_blank' : '_self'\r\n    )\r\n  }\r\n  return {\r\n    nextEdgeId: block.outgoingEdgeId,\r\n    blockedPopupUrl: newWindow ? undefined : formattedUrl,\r\n  }\r\n}\r\n","import { SetVariableBlock, Variable } from '@typebot.io/schemas'\r\nimport { byId } from '@typebot.io/lib'\r\nimport { EdgeId, LogicState } from '@/types'\r\nimport { parseVariables, parseCorrectValueType } from '@/features/variables'\r\n\r\nexport const executeSetVariable = (\r\n  block: SetVariableBlock,\r\n  { typebot: { variables }, updateVariableValue, updateVariables }: LogicState\r\n): EdgeId | undefined => {\r\n  if (!block.options?.variableId) return block.outgoingEdgeId\r\n  const evaluatedExpression = block.options.expressionToEvaluate\r\n    ? evaluateSetVariableExpression(variables)(\r\n        block.options.expressionToEvaluate\r\n      )\r\n    : undefined\r\n  const existingVariable = variables.find(byId(block.options.variableId))\r\n  if (!existingVariable) return block.outgoingEdgeId\r\n  updateVariableValue(existingVariable.id, evaluatedExpression)\r\n  updateVariables([{ ...existingVariable, value: evaluatedExpression }])\r\n  return block.outgoingEdgeId\r\n}\r\n\r\nconst evaluateSetVariableExpression =\r\n  (variables: Variable[]) =>\r\n  (str: string): unknown => {\r\n    const evaluating = parseVariables(variables, { fieldToParse: 'id' })(\r\n      str.includes('return ') ? str : `return ${str}`\r\n    )\r\n    try {\r\n      const func = Function(...variables.map((v) => v.id), evaluating)\r\n      return func(...variables.map((v) => parseCorrectValueType(v.value)))\r\n    } catch (err) {\r\n      return parseVariables(variables)(str)\r\n    }\r\n  }\r\n","import { LinkedTypebot } from '@/providers/TypebotProvider'\r\nimport { LogicState } from '@/types'\r\nimport { TypebotLinkBlock, Typebot, PublicTypebot } from '@typebot.io/schemas'\r\nimport { sendRequest } from '@typebot.io/lib'\r\n\r\nexport const fetchAndInjectTypebot = async (\r\n  block: TypebotLinkBlock,\r\n  { apiHost, injectLinkedTypebot, isPreview }: LogicState\r\n): Promise<LinkedTypebot | undefined> => {\r\n  const { data, error } = isPreview\r\n    ? await sendRequest<{ typebot: Typebot }>(\r\n        `/api/typebots/${block.options.typebotId}`\r\n      )\r\n    : await sendRequest<{ typebot: PublicTypebot }>(\r\n        `${apiHost}/api/publicTypebots/${block.options.typebotId}`\r\n      )\r\n  if (!data || error) return\r\n  return injectLinkedTypebot(data.typebot)\r\n}\r\n","import { LinkedTypebot } from '@/providers/TypebotProvider'\r\nimport { EdgeId, LogicState } from '@/types'\r\nimport { TypebotLinkBlock, Edge, PublicTypebot } from '@typebot.io/schemas'\r\nimport { fetchAndInjectTypebot } from '../queries/fetchAndInjectTypebotQuery'\r\n\r\nexport const executeTypebotLink = async (\r\n  block: TypebotLinkBlock,\r\n  context: LogicState\r\n): Promise<{\r\n  nextEdgeId?: EdgeId\r\n  linkedTypebot?: PublicTypebot | LinkedTypebot\r\n}> => {\r\n  const {\r\n    typebot,\r\n    linkedTypebots,\r\n    onNewLog,\r\n    createEdge,\r\n    setCurrentTypebotId,\r\n    pushEdgeIdInLinkedTypebotQueue,\r\n    pushParentTypebotId,\r\n    currentTypebotId,\r\n  } = context\r\n  const linkedTypebot = (\r\n    block.options.typebotId === 'current'\r\n      ? typebot\r\n      : [typebot, ...linkedTypebots].find((typebot) =>\r\n          'typebotId' in typebot\r\n            ? typebot.typebotId === block.options.typebotId\r\n            : typebot.id === block.options.typebotId\r\n        ) ?? (await fetchAndInjectTypebot(block, context))\r\n  ) as PublicTypebot | LinkedTypebot | undefined\r\n  if (!linkedTypebot) {\r\n    onNewLog({\r\n      status: 'error',\r\n      description: 'Failed to link typebot',\r\n      details: '',\r\n    })\r\n    return { nextEdgeId: block.outgoingEdgeId }\r\n  }\r\n  if (block.outgoingEdgeId)\r\n    pushEdgeIdInLinkedTypebotQueue({\r\n      edgeId: block.outgoingEdgeId,\r\n      typebotId: currentTypebotId,\r\n    })\r\n  pushParentTypebotId(currentTypebotId)\r\n  setCurrentTypebotId(\r\n    'typebotId' in linkedTypebot ? linkedTypebot.typebotId : linkedTypebot.id\r\n  )\r\n  const nextGroupId =\r\n    block.options.groupId ??\r\n    linkedTypebot.groups.find((b) => b.blocks.some((s) => s.type === 'start'))\r\n      ?.id\r\n  if (!nextGroupId) return { nextEdgeId: block.outgoingEdgeId }\r\n  const newEdge: Edge = {\r\n    id: (Math.random() * 1000).toString(),\r\n    from: { blockId: '', groupId: '' },\r\n    to: {\r\n      groupId: nextGroupId,\r\n    },\r\n  }\r\n  createEdge(newEdge)\r\n  return {\r\n    nextEdgeId: newEdge.id,\r\n    linkedTypebot: {\r\n      ...linkedTypebot,\r\n      edges: [...linkedTypebot.edges, newEdge],\r\n    },\r\n  }\r\n}\r\n","import { parseVariables } from '@/features/variables'\r\nimport { LogicState } from '@/types'\r\nimport { WaitBlock } from '@typebot.io/schemas'\r\n\r\nexport const executeWait = async (\r\n  block: WaitBlock,\r\n  { typebot: { variables } }: LogicState\r\n) => {\r\n  if (!block.options.secondsToWaitFor) return block.outgoingEdgeId\r\n  const parsedSecondsToWaitFor = parseVariables(variables)(\r\n    block.options.secondsToWaitFor\r\n  )\r\n  // @ts-expect-error isNaN can be used with strings\r\n  if (isNaN(parsedSecondsToWaitFor)) return block.outgoingEdgeId\r\n  await new Promise((resolve) =>\r\n    setTimeout(resolve, parseInt(parsedSecondsToWaitFor) * 1000)\r\n  )\r\n  return block.outgoingEdgeId\r\n}\r\n","import { parseVariables, parseCorrectValueType } from '@/features/variables'\r\nimport { LogicState } from '@/types'\r\nimport { sendEventToParent } from '@/utils/chat'\r\nimport { isEmbedded } from '@/utils/helpers'\r\nimport { ScriptBlock } from '@typebot.io/schemas'\r\n\r\nexport const executeScript = async (\r\n  block: ScriptBlock,\r\n  { typebot: { variables } }: LogicState\r\n) => {\r\n  if (!block.options.content) return\r\n  if (block.options.shouldExecuteInParentContext && isEmbedded) {\r\n    sendEventToParent({\r\n      codeToExecute: parseVariables(variables)(block.options.content),\r\n    })\r\n  } else {\r\n    const func = Function(\r\n      ...variables.map((v) => v.id),\r\n      parseVariables(variables, { fieldToParse: 'id' })(block.options.content)\r\n    )\r\n    try {\r\n      await func(...variables.map((v) => parseCorrectValueType(v.value)))\r\n    } catch (err) {\r\n      console.error(err)\r\n    }\r\n  }\r\n\r\n  return block.outgoingEdgeId\r\n}\r\n","import { TypebotViewerProps } from '@/components/TypebotViewer'\r\nimport { executeCondition } from '@/features/blocks/logic/condition'\r\nimport { executeRedirect } from '@/features/blocks/logic/redirect'\r\nimport { executeSetVariable } from '@/features/blocks/logic/setVariable'\r\nimport { executeTypebotLink } from '@/features/blocks/logic/typebotLink'\r\nimport { executeWait } from '@/features/blocks/logic/wait'\r\nimport { LinkedTypebot } from '@/providers/TypebotProvider'\r\nimport { EdgeId, LogicState } from '@/types'\r\nimport { LogicBlock, LogicBlockType } from '@typebot.io/schemas'\r\nimport { executeScript } from '@/features/blocks/logic/script/executeScript'\r\n\r\nexport const executeLogic = async (\r\n  block: LogicBlock,\r\n  context: LogicState\r\n): Promise<{\r\n  nextEdgeId?: EdgeId\r\n  linkedTypebot?: TypebotViewerProps['typebot'] | LinkedTypebot\r\n  blockedPopupUrl?: string\r\n}> => {\r\n  switch (block.type) {\r\n    case LogicBlockType.SET_VARIABLE:\r\n      return { nextEdgeId: executeSetVariable(block, context) }\r\n    case LogicBlockType.CONDITION:\r\n      return { nextEdgeId: executeCondition(block, context) }\r\n    case LogicBlockType.REDIRECT:\r\n      return executeRedirect(block, context)\r\n    case LogicBlockType.SCRIPT:\r\n      return { nextEdgeId: await executeScript(block, context) }\r\n    case LogicBlockType.TYPEBOT_LINK:\r\n      return executeTypebotLink(block, context)\r\n    case LogicBlockType.WAIT:\r\n      return { nextEdgeId: await executeWait(block, context) }\r\n    default:\r\n      return {}\r\n  }\r\n}\r\n","type Props = {\r\n  url: string\r\n  onLinkClick: () => void\r\n}\r\n\r\nexport const PopupBlockedToast = ({ url, onLinkClick }: Props) => {\r\n  return (\r\n    <div\r\n      className=\"w-full max-w-xs p-4 text-gray-500 bg-white rounded-lg shadow flex flex-col gap-2\"\r\n      role=\"alert\"\r\n    >\r\n      <span className=\"mb-1 text-sm font-semibold text-gray-900\">\r\n        Popup blocked\r\n      </span>\r\n      <div className=\"mb-2 text-sm font-normal\">\r\n        The bot wants to open a new tab but it was blocked by your broswer. It\r\n        needs a manual approval.\r\n      </div>\r\n      <a\r\n        href={url}\r\n        target=\"_blank\"\r\n        className=\"py-1 px-4 justify-center text-sm font-semibold rounded-md text-white focus:outline-none flex items-center disabled:opacity-50 disabled:cursor-not-allowed disabled:brightness-100 transition-all filter hover:brightness-90 active:brightness-75 typebot-button\"\r\n        rel=\"noreferrer\"\r\n        onClick={onLinkClick}\r\n      >\r\n        Continue in new tab\r\n      </a>\r\n    </div>\r\n  )\r\n}\r\n","import {\r\n  Background,\r\n  BackgroundType,\r\n  ChatTheme,\r\n  ContainerColors,\r\n  GeneralTheme,\r\n  InputColors,\r\n  Theme,\r\n} from '@typebot.io/schemas'\r\n\r\nconst cssVariableNames = {\r\n  general: {\r\n    bgImage: '--typebot-container-bg-image',\r\n    bgColor: '--typebot-container-bg-color',\r\n    fontFamily: '--typebot-container-font-family',\r\n  },\r\n  chat: {\r\n    hostBubbles: {\r\n      bgColor: '--typebot-host-bubble-bg-color',\r\n      color: '--typebot-host-bubble-color',\r\n    },\r\n    guestBubbles: {\r\n      bgColor: '--typebot-guest-bubble-bg-color',\r\n      color: '--typebot-guest-bubble-color',\r\n    },\r\n    inputs: {\r\n      bgColor: '--typebot-input-bg-color',\r\n      color: '--typebot-input-color',\r\n      placeholderColor: '--typebot-input-placeholder-color',\r\n    },\r\n    buttons: {\r\n      bgColor: '--typebot-button-bg-color',\r\n      color: '--typebot-button-color',\r\n    },\r\n  },\r\n}\r\n\r\nexport const setCssVariablesValue = (\r\n  theme: Theme | undefined,\r\n  documentStyle: CSSStyleDeclaration\r\n) => {\r\n  if (!theme) return\r\n  if (theme.general) setGeneralTheme(theme.general, documentStyle)\r\n  if (theme.chat) setChatTheme(theme.chat, documentStyle)\r\n}\r\n\r\nconst setGeneralTheme = (\r\n  generalTheme: GeneralTheme,\r\n  documentStyle: CSSStyleDeclaration\r\n) => {\r\n  const { background, font } = generalTheme\r\n  if (background) setTypebotBackground\r\n  if (font) documentStyle.setProperty(cssVariableNames.general.fontFamily, font)\r\n}\r\n\r\nconst setChatTheme = (\r\n  chatTheme: ChatTheme,\r\n  documentStyle: CSSStyleDeclaration\r\n) => {\r\n  const { hostBubbles, guestBubbles, buttons, inputs } = chatTheme\r\n  if (hostBubbles) setHostBubbles(hostBubbles, documentStyle)\r\n  if (guestBubbles) setGuestBubbles(guestBubbles, documentStyle)\r\n  if (buttons) setButtons(buttons, documentStyle)\r\n  if (inputs) setInputs(inputs, documentStyle)\r\n}\r\n\r\nconst setHostBubbles = (\r\n  hostBubbles: ContainerColors,\r\n  documentStyle: CSSStyleDeclaration\r\n) => {\r\n  if (hostBubbles.backgroundColor)\r\n    documentStyle.setProperty(\r\n      cssVariableNames.chat.hostBubbles.bgColor,\r\n      hostBubbles.backgroundColor\r\n    )\r\n  if (hostBubbles.color)\r\n    documentStyle.setProperty(\r\n      cssVariableNames.chat.hostBubbles.color,\r\n      hostBubbles.color\r\n    )\r\n}\r\n\r\nconst setGuestBubbles = (\r\n  guestBubbles: ContainerColors,\r\n  documentStyle: CSSStyleDeclaration\r\n) => {\r\n  if (guestBubbles.backgroundColor)\r\n    documentStyle.setProperty(\r\n      cssVariableNames.chat.guestBubbles.bgColor,\r\n      guestBubbles.backgroundColor\r\n    )\r\n  if (guestBubbles.color)\r\n    documentStyle.setProperty(\r\n      cssVariableNames.chat.guestBubbles.color,\r\n      guestBubbles.color\r\n    )\r\n}\r\n\r\nconst setButtons = (\r\n  buttons: ContainerColors,\r\n  documentStyle: CSSStyleDeclaration\r\n) => {\r\n  if (buttons.backgroundColor)\r\n    documentStyle.setProperty(\r\n      cssVariableNames.chat.buttons.bgColor,\r\n      buttons.backgroundColor\r\n    )\r\n  if (buttons.color)\r\n    documentStyle.setProperty(\r\n      cssVariableNames.chat.buttons.color,\r\n      buttons.color\r\n    )\r\n}\r\n\r\nconst setInputs = (inputs: InputColors, documentStyle: CSSStyleDeclaration) => {\r\n  if (inputs.backgroundColor)\r\n    documentStyle.setProperty(\r\n      cssVariableNames.chat.inputs.bgColor,\r\n      inputs.backgroundColor\r\n    )\r\n  if (inputs.color)\r\n    documentStyle.setProperty(cssVariableNames.chat.inputs.color, inputs.color)\r\n  if (inputs.placeholderColor)\r\n    documentStyle.setProperty(\r\n      cssVariableNames.chat.inputs.placeholderColor,\r\n      inputs.placeholderColor\r\n    )\r\n}\r\n\r\nconst setTypebotBackground = (\r\n  background: Background,\r\n  documentStyle: CSSStyleDeclaration\r\n) => {\r\n  documentStyle.setProperty(\r\n    background?.type === BackgroundType.IMAGE\r\n      ? cssVariableNames.general.bgImage\r\n      : cssVariableNames.general.bgColor,\r\n    background.type === BackgroundType.NONE\r\n      ? 'transparent'\r\n      : background.content ?? '#ffffff'\r\n  )\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\n\r\nexport const LiteBadge = () => {\r\n  const liteBadge = useRef<HTMLAnchorElement | null>(null)\r\n\r\n  useEffect(() => {\r\n    if (!document) return\r\n    const container = document.querySelector(\r\n      '[data-testid=\"container\"]'\r\n    ) as HTMLDivElement\r\n    const observer = new MutationObserver(function (mutations_list) {\r\n      mutations_list.forEach(function (mutation) {\r\n        mutation.removedNodes.forEach(function (removed_node) {\r\n          if ((removed_node as HTMLElement).id == 'lite-badge')\r\n            container.append(liteBadge.current as Node)\r\n        })\r\n      })\r\n    })\r\n    observer.observe(container, {\r\n      subtree: false,\r\n      childList: true,\r\n    })\r\n\r\n    return () => {\r\n      observer.disconnect()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  return (\r\n    <a\r\n      ref={liteBadge}\r\n      href={'https://www.typebot.io/?utm_source=litebadge'}\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n      className=\"fixed py-1 px-2 bg-white z-50 rounded shadow-md lite-badge\"\r\n      style={{ bottom: '20px' }}\r\n      id=\"lite-badge\"\r\n    >\r\n      Made with <span className=\"text-blue-500\">Typebot</span>.\r\n    </a>\r\n  )\r\n}\r\n"],"mappings":"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","names":["InputBlockType","BubbleBlockType","LogicBlockType","IntegrationBlockType","_a","variable","_a","localTypebot","_a","variable","typebot","useEffect","useRef","useState","useEffect","useRef","useState","CSSTransition","useEffect","useState","useState","jsx","jsx","useState","jsx","AvatarSideContainer","useState","useEffect","util","objectUtil","errorUtil","errorMap","_a","ctx","result","issues","elements","processed","ZodFirstPartyTypeKind","VideoBubbleContentType","PaymentProvider","LogicalOperator","ComparisonOperators","BackgroundType","useEffect","useRef","useState","jsx","jsxs","jsx","jsxs","useRef","useState","useEffect","useEffect","useRef","useState","Fragment","jsx","jsxs","showAnimationDuration","_a","useRef","useState","useEffect","useCallback","useEffect","useRef","useState","jsx","jsxs","showAnimationDuration","_a","useRef","useState","useCallback","useEffect","useCallback","useEffect","useRef","useState","_a","jsx","jsxs","showAnimationDuration","_a","useRef","useState","useCallback","useEffect","useCallback","useEffect","useRef","useState","Fragment","jsx","jsxs","showAnimationDuration","useRef","useState","useCallback","showAnimationDuration","useEffect","jsx","jsxs","Fragment","jsx","useState","createContext","useContext","useState","jsx","createContext","useState","_a","resultValues","useContext","useState","CSSTransition","jsx","jsxs","React","jsx","React","ShortTextInput","_a","jsx","jsx","jsxs","_a","useRef","useState","jsx","jsxs","_a","inputValue","emailRegex","useRef","useState","jsx","jsxs","_a","inputValue","useRef","useState","jsx","jsxs","_a","inputValue","React","jsx","React","Textarea","_a","useRef","useState","jsx","jsxs","_a","inputValue","useRef","useState","jsx","jsxs","_a","inputValue","useState","jsx","jsxs","_a","useState","useState","jsx","jsxs","_a","useState","_b","useEffect","useState","document","createContext","useContext","jsx","scroll","jsx","jsxs","useState","useEffect","scroll","_a","jsx","useState","jsx","jsxs","_a","useState","rating","useState","Fragment","jsx","jsxs","_a","useState","jsx","jsxs","_a","useState","newVariables","_a","_a","isEmbedded","_a","_a","typebot","jsx","jsxs","Fragment","jsx","jsxs","_a","scroll","useState","useEffect","blockedPopupUrl","useRef","CSSTransition","_a","jsx","jsxs","useState","useRef","nextGroup","useEffect","predefinedVariables","useEffect","useRef","jsx","jsxs","Fragment","jsx","jsxs","_a","_b","_c"]}